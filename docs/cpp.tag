<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>christofides.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>christofides_8h</filename>
    <includes id="eulerian__path_8h" name="eulerian_path.h" local="yes" imported="no">ortools/graph/eulerian_path.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">ortools/graph/graph.h</includes>
    <includes id="minimum__spanning__tree_8h" name="minimum_spanning_tree.h" local="yes" imported="no">ortools/graph/minimum_spanning_tree.h</includes>
    <includes id="linear__solver_8h" name="linear_solver.h" local="yes" imported="no">ortools/linear_solver/linear_solver.h</includes>
    <includes id="linear__solver_8pb_8h" name="linear_solver.pb.h" local="yes" imported="no">ortools/linear_solver/linear_solver.pb.h</includes>
    <class kind="class">operations_research::ChristofidesPathSolver</class>
    <namespace>operations_research</namespace>
  </compound>
  <compound kind="file">
    <name>cliques.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>cliques_8h</filename>
    <class kind="class">operations_research::BronKerboschAlgorithm</class>
    <namespace>operations_research</namespace>
    <member kind="enumeration">
      <type></type>
      <name>CliqueResponse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>af2d89e69d073dc3036a6de24710b416f</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceoperations__research.html" anchor="af2d89e69d073dc3036a6de24710b416fa2f453cfe638e57e27bb0c9512436111e">CONTINUE</enumvalue>
      <enumvalue file="namespaceoperations__research.html" anchor="af2d89e69d073dc3036a6de24710b416fa615a46af313786fc4e349f34118be111">STOP</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BronKerboschAlgorithmStatus</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a708cf34b342e7d2ed89a3b73dbec4eae</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceoperations__research.html" anchor="a708cf34b342e7d2ed89a3b73dbec4eaea8f7afecbc8fbc4cd0f50a57d1172482e">COMPLETED</enumvalue>
      <enumvalue file="namespaceoperations__research.html" anchor="a708cf34b342e7d2ed89a3b73dbec4eaea658f2cadfdf09b6046246e9314f7cd43">INTERRUPTED</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindCliques</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a509097448ff5705cf3e64d889362bdec</anchor>
      <arglist>(std::function&lt; bool(int, int)&gt; graph, int node_count, std::function&lt; bool(const std::vector&lt; int &gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CoverArcsByCliques</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>afe4b5a6c0e4019314f288e3f4307c114</anchor>
      <arglist>(std::function&lt; bool(int, int)&gt; graph, int node_count, std::function&lt; bool(const std::vector&lt; int &gt; &amp;)&gt; callback)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>connected_components.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>connected__components_8h</filename>
    <class kind="class">DenseConnectedComponentsFinder</class>
    <class kind="struct">internal::ConnectedComponentsTypeHelper</class>
    <class kind="struct">internal::ConnectedComponentsTypeHelper::SelectContainer</class>
    <class kind="struct">internal::ConnectedComponentsTypeHelper::SelectContainer&lt; U, absl::enable_if_t&lt; std::is_integral&lt; decltype(std::declval&lt; const U &amp; &gt;()(std::declval&lt; const T &amp; &gt;()))&gt;::value &gt; &gt;</class>
    <class kind="class">ConnectedComponentsFinder</class>
    <namespace>util</namespace>
    <namespace>internal</namespace>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>GetConnectedComponents</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a13f0e8f7e15873600cf8e395958c71e1</anchor>
      <arglist>(int num_nodes, const UndirectedGraph &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>connectivity.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>connectivity_8h</filename>
    <class kind="class">operations_research::ConnectedComponents</class>
    <namespace>operations_research</namespace>
  </compound>
  <compound kind="file">
    <name>constraint_solver.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>constraint__solver_8h</filename>
    <includes id="sorted__interval__list_8h" name="sorted_interval_list.h" local="yes" imported="no">ortools/util/sorted_interval_list.h</includes>
    <class kind="class">operations_research::SimpleRevFIFO</class>
    <class kind="struct">operations_research::DefaultPhaseParameters</class>
    <class kind="class">operations_research::Solver</class>
    <class kind="struct">operations_research::Solver::IntegerCastInfo</class>
    <class kind="struct">operations_research::Solver::SearchLogParameters</class>
    <class kind="class">operations_research::BaseObject</class>
    <class kind="class">operations_research::PropagationBaseObject</class>
    <class kind="class">operations_research::Decision</class>
    <class kind="class">operations_research::DecisionVisitor</class>
    <class kind="class">operations_research::DecisionBuilder</class>
    <class kind="class">operations_research::Demon</class>
    <class kind="class">operations_research::ModelVisitor</class>
    <class kind="class">operations_research::Constraint</class>
    <class kind="class">operations_research::CastConstraint</class>
    <class kind="class">operations_research::SearchMonitor</class>
    <class kind="class">operations_research::Rev</class>
    <class kind="class">operations_research::NumericalRev</class>
    <class kind="class">operations_research::RevArray</class>
    <class kind="class">operations_research::NumericalRevArray</class>
    <class kind="class">operations_research::IntExpr</class>
    <class kind="class">operations_research::IntVarIterator</class>
    <class kind="class">operations_research::InitAndGetValues</class>
    <class kind="struct">operations_research::InitAndGetValues::Iterator</class>
    <class kind="class">operations_research::IntVar</class>
    <class kind="class">operations_research::SolutionCollector</class>
    <class kind="struct">operations_research::SolutionCollector::SolutionData</class>
    <class kind="class">operations_research::OptimizeVar</class>
    <class kind="class">operations_research::SearchLimit</class>
    <class kind="class">operations_research::RegularLimit</class>
    <class kind="class">operations_research::IntervalVar</class>
    <class kind="class">operations_research::SequenceVar</class>
    <class kind="class">operations_research::AssignmentElement</class>
    <class kind="class">operations_research::IntVarElement</class>
    <class kind="class">operations_research::IntervalVarElement</class>
    <class kind="class">operations_research::SequenceVarElement</class>
    <class kind="class">operations_research::AssignmentContainer</class>
    <class kind="class">operations_research::Assignment</class>
    <class kind="class">operations_research::Pack</class>
    <class kind="class">operations_research::DisjunctiveConstraint</class>
    <class kind="class">operations_research::SolutionPool</class>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a316abccdfa41512564d84365ea8f0ead</anchor>
      <arglist>(std::ostream &amp;out, const Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Zero</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a009f247167f32509baf749083e4bc984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>One</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa96bb5a28dd9c1ccc864b1587e8e1a98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a991f7a823d83b455d6b1a45141cb9ce9</anchor>
      <arglist>(std::ostream &amp;out, const BaseObject *o)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4f44b10aa7fc7b6e85b72e7f0c96cc1f</anchor>
      <arglist>(std::ostream &amp;out, const Assignment &amp;assignment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAssignmentFromAssignment</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aea2bf322fab4e2319a23ad22acf8ccf8</anchor>
      <arglist>(Assignment *target_assignment, const std::vector&lt; IntVar * &gt; &amp;target_vars, const Assignment *source_assignment, const std::vector&lt; IntVar * &gt; &amp;source_vars)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constraint_solveri.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>constraint__solveri_8h</filename>
    <includes id="constraint__solver_8h" name="constraint_solver.h" local="yes" imported="no">ortools/constraint_solver/constraint_solver.h</includes>
    <class kind="class">operations_research::BaseIntExpr</class>
    <class kind="class">operations_research::SimpleRevFIFO</class>
    <class kind="class">operations_research::SimpleRevFIFO::Iterator</class>
    <class kind="class">operations_research::RevImmutableMultiMap</class>
    <class kind="class">operations_research::RevSwitch</class>
    <class kind="class">operations_research::SmallRevBitSet</class>
    <class kind="class">operations_research::RevBitSet</class>
    <class kind="class">operations_research::RevBitMatrix</class>
    <class kind="class">operations_research::CallMethod0</class>
    <class kind="class">operations_research::CallMethod1</class>
    <class kind="class">operations_research::CallMethod2</class>
    <class kind="class">operations_research::CallMethod3</class>
    <class kind="class">operations_research::DelayedCallMethod0</class>
    <class kind="class">operations_research::DelayedCallMethod1</class>
    <class kind="class">operations_research::DelayedCallMethod2</class>
    <class kind="class">operations_research::LocalSearchOperator</class>
    <class kind="class">operations_research::VarLocalSearchOperator</class>
    <class kind="class">operations_research::IntVarLocalSearchHandler</class>
    <class kind="class">operations_research::IntVarLocalSearchOperator</class>
    <class kind="class">operations_research::SequenceVarLocalSearchHandler</class>
    <class kind="class">operations_research::SequenceVarLocalSearchOperator</class>
    <class kind="class">operations_research::BaseLns</class>
    <class kind="class">operations_research::ChangeValue</class>
    <class kind="class">operations_research::PathOperator</class>
    <class kind="class">operations_research::PathWithPreviousNodesOperator</class>
    <class kind="class">operations_research::LocalSearchFilter</class>
    <class kind="class">operations_research::LocalSearchFilterManager</class>
    <class kind="class">operations_research::IntVarLocalSearchFilter</class>
    <class kind="class">operations_research::PropagationMonitor</class>
    <class kind="class">operations_research::LocalSearchMonitor</class>
    <class kind="class">operations_research::BooleanVar</class>
    <class kind="class">operations_research::SymmetryBreaker</class>
    <class kind="class">operations_research::SearchLog</class>
    <class kind="class">operations_research::ModelCache</class>
    <class kind="class">operations_research::ArgumentHolder</class>
    <class kind="class">operations_research::ModelParser</class>
    <class kind="class">operations_research::ArrayWithOffset</class>
    <class kind="class">operations_research::RevGrowingArray</class>
    <class kind="class">operations_research::RevIntSet</class>
    <class kind="class">operations_research::RevPartialSequence</class>
    <class kind="class">operations_research::UnsortedNullableRevBitset</class>
    <namespace>operations_research</namespace>
    <member kind="typedef">
      <type>VarLocalSearchOperator&lt; SequenceVar, std::vector&lt; int &gt;, SequenceVarLocalSearchHandler &gt;</type>
      <name>SequenceVarLocalSearchOperatorTemplate</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad91551404d4eeb115402e25f8ac599b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarTypes</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSPECIFIED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dbab4f91414920a046da6b20cd63a2796e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOMAIN_INT_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba035478726d2dcd2fb9ac77afb5c759cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOLEAN_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba79122eee2a14a98d575b0b9ac73b0e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONST_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dbad9de5a1ac157ce63c698777275b17787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ADD_CST</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba0cc8439ff5d71bb0c4c981cd04b73d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_TIMES_CST</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dbaa77c2e49834d223253421d9e3d69c51c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CST_SUB_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba93697c551d06ce8d37be776116f23f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPP_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba9558ccbf57e24d3ddde9bfbf2835e4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRACE_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba93b00759c703fe20d9d8a5a75268a69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a64cf3e1336ec61275bdd2ae853d38406</anchor>
      <arglist>(uint64 value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab89995e46facfc1db291ce75658dd0a5</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>acfc54730764156f1fb717e99b71ba5d4</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a65a9c1ccf298ae110decc3b9d285dc16</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3ca754fad158b92d7f678b5d354d8927</anchor>
      <arglist>(void *const ptr)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aec42cb0a7c3079eb8f0406914077d633</anchor>
      <arglist>(const std::vector&lt; T * &gt; &amp;ptrs)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac2ba31780fce352d4bba600e6e8eacad</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;ptrs)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeLocalSearchOperator</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a85ea0ef5b46465c3793333ce9821f15f</anchor>
      <arglist>(Solver *solver, const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArrayConstant</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a12527c82ffc8b31c5d8dc836c366d624</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArrayBoolean</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3f4525e71a6b05d97c868f0832750a60</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllOnes</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae3e4f71c4c79e0b4ec00c4e715a7c298</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllNull</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab0ae787392a8dd8a499eb55ac0916aa4</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllGreaterOrEqual</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3aea406979285a28c91fd1ee8115af74</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllLessOrEqual</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a15f08cfbb35e2b8b1eb76f79caea924a</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllPositive</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab62b402f767cda48eb67ef8b50397f8f</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllNegative</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a38972723946490ea4df4e34298d8805d</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllStrictlyPositive</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3de09f9134b976e5ba64751ac0f4440b</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllStrictlyNegative</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a8351829c324863ddda52e201df4f9f84</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncreasingContiguous</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aafac7375c23337f25821aa6f86ca627c</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncreasing</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3d434774c07815a25ffaa7adb343c19e</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArrayInRange</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>adf2aea6c68fe502389c9264b971b2f85</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, T range_min, T range_max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBound</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae4c7a8bfc6877606e512d3279549f44d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBooleans</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7abde7313cef64d25202a18f07481fc3</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBoundOrNull</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a54470bffc3ea32cc37d0222e5dbb62a6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBoundTo</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7028ce8b481be8cb6fca7a6925d41aa7</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>MaxVarArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abc42d1bcfe023d3ac6f59471b75d853c</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>MinVarArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5c1932027ef8bc1689d725a1c597867b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillValues</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a6662a100d8715747870beb9721bb304b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, std::vector&lt; int64 &gt; *const values)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PosIntDivUp</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a60dabfa452b4264887ef76c75edf3765</anchor>
      <arglist>(int64 e, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PosIntDivDown</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a942ba2898a44303790c91e761b8f4630</anchor>
      <arglist>(int64 e, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int64 &gt;</type>
      <name>ToInt64Vector</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aad4e1b406f0e56c83283747b038df88a</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3ea6af6581e6922832918c97753146a7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a0953b50b08320d1109c678555137f1db</anchor>
      <arglist>(P param)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3c2f93547af434566184b7dee7039c93</anchor>
      <arglist>(P *param)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4fb750da00c784e5ffd1763fd3ce88f7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4da629cafe75f958924e1684ac2b0eff</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon3</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abdca98f14c02e004ab5e19d2c3985667</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q, R), const std::string &amp;name, P param1, Q param2, R param3)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a82110ba1f45aa29ffc933102880dbd82</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a11f4a7dbafd8e00a36b892a82e44445f</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a29b8113bf656aa61493c9459508ed953</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3ea6af6581e6922832918c97753146a7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a0953b50b08320d1109c678555137f1db</anchor>
      <arglist>(P param)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3c2f93547af434566184b7dee7039c93</anchor>
      <arglist>(P *param)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4fb750da00c784e5ffd1763fd3ce88f7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4da629cafe75f958924e1684ac2b0eff</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon3</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abdca98f14c02e004ab5e19d2c3985667</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q, R), const std::string &amp;name, P param1, Q param2, R param3)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a82110ba1f45aa29ffc933102880dbd82</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a11f4a7dbafd8e00a36b892a82e44445f</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a29b8113bf656aa61493c9459508ed953</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cp_model.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/sat/</path>
    <filename>cp__model_8h</filename>
    <includes id="cp__model_8pb_8h" name="cp_model.pb.h" local="yes" imported="no">ortools/sat/cp_model.pb.h</includes>
    <includes id="cp__model__solver_8h" name="cp_model_solver.h" local="yes" imported="no">ortools/sat/cp_model_solver.h</includes>
    <includes id="model_8h" name="model.h" local="yes" imported="no">ortools/sat/model.h</includes>
    <includes id="sat__parameters_8pb_8h" name="sat_parameters.pb.h" local="yes" imported="no">ortools/sat/sat_parameters.pb.h</includes>
    <includes id="sorted__interval__list_8h" name="sorted_interval_list.h" local="yes" imported="no">ortools/util/sorted_interval_list.h</includes>
    <class kind="class">operations_research::sat::BoolVar</class>
    <class kind="class">operations_research::sat::IntVar</class>
    <class kind="class">operations_research::sat::LinearExpr</class>
    <class kind="class">operations_research::sat::IntervalVar</class>
    <class kind="class">operations_research::sat::Constraint</class>
    <class kind="class">operations_research::sat::CircuitConstraint</class>
    <class kind="class">operations_research::sat::TableConstraint</class>
    <class kind="class">operations_research::sat::ReservoirConstraint</class>
    <class kind="class">operations_research::sat::AutomatonConstraint</class>
    <class kind="class">operations_research::sat::NoOverlap2DConstraint</class>
    <class kind="class">operations_research::sat::CumulativeConstraint</class>
    <class kind="class">operations_research::sat::CpModelBuilder</class>
    <namespace>operations_research</namespace>
    <namespace>operations_research::sat</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9c0ae0d048a431656985fc79428bbe67</anchor>
      <arglist>(std::ostream &amp;os, const BoolVar &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>BoolVar</type>
      <name>Not</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a5e3de118c1f8dd5a7ec21704e05684b9</anchor>
      <arglist>(BoolVar x)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a57b8aabbc5b3c1d177d35b3ebcf9b5fa</anchor>
      <arglist>(std::ostream &amp;os, const IntVar &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ae9f86b31794751c624a783d15306280c</anchor>
      <arglist>(std::ostream &amp;os, const IntervalVar &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>SolutionIntegerValue</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aeaed9bdf2a27bb778ba397666cb874d7</anchor>
      <arglist>(const CpSolverResponse &amp;r, const LinearExpr &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>SolutionIntegerMin</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a671200a31003492dbef21f2b4ee3dcbd</anchor>
      <arglist>(const CpSolverResponse &amp;r, IntVar x)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>SolutionIntegerMax</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8ec893fa736de5b95135ecb9314ee6d8</anchor>
      <arglist>(const CpSolverResponse &amp;r, IntVar x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolutionBooleanValue</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>afa415e372a9d64eede869ed98666c29c</anchor>
      <arglist>(const CpSolverResponse &amp;r, BoolVar x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cp_model.pb.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/gen/ortools/sat/</path>
    <filename>cp__model_8pb_8h</filename>
    <class kind="struct">TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</class>
    <class kind="class">operations_research::sat::IntegerVariableProto</class>
    <class kind="class">operations_research::sat::BoolArgumentProto</class>
    <class kind="class">operations_research::sat::IntegerArgumentProto</class>
    <class kind="class">operations_research::sat::AllDifferentConstraintProto</class>
    <class kind="class">operations_research::sat::LinearConstraintProto</class>
    <class kind="class">operations_research::sat::ElementConstraintProto</class>
    <class kind="class">operations_research::sat::IntervalConstraintProto</class>
    <class kind="class">operations_research::sat::NoOverlapConstraintProto</class>
    <class kind="class">operations_research::sat::NoOverlap2DConstraintProto</class>
    <class kind="class">operations_research::sat::CumulativeConstraintProto</class>
    <class kind="class">operations_research::sat::ReservoirConstraintProto</class>
    <class kind="class">operations_research::sat::CircuitConstraintProto</class>
    <class kind="class">operations_research::sat::RoutesConstraintProto</class>
    <class kind="class">operations_research::sat::CircuitCoveringConstraintProto</class>
    <class kind="class">operations_research::sat::TableConstraintProto</class>
    <class kind="class">operations_research::sat::InverseConstraintProto</class>
    <class kind="class">operations_research::sat::AutomatonConstraintProto</class>
    <class kind="class">operations_research::sat::ConstraintProto</class>
    <class kind="class">operations_research::sat::CpObjectiveProto</class>
    <class kind="class">operations_research::sat::DecisionStrategyProto_AffineTransformation</class>
    <class kind="class">operations_research::sat::DecisionStrategyProto</class>
    <class kind="class">operations_research::sat::PartialVariableAssignment</class>
    <class kind="class">operations_research::sat::CpModelProto</class>
    <class kind="class">operations_research::sat::CpSolverResponse</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::CpSolverStatus &gt;</class>
    <namespace>operations_research</namespace>
    <namespace>operations_research::sat</namespace>
    <namespace>google</namespace>
    <namespace>google::protobuf</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>cp__model_8pb_8h.html</anchorfile>
      <anchor>a198722177a36417069228aec0f9d97d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DecisionStrategyProto_VariableSelectionStrategy</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_FIRST</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148ea5e00b7cd6b433ec6a15ff913d3b2c3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_LOWEST_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148ea0b1d456b36749d677aa4a201b22ba114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_HIGHEST_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148ea79fc0af04ed454750ecb59dc5a748e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_MIN_DOMAIN_SIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148ea18e573e60bf8dde6880a6cfb9f697ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_MAX_DOMAIN_SIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148ea9bc8cd090f555c04c4fb8ec23838dc30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_DecisionStrategyProto_VariableSelectionStrategy_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148ea77405cd855df69ed653be2766be0a1af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_DecisionStrategyProto_VariableSelectionStrategy_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148eadecec94c9d1599ecbdfdab2f7cfcb7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DecisionStrategyProto_DomainReductionStrategy</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_DomainReductionStrategy_SELECT_MIN_VALUE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4a2f416e6e94f971bfbb75ba25e7f7b760</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_DomainReductionStrategy_SELECT_MAX_VALUE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4ac22896facd05595ce84133b3b3043685</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_DomainReductionStrategy_SELECT_LOWER_HALF</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4ab63e61aebddafddd1496d6ab577dab53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_DomainReductionStrategy_SELECT_UPPER_HALF</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4ac41d0ba8114af7179c253fda16e517ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_DomainReductionStrategy_DecisionStrategyProto_DomainReductionStrategy_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4a82875a7d185a8f87d56cb0fb0f37f72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_DomainReductionStrategy_DecisionStrategyProto_DomainReductionStrategy_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4ac1c76a18c1405c9569b8afca29919e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CpSolverStatus</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12a693e3d1636a488a456c173453c45cc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODEL_INVALID</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12acb3300bde58b85d202f9c211dfabcb49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12ae4d551fa942cba479e3090bb8ae40e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12a185c2992ead7a0d90d260164cf10d46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12a78e9c6b9f6ac60a9e9c2d25967ed1ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CpSolverStatus_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12a443f059ef1efc767e19c5724f6c161d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CpSolverStatus_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12ae535ad44840a077b35974e3a04530717</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDescriptors_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>cp__model_8pb_8h.html</anchorfile>
      <anchor>a38bf680499d9a614d825dfa5a7a689a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::AllDifferentConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::AllDifferentConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab6c5ebe14cfc68d93a5f60686f2ae22d</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::AutomatonConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::AutomatonConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a47da04ba2be147be8b0a249d1127175f</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::BoolArgumentProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::BoolArgumentProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ad530047c3866901687cad573a8902a36</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CircuitConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::CircuitConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab8dbc8cdb17b07a5682228a84ca326a7</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CircuitCoveringConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::CircuitCoveringConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a65ba1bb90bf8b69684824af54ed34061</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::ConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::ConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a194b7268d38aea43cf720189f2c7d933</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CpModelProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::CpModelProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>aad6b5a46ab5d2233f555b7eaa7f9dc8b</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CpObjectiveProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::CpObjectiveProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>afbd10e0381bdcea8db6a4b8b1ddda5b4</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CpSolverResponse *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::CpSolverResponse &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>abdc2b7a036c638cad9b003b8e2ae38fb</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CumulativeConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::CumulativeConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a8c7246d8fad339bf133ecf5ce8b70e6f</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::DecisionStrategyProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::DecisionStrategyProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab396a7c48de804df389f1fde37cd4aed</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::DecisionStrategyProto_AffineTransformation *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::DecisionStrategyProto_AffineTransformation &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a8dafed95c6efbf6296753a9a90923388</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::ElementConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::ElementConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a4e0bfccb327b7e1ef475d48d813554ac</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerArgumentProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::IntegerArgumentProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ad1456edebbb93b07e4cb7b231c6d5d1c</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerVariableProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::IntegerVariableProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a8e446e46683177ee44ab293e2c35231b</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntervalConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::IntervalConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a23fd3de0c47884bbebb25116ece5c2d7</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::InverseConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::InverseConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a6fd2c00fa691e2d0a3ec45cf883dfdf5</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::LinearConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::LinearConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>abe77e6dc60fd9e0d5c696b1b55c2fccd</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::NoOverlap2DConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::NoOverlap2DConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab081583e505c7c4003cc7981f7bd354f</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::NoOverlapConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::NoOverlapConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>aa61f6fa8185bc8617023420148f33045</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::PartialVariableAssignment *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::PartialVariableAssignment &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a9605edce6c8d1b9f2b465ea3cf193e72</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::ReservoirConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::ReservoirConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>adb8db465df82459433570257339128c1</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::RoutesConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::RoutesConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ae061245ac4989a9fa86f211ccf1a94bb</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::TableConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::TableConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab58f5023a24725742e59513c8a5785e2</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9644b126f05b927a27fc7eba8e62dd57</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af66c861360ab3857d0bb2d53fde74bca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2262e194393851724b02211c34c57457</anchor>
      <arglist>(DecisionStrategyProto_VariableSelectionStrategy value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af25eeda8a253dce34e0b0e98f69031ad</anchor>
      <arglist>(const ::std::string &amp;name, DecisionStrategyProto_VariableSelectionStrategy *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af161ecb897e60ce83c87c17d11ae7d91</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a3bef95d750e0d2c4dcbf9944a6147232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a15661f91c1c5635b462c569097268773</anchor>
      <arglist>(DecisionStrategyProto_DomainReductionStrategy value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab65df8c02daf63542fcee35b0a9f7779</anchor>
      <arglist>(const ::std::string &amp;name, DecisionStrategyProto_DomainReductionStrategy *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CpSolverStatus_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8f7f7995f8e9a03c15cdddf39b675702</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>CpSolverStatus_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aef4cfe27470b9d29843e9394cb75f33a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>CpSolverStatus_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a168a8ab6018d96c83fbd0d0ee03e087c</anchor>
      <arglist>(CpSolverStatus value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CpSolverStatus_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a49458d152506001af5ad6ad1b7c8576e</anchor>
      <arglist>(const ::std::string &amp;name, CpSolverStatus *value)</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a932a088438a4a18cac0d84a50f9cef93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab7bf2119b197f54b7cfb237d392a3b31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::CpSolverStatus &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a61f6bf84c590e6ff99427d674d30cc9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>AllDifferentConstraintProtoDefaultTypeInternal</type>
      <name>_AllDifferentConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad5cadc3f160d3e34ef323536a36578ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AutomatonConstraintProtoDefaultTypeInternal</type>
      <name>_AutomatonConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a89e105e8d30d25c4c680294fe7d572c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoolArgumentProtoDefaultTypeInternal</type>
      <name>_BoolArgumentProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad05e4bcf8c4464c50e1f1b8af2b81ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CircuitConstraintProtoDefaultTypeInternal</type>
      <name>_CircuitConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a6a9352c8a15382c9206993a807ca1f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CircuitCoveringConstraintProtoDefaultTypeInternal</type>
      <name>_CircuitCoveringConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adc89524c8aab967f7d4a66bd3ec70bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstraintProtoDefaultTypeInternal</type>
      <name>_ConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a946e95ccf1a9faf8270238f5c5b301fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CpModelProtoDefaultTypeInternal</type>
      <name>_CpModelProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ace223c8e846b17ef993566562cec8dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CpObjectiveProtoDefaultTypeInternal</type>
      <name>_CpObjectiveProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>acfdc8eaa58fc4cf8b103821df60cd4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CpSolverResponseDefaultTypeInternal</type>
      <name>_CpSolverResponse_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a13b87f99bbea144cc07cdcd2095ab601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CumulativeConstraintProtoDefaultTypeInternal</type>
      <name>_CumulativeConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aac6a8bda3dfe9f06ab9e4b5d0273df53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DecisionStrategyProtoDefaultTypeInternal</type>
      <name>_DecisionStrategyProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a1d42bd587a5323aaf16295be1dfa1455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DecisionStrategyProto_AffineTransformationDefaultTypeInternal</type>
      <name>_DecisionStrategyProto_AffineTransformation_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad0110b5023e714ba7608ca6393a28aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ElementConstraintProtoDefaultTypeInternal</type>
      <name>_ElementConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a4ef77bd2a03378993af8582adc081ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IntegerArgumentProtoDefaultTypeInternal</type>
      <name>_IntegerArgumentProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a3dc76ede4b7ff0d2c5bd425c834e1a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IntegerVariableProtoDefaultTypeInternal</type>
      <name>_IntegerVariableProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a44161c9b8ede2f098f009c6980c489a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IntervalConstraintProtoDefaultTypeInternal</type>
      <name>_IntervalConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a4215dda19ecaf7d9b3437190df671cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InverseConstraintProtoDefaultTypeInternal</type>
      <name>_InverseConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a4903b3b9596898e507eadb8642d73b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearConstraintProtoDefaultTypeInternal</type>
      <name>_LinearConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a35f06e6b931d091b424f42c8db845273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NoOverlap2DConstraintProtoDefaultTypeInternal</type>
      <name>_NoOverlap2DConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>afc421996f32997364f39272a061499f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NoOverlapConstraintProtoDefaultTypeInternal</type>
      <name>_NoOverlapConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a75a5dfa26b4dc21981f4c6cc46ae9c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PartialVariableAssignmentDefaultTypeInternal</type>
      <name>_PartialVariableAssignment_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a5fe88249a924da9eac41aefea5ddabed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ReservoirConstraintProtoDefaultTypeInternal</type>
      <name>_ReservoirConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ac0865a57214595b3a38ceee49543b4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutesConstraintProtoDefaultTypeInternal</type>
      <name>_RoutesConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ae1bf1cf3f7f77485b9d4c7ab4d6894ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TableConstraintProtoDefaultTypeInternal</type>
      <name>_TableConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a1b5b8679bd9fed7c991d05c09cf01466</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DecisionStrategyProto_VariableSelectionStrategy</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_VariableSelectionStrategy_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a59941f8a574d610fbd0d2766daf437e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DecisionStrategyProto_VariableSelectionStrategy</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_VariableSelectionStrategy_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa936a57453c9681bab32e74a3747c5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_VariableSelectionStrategy_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a0fe139f7887fdce2f0d82ba7bfe3b761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DecisionStrategyProto_DomainReductionStrategy</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_DomainReductionStrategy_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8d89ba785675bf6374b216c6880cf89d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DecisionStrategyProto_DomainReductionStrategy</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_DomainReductionStrategy_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2446fab2d79c5ef3d9ab370d8be7519b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_DomainReductionStrategy_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a98b9900acdb468cd47a37be6ec6fecce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CpSolverStatus</type>
      <name>CpSolverStatus_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a39d6196edcd5c594db5524b4fd1a9cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CpSolverStatus</type>
      <name>CpSolverStatus_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad61de2d59ad12b07b65b1b2497542ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>CpSolverStatus_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9309f1a918471faabd064037b40b3a2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cp_model_solver.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/sat/</path>
    <filename>cp__model__solver_8h</filename>
    <includes id="cp__model_8pb_8h" name="cp_model.pb.h" local="yes" imported="no">ortools/sat/cp_model.pb.h</includes>
    <includes id="model_8h" name="model.h" local="yes" imported="no">ortools/sat/model.h</includes>
    <includes id="sat__parameters_8pb_8h" name="sat_parameters.pb.h" local="yes" imported="no">ortools/sat/sat_parameters.pb.h</includes>
    <namespace>operations_research</namespace>
    <namespace>operations_research::sat</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>CpModelStats</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a287579e5f181fc7c89feccf1128faffb</anchor>
      <arglist>(const CpModelProto &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>CpSolverResponseStats</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ac2d87e8109f9c60f7af84a60106abd57</anchor>
      <arglist>(const CpSolverResponse &amp;response)</arglist>
    </member>
    <member kind="function">
      <type>CpSolverResponse</type>
      <name>SolveCpModel</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9d67b9c66f1cb9c1dcc3415cd5af11bf</anchor>
      <arglist>(const CpModelProto &amp;model_proto, Model *model)</arglist>
    </member>
    <member kind="function">
      <type>CpSolverResponse</type>
      <name>Solve</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a09d851f944ab4f305c3d9f8df99b7bf8</anchor>
      <arglist>(const CpModelProto &amp;model_proto)</arglist>
    </member>
    <member kind="function">
      <type>CpSolverResponse</type>
      <name>SolveWithParameters</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa3062797aa0396abf37dbcc99a746f12</anchor>
      <arglist>(const CpModelProto &amp;model_proto, const SatParameters &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>CpSolverResponse</type>
      <name>SolveWithParameters</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af52c27ecb43d6486c1a70e022b4aad39</anchor>
      <arglist>(const CpModelProto &amp;model_proto, const std::string &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSynchronizationFunction</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad04337634227eac006d3e33a7028f82f</anchor>
      <arglist>(std::function&lt; CpSolverResponse()&gt; f, Model *model)</arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(Model *)&gt;</type>
      <name>NewFeasibleSolutionObserver</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aacf15d440f0db4cd0a63c8aebe85db6d</anchor>
      <arglist>(const std::function&lt; void(const CpSolverResponse &amp;response)&gt; &amp;observer)</arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; SatParameters(Model *)&gt;</type>
      <name>NewSatParameters</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10700832ca6bc420f2931eb707957b0b</anchor>
      <arglist>(const std::string &amp;params)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ebert_graph.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>ebert__graph_8h</filename>
    <class kind="class">operations_research::EbertGraph</class>
    <class kind="class">operations_research::ForwardEbertGraph</class>
    <class kind="class">operations_research::ForwardStaticGraph</class>
    <class kind="class">operations_research::StarGraphBase</class>
    <class kind="class">operations_research::StarGraphBase::NodeIterator</class>
    <class kind="class">operations_research::StarGraphBase::ArcIterator</class>
    <class kind="class">operations_research::StarGraphBase::OutgoingArcIterator</class>
    <class kind="class">operations_research::PermutationIndexComparisonByArcHead</class>
    <class kind="class">operations_research::ForwardStaticGraph</class>
    <class kind="class">operations_research::ForwardStaticGraph::CycleHandlerForAnnotatedArcs</class>
    <class kind="class">operations_research::EbertGraphBase</class>
    <class kind="class">operations_research::EbertGraphBase::CycleHandlerForAnnotatedArcs</class>
    <class kind="class">operations_research::EbertGraph</class>
    <class kind="class">operations_research::EbertGraph::OutgoingOrOppositeIncomingArcIterator</class>
    <class kind="class">operations_research::EbertGraph::IncomingArcIterator</class>
    <class kind="class">operations_research::ForwardEbertGraph</class>
    <class kind="struct">operations_research::graph_traits</class>
    <class kind="struct">operations_research::graph_traits&lt; ForwardEbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</class>
    <class kind="struct">operations_research::graph_traits&lt; ForwardStaticGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</class>
    <class kind="struct">operations_research::or_internal::TailArrayBuilder</class>
    <class kind="struct">operations_research::or_internal::TailArrayBuilder&lt; GraphType, false &gt;</class>
    <class kind="struct">operations_research::or_internal::TailArrayReleaser</class>
    <class kind="struct">operations_research::or_internal::TailArrayReleaser&lt; GraphType, false &gt;</class>
    <class kind="class">operations_research::TailArrayManager</class>
    <class kind="class">operations_research::ArcFunctorOrderingByTailAndHead</class>
    <class kind="class">operations_research::or_internal::GraphBuilderFromArcs</class>
    <class kind="class">operations_research::or_internal::GraphBuilderFromArcs&lt; GraphType, true &gt;</class>
    <class kind="class">operations_research::AnnotatedGraphBuildManager</class>
    <namespace>operations_research</namespace>
    <namespace>operations_research::or_internal</namespace>
    <member kind="typedef">
      <type>int32</type>
      <name>NodeIndex</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a0e629e35bfa311b31dd7f5065eb834bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32</type>
      <name>ArcIndex</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a31d858394c5eed1fa21edc3da47047c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64</type>
      <name>FlowQuantity</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5841ff601ab08548afb15c45b2245de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64</type>
      <name>CostValue</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa7950685633ee869aa9471b2ec5fbcfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EbertGraph&lt; NodeIndex, ArcIndex &gt;</type>
      <name>StarGraph</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae39f15b318a3cba17b1e60e6da51c0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ForwardEbertGraph&lt; NodeIndex, ArcIndex &gt;</type>
      <name>ForwardStarGraph</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a652af62fa5f211aa0c54d7994ca1c504</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ForwardStaticGraph&lt; NodeIndex, ArcIndex &gt;</type>
      <name>ForwardStarStaticGraph</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac7440a08c859325694df19d4d4aee95c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; NodeIndex &gt;</type>
      <name>NodeIndexArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a389e5320fb5bcd0fb99d894488f9820b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; ArcIndex &gt;</type>
      <name>ArcIndexArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa79bf252fa6483cd33cbf95170353fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; FlowQuantity &gt;</type>
      <name>QuantityArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7d4fc0319cb4e28ec175fc9163775a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; CostValue &gt;</type>
      <name>CostArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>afdee62ecefa0520e530c18a55b083e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildLineGraph</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>acb53c505b8fd29ceb3abdcc7dfd809ce</anchor>
      <arglist>(const GraphType &amp;graph, GraphType *const line_graph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eulerian_path.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>eulerian__path_8h</filename>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>bool</type>
      <name>IsEulerianGraph</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab1cf773de0cae72d0c44efe5b8f4bb89</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSemiEulerianGraph</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a6b312dd19c90b2af099e6f159869f7ee</anchor>
      <arglist>(const Graph &amp;graph, std::vector&lt; NodeIndex &gt; *odd_nodes)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; NodeIndex &gt;</type>
      <name>BuildEulerianPathFromNode</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a743d8c9d6f64531bdeb7bbf18023e9d4</anchor>
      <arglist>(const Graph &amp;graph, NodeIndex root)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; NodeIndex &gt;</type>
      <name>BuildEulerianTourFromNode</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa63055860fc53f8eed56d23d2571c180</anchor>
      <arglist>(const Graph &amp;graph, NodeIndex root)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; typename Graph::NodeIndex &gt;</type>
      <name>BuildEulerianTour</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a034666fe63ca105b735272974006362a</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; typename Graph::NodeIndex &gt;</type>
      <name>BuildEulerianPath</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a49b170b2d03863c465331e67b21f0c33</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>graph.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>graph_8h</filename>
    <includes id="iterators_8h" name="iterators.h" local="yes" imported="no">ortools/graph/iterators.h</includes>
    <class kind="class">util::SVector</class>
    <class kind="class">util::BaseGraph</class>
    <class kind="class">util::ListGraph</class>
    <class kind="class">util::StaticGraph</class>
    <class kind="class">util::ReverseArcListGraph</class>
    <class kind="class">util::ReverseArcStaticGraph</class>
    <class kind="class">util::ReverseArcMixedGraph</class>
    <class kind="class">util::SVector</class>
    <class kind="class">util::ListGraph::OutgoingArcIterator</class>
    <class kind="class">util::ListGraph::OutgoingHeadIterator</class>
    <class kind="class">util::StaticGraph::OutgoingArcIterator</class>
    <class kind="class">util::ReverseArcListGraph::OutgoingArcIterator</class>
    <class kind="class">util::ReverseArcListGraph::OppositeIncomingArcIterator</class>
    <class kind="class">util::ReverseArcListGraph::IncomingArcIterator</class>
    <class kind="class">util::ReverseArcListGraph::OutgoingOrOppositeIncomingArcIterator</class>
    <class kind="class">util::ReverseArcListGraph::OutgoingHeadIterator</class>
    <class kind="class">util::ReverseArcStaticGraph::OutgoingArcIterator</class>
    <class kind="class">util::ReverseArcStaticGraph::OppositeIncomingArcIterator</class>
    <class kind="class">util::ReverseArcStaticGraph::IncomingArcIterator</class>
    <class kind="class">util::ReverseArcStaticGraph::OutgoingOrOppositeIncomingArcIterator</class>
    <class kind="class">util::ReverseArcMixedGraph::OutgoingArcIterator</class>
    <class kind="class">util::ReverseArcMixedGraph::OppositeIncomingArcIterator</class>
    <class kind="class">util::ReverseArcMixedGraph::IncomingArcIterator</class>
    <class kind="class">util::ReverseArcMixedGraph::OutgoingOrOppositeIncomingArcIterator</class>
    <class kind="class">util::CompleteGraph</class>
    <class kind="class">util::CompleteBipartiteGraph</class>
    <class kind="class">util::CompleteBipartiteGraph::OutgoingArcIterator</class>
    <namespace>util</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>graph_8h.html</anchorfile>
      <anchor>a48a8a7aa004fc40d0d1d0ba63311cece</anchor>
      <arglist>(c, t, e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>graph_8h.html</anchorfile>
      <anchor>aa560f5e55268f818d5e5f43ed31e19a0</anchor>
      <arglist>(iterator_class_name)</arglist>
    </member>
    <member kind="typedef">
      <type>ListGraph</type>
      <name>Graph</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae76339cb2dcd3bc05ad762146f91fdda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PermuteWithExplicitElementType</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a9470623ca7db3c4a62ce3b326c6b07d8</anchor>
      <arglist>(const IntVector &amp;permutation, Array *array_to_permute, ElementType unused)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Permute</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a8c227a057c1ce9d46b1185abf77ad91e</anchor>
      <arglist>(const IntVector &amp;permutation, Array *array_to_permute)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Permute</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ac497881c4166bc694adc4bee62746118</anchor>
      <arglist>(const IntVector &amp;permutation, std::vector&lt; bool &gt; *array_to_permute)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a37be0131ae922e30a286797a0bef0c96</anchor>
      <arglist>(ListGraph, Outgoing, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>af3c40fc068f645d9dcd15c332e44fc25</anchor>
      <arglist>(StaticGraph, Outgoing, DirectArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a3098e161a6aceeca482be78d2d221b3b</anchor>
      <arglist>(ReverseArcListGraph, Outgoing, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a4d0ae05975a2063f2edbeb749f690fc7</anchor>
      <arglist>(ReverseArcListGraph, Incoming, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a22b5dcc01043ab8da01ebab71ec3ad31</anchor>
      <arglist>(ReverseArcListGraph, OutgoingOrOppositeIncoming, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a863ccdb51afb5ef92fe6c94188a5f7e0</anchor>
      <arglist>(ReverseArcListGraph, OppositeIncoming, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a2cc2a1037195d237820edc97d35404be</anchor>
      <arglist>(ReverseArcStaticGraph, Outgoing, DirectArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a2a51d676cd5d9354bfe1f80d09c44f39</anchor>
      <arglist>(ReverseArcStaticGraph, Incoming, ReverseArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a1db1a919e67261878ff8abda53e664c7</anchor>
      <arglist>(ReverseArcStaticGraph, OutgoingOrOppositeIncoming, DirectArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a1728675285eb75f9f18d6ed7c134d0b6</anchor>
      <arglist>(ReverseArcStaticGraph, OppositeIncoming, ReverseArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ab3308688d13e59e2351bef038ce1fdb0</anchor>
      <arglist>(ReverseArcMixedGraph, Outgoing, DirectArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a3c022b68f68916770fe09996df2f35a3</anchor>
      <arglist>(ReverseArcMixedGraph, Incoming, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a97910ddfce7560b406aa3f4939434eb8</anchor>
      <arglist>(ReverseArcMixedGraph, OutgoingOrOppositeIncoming, DirectArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a6ce1a67d16c75b202f56301321a457c6</anchor>
      <arglist>(ReverseArcMixedGraph, OppositeIncoming, Base::kNilArc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>graphs.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>graphs_8h</filename>
    <includes id="ebert__graph_8h" name="ebert_graph.h" local="yes" imported="no">ortools/graph/ebert_graph.h</includes>
    <class kind="struct">operations_research::Graphs</class>
    <class kind="struct">operations_research::Graphs&lt; operations_research::StarGraph &gt;</class>
    <namespace>operations_research</namespace>
  </compound>
  <compound kind="file">
    <name>hamiltonian_path.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>hamiltonian__path_8h</filename>
    <class kind="class">operations_research::ElementIterator</class>
    <class kind="class">operations_research::Set</class>
    <class kind="class">operations_research::SetRangeIterator</class>
    <class kind="class">operations_research::SetRangeWithCardinality</class>
    <class kind="class">operations_research::LatticeMemoryManager</class>
    <class kind="class">operations_research::HamiltonianPathSolver</class>
    <class kind="class">operations_research::PruningHamiltonianSolver</class>
    <namespace>operations_research</namespace>
    <member kind="typedef">
      <type>int</type>
      <name>PathNodeIndex</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a09767b3634289e432c3ce1d7c649666a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>HamiltonianPathSolver&lt; CostType, CostFunction &gt;</type>
      <name>MakeHamiltonianPathSolver</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a715b0dbb9f0903ab629b8c6da1b35b45</anchor>
      <arglist>(int num_nodes, CostFunction cost)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>io_8h</filename>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">ortools/graph/graph.h</includes>
    <namespace>util</namespace>
    <member kind="enumeration">
      <type></type>
      <name>GraphToStringFormat</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae705e1342dacc10a13fb3f11f91d0696</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_GRAPH_ARCS</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae705e1342dacc10a13fb3f11f91d0696acac9245da1bf36d1d9382dc579e1a4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_GRAPH_ADJACENCY_LISTS</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae705e1342dacc10a13fb3f11f91d0696aaed5759e3b6e3a8592c9a21e0048b565</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_GRAPH_ADJACENCY_LISTS_SORTED</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae705e1342dacc10a13fb3f11f91d0696a454bb1ede69e280a1e4959acb82748ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GraphToString</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>affed79554a202aaa8bda5b5e98c3a6b2</anchor>
      <arglist>(const Graph &amp;graph, GraphToStringFormat format)</arglist>
    </member>
    <member kind="function">
      <type>false</type>
      <name>ValueOrDie</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a86199e4832dd5c1d61baa53bfecb7b6d</anchor>
      <arglist>())</arglist>
    </member>
    <member kind="function">
      <type>*</type>
      <name>if</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a0a640b5d8a0ba7deaba9afbd4f3ca438</anchor>
      <arglist>(!error_or_graph.ok())</arglist>
    </member>
    <member kind="function">
      <type>***util::StatusOr&lt; Graph * &gt;</type>
      <name>ReadGraphFile</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a9c5c6763e52cd1465a3e1a3ab2437e37</anchor>
      <arglist>(const std::string &amp;filename, bool directed, std::vector&lt; int &gt; *num_nodes_with_color_or_null)</arglist>
    </member>
    <member kind="function">
      <type>util::Status</type>
      <name>WriteGraphToFile</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a6600986f328a49c9485aa03fb6c82946</anchor>
      <arglist>(const Graph &amp;graph, const std::string &amp;filename, bool directed, const std::vector&lt; int &gt; &amp;num_nodes_with_color)</arglist>
    </member>
    <member kind="function">
      <type>util::StatusOr&lt; Graph * &gt;</type>
      <name>ReadGraphFile</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>aeec5b66be4fd6b3021e6eb08b3045a0e</anchor>
      <arglist>(const std::string &amp;filename, bool directed, std::vector&lt; int &gt; *num_nodes_with_color_or_null)</arglist>
    </member>
    <member kind="variable">
      <type>***util::StatusOr&lt; MyGraph * &gt;</type>
      <name>error_or_graph</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a123e77d101e4aeb54a2b9e7d9612ad1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>else</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a99d2b83baf3f908e76fb2161b1c73322</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterators.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>iterators_8h</filename>
    <class kind="struct">MutableVectorIteration::Iterator</class>
    <namespace>util</namespace>
    <member kind="typedef">
      <type>typename std::iterator_traits&lt; Iterator &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>iterators_8h.html</anchorfile>
      <anchor>ae7f303a443fbf651b13f8289d05ef498</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BeginEndWrapper</name>
      <anchorfile>iterators_8h.html</anchorfile>
      <anchor>af3f6bc803bbe87af730cf9e41a35cf68</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>iterators_8h.html</anchorfile>
      <anchor>a09dd208593b9721a30a83ed978ede577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>iterators_8h.html</anchorfile>
      <anchor>a62469461ed7c932afba3808f4da0fe3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>iterators_8h.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>false</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>aadd7603ae6e78cc2490ca9710fbaf180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>*OutgoingArcIterator</type>
      <name>this</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>acc90f8dbcd326a450a7c781ea7a9539d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>**And a client will use it like</type>
      <name>this</name>
      <anchorfile>iterators_8h.html</anchorfile>
      <anchor>a83b9f519556accd1f067da73da5f0624</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>linear_assignment.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>linear__assignment_8h</filename>
    <includes id="ebert__graph_8h" name="ebert_graph.h" local="yes" imported="no">ortools/graph/ebert_graph.h</includes>
    <class kind="class">operations_research::LinearSumAssignment</class>
    <class kind="class">operations_research::LinearSumAssignment::BipartiteLeftNodeIterator</class>
    <class kind="class">operations_research::CostValueCycleHandler</class>
    <class kind="class">operations_research::ArcIndexOrderingByTailNode</class>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>linear__assignment_8h.html</anchorfile>
      <anchor>aeb1d0880abde13d03b5dc361d19d8cf3</anchor>
      <arglist>(assignment_alpha)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int32</name>
      <anchorfile>linear__assignment_8h.html</anchorfile>
      <anchor>a7e9c0b76beb761af447a08684cded9a7</anchor>
      <arglist>(assignment_progress_logging_period)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>linear__assignment_8h.html</anchorfile>
      <anchor>a9982454bded965321d3f3b7d5300b0dc</anchor>
      <arglist>(assignment_stack_order)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>linear_expr.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/linear_solver/</path>
    <filename>linear__expr_8h</filename>
    <class kind="class">operations_research::LinearExpr</class>
    <class kind="class">operations_research::LinearRange</class>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>LinearExpr</type>
      <name>operator+</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a97f9b83239285f5fdfcac1b8e8b4f162</anchor>
      <arglist>(LinearExpr lhs, const LinearExpr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr</type>
      <name>operator-</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a515cdaf4f9c4000bb3482a0c450e23c3</anchor>
      <arglist>(LinearExpr lhs, const LinearExpr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr</type>
      <name>operator *</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a741104fe08089fe3520676487f7a685d</anchor>
      <arglist>(LinearExpr lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr</type>
      <name>operator/</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abebdd7f40e90df8dc7d557b6e26da942</anchor>
      <arglist>(LinearExpr lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr</type>
      <name>operator *</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a99590470c6ad2d59331b6fcc56609877</anchor>
      <arglist>(double lhs, LinearExpr rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearRange</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a6d1fa20f9c9faf7027c0b16f97139e80</anchor>
      <arglist>(const LinearExpr &amp;lhs, const LinearExpr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearRange</type>
      <name>operator==</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a08146f196bd9c3f492ee108732449ced</anchor>
      <arglist>(const LinearExpr &amp;lhs, const LinearExpr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearRange</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac4052f92af6a7fbb1d45e17befcb68e0</anchor>
      <arglist>(const LinearExpr &amp;lhs, const LinearExpr &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>*LinearExpr</type>
      <name>e1</name>
      <anchorfile>linear__expr_8h.html</anchorfile>
      <anchor>a6cb9e1af7c42b3893aa112dd4de84f18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>linear_solver.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/linear_solver/</path>
    <filename>linear__solver_8h</filename>
    <includes id="linear__expr_8h" name="linear_expr.h" local="yes" imported="no">ortools/linear_solver/linear_expr.h</includes>
    <includes id="linear__solver_8pb_8h" name="linear_solver.pb.h" local="yes" imported="no">ortools/linear_solver/linear_solver.pb.h</includes>
  </compound>
  <compound kind="file">
    <name>linear_solver.pb.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/gen/ortools/linear_solver/</path>
    <filename>linear__solver_8pb_8h</filename>
    <class kind="struct">TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</class>
    <class kind="class">operations_research::MPVariableProto</class>
    <class kind="class">operations_research::MPConstraintProto</class>
    <class kind="class">operations_research::MPGeneralConstraintProto</class>
    <class kind="class">operations_research::MPIndicatorConstraint</class>
    <class kind="class">operations_research::PartialVariableAssignment</class>
    <class kind="class">operations_research::MPModelProto</class>
    <class kind="class">operations_research::OptionalDouble</class>
    <class kind="class">operations_research::MPSolverCommonParameters</class>
    <class kind="class">operations_research::MPModelRequest</class>
    <class kind="class">operations_research::MPSolutionResponse</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::MPSolverCommonParameters_LPAlgorithmValues &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::MPModelRequest_SolverType &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::MPSolverResponseStatus &gt;</class>
    <namespace>operations_research</namespace>
    <namespace>google</namespace>
    <namespace>google::protobuf</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROTOBUF_INTERNAL_EXPORT_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
      <anchorfile>linear__solver_8pb_8h.html</anchorfile>
      <anchor>a2ff46d5dc479b9be7968c15b3f932277</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MPSolverCommonParameters_LPAlgorithmValues</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab042145a1da0eaafbe215ded57dfe85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSolverCommonParameters_LPAlgorithmValues_LP_ALGO_UNSPECIFIED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab042145a1da0eaafbe215ded57dfe85fa2218d316cfcac5a88342c95b188f3fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSolverCommonParameters_LPAlgorithmValues_LP_ALGO_DUAL</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab042145a1da0eaafbe215ded57dfe85fa129c4c6d32bf9aed2414939cb02ff99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSolverCommonParameters_LPAlgorithmValues_LP_ALGO_PRIMAL</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab042145a1da0eaafbe215ded57dfe85fa53de34dc95fb67212e335f19dc210516</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSolverCommonParameters_LPAlgorithmValues_LP_ALGO_BARRIER</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab042145a1da0eaafbe215ded57dfe85fa89ff8ffa01928d5993a1414705eecd15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MPModelRequest_SolverType</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_GLOP_LINEAR_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a6fab373696058c6e9f279de4a8446411</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_CLP_LINEAR_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a0969851c637668f95c10ddb1ade866a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_GLPK_LINEAR_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5aa32d84461e16e800e3f996d6347a304d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_GUROBI_LINEAR_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a3af34f198d539e787263f9eded0ce0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_CPLEX_LINEAR_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a4bdeae4b1af8d2cd4aab225db4fc0407</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_SCIP_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5ac25c4844cbdf1e4d7c7efc11f1f8ebf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_GLPK_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5af60a0830addaf4cf00bc59459fa6647e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_CBC_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a0e93bcd472e7a9296ff02058ed60f8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_GUROBI_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5ac8beb7f7b026823a6bc2e4e87f546da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_CPLEX_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a26762918189367f5e171d0e226084d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_BOP_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a67639f2cd42e1197b5ad69a004c93ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_SAT_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5ac0fedb2082db5e7c96da01b4149c318e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_KNAPSACK_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5abe010aed8c1b29c5a0fd9ac262ce791f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MPSolverResponseStatus</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_OPTIMAL</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56ac95cb5be9e36b31647dd28910ac6cae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_FEASIBLE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56ac7d90afd0518be8cd6433ecad656a83b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_INFEASIBLE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56a0da2dbf49d011970a770d42141819d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_UNBOUNDED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56ad73de4a0f9908a4c0d11246ecccf32b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_ABNORMAL</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56ac77789af50586fb2f81915dd1cb790b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_NOT_SOLVED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56a667b6a5ed42c91ea81fa67c59cb3badb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_MODEL_IS_VALID</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56a97ee5aaa7f57f286d4a821dd6e57523f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_UNKNOWN_STATUS</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56a84ea2a63b24de389aac6aa33b1203cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_MODEL_INVALID</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56a6ae83516a798f1675e1b4daf0d8ea6b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_MODEL_INVALID_SOLUTION_HINT</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56a0f9da70b2f2b1304313c3a2a5f4876b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_MODEL_INVALID_SOLVER_PARAMETERS</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56ab90169f8480eca12c963af5ce50d36aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_SOLVER_TYPE_UNAVAILABLE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56afa008125099beaab382c42682be6bbf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDescriptors_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
      <anchorfile>linear__solver_8pb_8h.html</anchorfile>
      <anchor>a7f35194793812465687f4a16273cf830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a46426d4330f8798191f318e844342edd</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPGeneralConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPGeneralConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab2f9904d7bb5495c08a6624901891d05</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPIndicatorConstraint *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPIndicatorConstraint &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a09aec13b641f3ff6f0aaa054d9ffb01a</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPModelProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPModelProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a782374154dcade461d694c642d1a118a</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPModelRequest *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPModelRequest &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a218a8e8e9347626cd702a3a9c5e4276f</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPSolutionResponse *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPSolutionResponse &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a97bcf46029da44aea2acff25eeb8f5e5</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPSolverCommonParameters *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPSolverCommonParameters &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a3123875581158bdc0cef8cc7334204c3</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPVariableProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPVariableProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a5241f254a7dd0adf3d39675538cf578f</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalDouble *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::OptionalDouble &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a57c05b56ab566a13251384836a0ac42e</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::PartialVariableAssignment *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::PartialVariableAssignment &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a62287180108f55a9b20f78b37944b485</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab3ee5c7a9f799696432b082fd4835232</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a976efc8cb83ba6997aa984b3c106da17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a317f48b6b35697bf02ead22157c91c52</anchor>
      <arglist>(MPSolverCommonParameters_LPAlgorithmValues value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac2b888d39ca1974f8485911aa6434144</anchor>
      <arglist>(const ::std::string &amp;name, MPSolverCommonParameters_LPAlgorithmValues *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MPModelRequest_SolverType_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad26c438ab5f1b232d7eced80a2780ca0</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>MPModelRequest_SolverType_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa3fea38c7df3ab9583e34b82878e255c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>MPModelRequest_SolverType_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad1d017a27f2b89bb55910d1fceb31c64</anchor>
      <arglist>(MPModelRequest_SolverType value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MPModelRequest_SolverType_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a028ee3de18b0c41c98df4de7f38c3543</anchor>
      <arglist>(const ::std::string &amp;name, MPModelRequest_SolverType *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MPSolverResponseStatus_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7a295b0760db498bc4fa9479bb8c2329</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>MPSolverResponseStatus_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a472faf18ff58cd6640b7b3bf6336d9b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>MPSolverResponseStatus_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a1225873debe2bc2cb173d365f06ca615</anchor>
      <arglist>(MPSolverResponseStatus value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MPSolverResponseStatus_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a415f14aa6c054ed47d050bd15e725f52</anchor>
      <arglist>(const ::std::string &amp;name, MPSolverResponseStatus *value)</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::MPSolverCommonParameters_LPAlgorithmValues &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>acc185aeb57cb91a0ccac4b25007bdcf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::MPModelRequest_SolverType &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab68113b1eb7e078bbcbcec215cb1abff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::MPSolverResponseStatus &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a9f64efd8b0aaa41a3134261c9575ac01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>MPConstraintProtoDefaultTypeInternal</type>
      <name>_MPConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a11d06964c51cd718a2a5c620c3289f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPGeneralConstraintProtoDefaultTypeInternal</type>
      <name>_MPGeneralConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab18f88184af1e6b0197a98cf0485803f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPIndicatorConstraintDefaultTypeInternal</type>
      <name>_MPIndicatorConstraint_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a1fa4d06ad0beb392a3144747d83fcc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPModelProtoDefaultTypeInternal</type>
      <name>_MPModelProto_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa214723b84fc52d727efc5067df690e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPModelRequestDefaultTypeInternal</type>
      <name>_MPModelRequest_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5557bc052354d9b956a609d0698281d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPSolutionResponseDefaultTypeInternal</type>
      <name>_MPSolutionResponse_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a9c99a96a8b2fcf4ab6890a4717c92da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPSolverCommonParametersDefaultTypeInternal</type>
      <name>_MPSolverCommonParameters_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7ece0f2b42b6eaf443223377343e1966</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPVariableProtoDefaultTypeInternal</type>
      <name>_MPVariableProto_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>af3dce953fd737d51dcb003b93452b3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OptionalDoubleDefaultTypeInternal</type>
      <name>_OptionalDouble_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5fd6483b24c303a0fbf9ab49846d370c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PartialVariableAssignmentDefaultTypeInternal</type>
      <name>_PartialVariableAssignment_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac92dae0b80b47779fc1de1bf9e7df9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MPSolverCommonParameters_LPAlgorithmValues</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_LPAlgorithmValues_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a1e4803399c53b73b9ae985751803d01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MPSolverCommonParameters_LPAlgorithmValues</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_LPAlgorithmValues_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a35686dabc230ba01c79fb8fd0f457e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_LPAlgorithmValues_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5dc5431b0bd4640975c7f6502e8013d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MPModelRequest_SolverType</type>
      <name>MPModelRequest_SolverType_SolverType_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a33e0cbbffcf3c459144e44b3f00dc2bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MPModelRequest_SolverType</type>
      <name>MPModelRequest_SolverType_SolverType_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a955948242965463248545e1785583654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MPModelRequest_SolverType_SolverType_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae6eb74cbdb5037acc1fb265d11616274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MPSolverResponseStatus</type>
      <name>MPSolverResponseStatus_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aaf5325d95fb273624f43bf2741836834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MPSolverResponseStatus</type>
      <name>MPSolverResponseStatus_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a92f022bd33162332383c5f70e4821498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MPSolverResponseStatus_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a04af4e3a977e967ddd2f2db792ac2ad7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>max_flow.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>max__flow_8h</filename>
    <includes id="ebert__graph_8h" name="ebert_graph.h" local="yes" imported="no">ortools/graph/ebert_graph.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">ortools/graph/graph.h</includes>
    <class kind="class">operations_research::GenericMaxFlow</class>
    <class kind="class">operations_research::SimpleMaxFlow</class>
    <class kind="class">operations_research::PriorityQueueWithRestrictedPush</class>
    <class kind="class">operations_research::MaxFlowStatusClass</class>
    <class kind="class">operations_research::GenericMaxFlow</class>
    <class kind="class">operations_research::MaxFlow</class>
    <namespace>operations_research</namespace>
  </compound>
  <compound kind="file">
    <name>min_cost_flow.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>min__cost__flow_8h</filename>
    <includes id="ebert__graph_8h" name="ebert_graph.h" local="yes" imported="no">ortools/graph/ebert_graph.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">ortools/graph/graph.h</includes>
    <class kind="class">operations_research::GenericMinCostFlow</class>
    <class kind="class">operations_research::MinCostFlowBase</class>
    <class kind="class">operations_research::SimpleMinCostFlow</class>
    <class kind="class">operations_research::GenericMinCostFlow</class>
    <class kind="class">operations_research::MinCostFlow</class>
    <namespace>operations_research</namespace>
  </compound>
  <compound kind="file">
    <name>minimum_spanning_tree.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>minimum__spanning__tree_8h</filename>
    <includes id="connectivity_8h" name="connectivity.h" local="yes" imported="no">ortools/graph/connectivity.h</includes>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>std::vector&lt; typename Graph::ArcIndex &gt;</type>
      <name>BuildKruskalMinimumSpanningTreeFromSortedArcs</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a00ab79ee21ffd8dece0996e37f9faa7a</anchor>
      <arglist>(const Graph &amp;graph, const std::vector&lt; typename Graph::ArcIndex &gt; &amp;sorted_arcs)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; typename Graph::ArcIndex &gt;</type>
      <name>BuildKruskalMinimumSpanningTree</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa565a47a059ef32ef1aec39768e4ec98</anchor>
      <arglist>(const Graph &amp;graph, const ArcComparator &amp;arc_comparator)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; typename Graph::ArcIndex &gt;</type>
      <name>BuildPrimMinimumSpanningTree</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a33a2f4c26fd60cd0fa98257b571c974f</anchor>
      <arglist>(const Graph &amp;graph, const ArcValue &amp;arc_value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>model.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/sat/</path>
    <filename>model_8h</filename>
    <class kind="class">operations_research::sat::Model</class>
    <namespace>operations_research</namespace>
    <namespace>operations_research::sat</namespace>
  </compound>
  <compound kind="file">
    <name>model_exporter.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/linear_solver/</path>
    <filename>model__exporter_8h</filename>
    <includes id="linear__solver_8pb_8h" name="linear_solver.pb.h" local="yes" imported="no">ortools/linear_solver/linear_solver.pb.h</includes>
    <class kind="struct">operations_research::MPModelExportOptions</class>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>util::StatusOr&lt; std::string &gt;</type>
      <name>ExportModelAsLpFormat</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a689d3552f87e89456c0c9a43847c964a</anchor>
      <arglist>(const MPModelProto &amp;model, const MPModelExportOptions &amp;options=MPModelExportOptions())</arglist>
    </member>
    <member kind="function">
      <type>util::StatusOr&lt; std::string &gt;</type>
      <name>ExportModelAsMpsFormat</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef684073daca7460490db8d881f886e0</anchor>
      <arglist>(const MPModelProto &amp;model, const MPModelExportOptions &amp;options=MPModelExportOptions())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>model_exporter_swig_helper.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/linear_solver/</path>
    <filename>model__exporter__swig__helper_8h</filename>
    <includes id="linear__solver_8pb_8h" name="linear_solver.pb.h" local="yes" imported="no">ortools/linear_solver/linear_solver.pb.h</includes>
    <includes id="model__exporter_8h" name="model_exporter.h" local="yes" imported="no">ortools/linear_solver/model_exporter.h</includes>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>ExportModelAsLpFormatReturnString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4d319c19b685fe608fe013b573081351</anchor>
      <arglist>(const MPModelProto &amp;input_model, const MPModelExportOptions &amp;options=MPModelExportOptions())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ExportModelAsMpsFormatReturnString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a37abd61c0d982af79257814b6d3a733e</anchor>
      <arglist>(const MPModelProto &amp;input_model, const MPModelExportOptions &amp;options=MPModelExportOptions())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>model_validator.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/linear_solver/</path>
    <filename>model__validator_8h</filename>
    <includes id="linear__solver_8pb_8h" name="linear_solver.pb.h" local="yes" imported="no">ortools/linear_solver/linear_solver.pb.h</includes>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>FindErrorInMPModelProto</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7a27bb74d09b7ba6ea0e97bb572d2755</anchor>
      <arglist>(const MPModelProto &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>FindFeasibilityErrorInSolutionHint</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae4ee4d82cf625670cdc1f52197454654</anchor>
      <arglist>(const MPModelProto &amp;model, double tolerance)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>one_tree_lower_bound.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>one__tree__lower__bound_8h</filename>
    <includes id="christofides_8h" name="christofides.h" local="yes" imported="no">ortools/graph/christofides.h</includes>
    <includes id="minimum__spanning__tree_8h" name="minimum_spanning_tree.h" local="yes" imported="no">ortools/graph/minimum_spanning_tree.h</includes>
    <member kind="function">
      <type>trees with all degrees equal w the current value of int</type>
      <name>step1_</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>adba1a0c02ca6636f5610de2337f3f697</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>trees with all degrees equal w the current value of int</type>
      <name>iteration_</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>a6e4c1555a52b411d0e25bae82066dcc4</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>trees with all degrees equal w the current value of int</type>
      <name>max_iterations_</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>ad15ce7e24cde3d28bc88c4a32bf3a834</anchor>
      <arglist>(max_iterations &gt; 0 ? max_iterations :MaxIterations(number_of_nodes))</arglist>
    </member>
    <member kind="function">
      <type>trees with all degrees equal w the current value of int</type>
      <name>number_of_nodes_</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>a01198f1b6b698fc8c033ef878977c27d</anchor>
      <arglist>(number_of_nodes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Next</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>a3947d19ac087ef2cd68c2409920339c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetStep</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>a61aed6a943277e531b904cfdc3616890</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnOneTree</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>a33c2c5b8d838c77c2701a538f7f30ae4</anchor>
      <arglist>(CostType one_tree_cost, double w, const std::vector&lt; int &gt; &amp;degrees)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnNewWMax</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>a2ad04ff9537d97fcabc58c86183890c3</anchor>
      <arglist>(CostType one_tree_cost)</arglist>
    </member>
    <member kind="variable">
      <type>trees with all degrees equal</type>
      <name>to</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>a717d5dae07519577a5ed09ac24a4708b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>trees with all degrees equal</type>
      <name>therefore</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>a6f353d8684dff1645f1601cd68b9a0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>trees with all degrees equal w the current value of</type>
      <name>w</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>a095b3978da7ad09782c0be1a6572e352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>trees with all degrees equal w the current value of</type>
      <name>degrees</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>af86d4c4e6a18908cda194651a9ab7beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>trees with all degrees equal w the current value of int</type>
      <name>max_iterations</name>
      <anchorfile>one__tree__lower__bound_8h.html</anchorfile>
      <anchor>af85cb5d69bd041414717718f6a833325</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing_8h</filename>
    <includes id="constraint__solver_8h" name="constraint_solver.h" local="yes" imported="no">ortools/constraint_solver/constraint_solver.h</includes>
    <includes id="constraint__solveri_8h" name="constraint_solveri.h" local="yes" imported="no">ortools/constraint_solver/constraint_solveri.h</includes>
    <includes id="routing__index__manager_8h" name="routing_index_manager.h" local="yes" imported="no">ortools/constraint_solver/routing_index_manager.h</includes>
    <includes id="routing__parameters_8pb_8h" name="routing_parameters.pb.h" local="yes" imported="no">ortools/constraint_solver/routing_parameters.pb.h</includes>
    <includes id="routing__types_8h" name="routing_types.h" local="yes" imported="no">ortools/constraint_solver/routing_types.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">ortools/graph/graph.h</includes>
    <includes id="sorted__interval__list_8h" name="sorted_interval_list.h" local="yes" imported="no">ortools/util/sorted_interval_list.h</includes>
    <class kind="struct">DisjunctivePropagator::Tasks</class>
    <class kind="struct">TypeRegulationsChecker::NodeCount</class>
    <class kind="struct">SimpleBoundCosts::BoundCost</class>
    <class kind="struct">RoutingDimension::NodePrecedence</class>
    <class kind="struct">CheapestInsertionFilteredDecisionBuilder::StartEndValue</class>
    <class kind="struct">SavingsFilteredDecisionBuilder::SavingsParameters</class>
    <class kind="class">SavingsFilteredDecisionBuilder::SavingsContainer</class>
    <class kind="struct">SavingsFilteredDecisionBuilder::VehicleClassEntry</class>
    <member kind="define">
      <type>#define</type>
      <name>OR_TOOLS_CONSTRAINT_SOLVER_ROUTING_H_</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>af52b05a44d013985efe92bec167e0bd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; std::vector&lt; operations_research::IntVar * &gt;(RoutingModel *)&gt;</type>
      <name>GetTabuVarsCallback</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a0e106a97f0156868f1d1c741b283793e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>routing_no_lns(default:false) int</type>
      <name>GetVisitType</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a874eb2862dd884ad47e30746e03627f5</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseVisitTypes</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a822458cc9a9a6fa02e86af3e3a1e5c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfVisitTypes</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a24478803a7138d68852093b9c2743892</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddHardTypeIncompatibility</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a796b4eed03ed53bbbaed642f4ae94952</anchor>
      <arglist>(int type1, int type2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddTemporalTypeIncompatibility</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a7086a908f1890a7e1550c97b774e6384</anchor>
      <arglist>(int type1, int type2)</arglist>
    </member>
    <member kind="function">
      <type>const absl::flat_hash_set&lt; int &gt; &amp;</type>
      <name>GetHardTypeIncompatibilitiesOfType</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a51fb0661acf38ed1442819e2cc452311</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function">
      <type>const absl::flat_hash_set&lt; int &gt; &amp;</type>
      <name>GetTemporalTypeIncompatibilitiesOfType</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a9d8ead500db4128d0d27f8066d1f8208</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasHardTypeIncompatibilities</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a9c58894df747f5498c335a3a8c5c0c88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasTemporalTypeIncompatibilities</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ad19492313b68e5a963af3793aaec8d90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSameVehicleRequiredTypeAlternatives</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ac22e9cfd1fbf1b4af4f8a9be46ec88a1</anchor>
      <arglist>(int dependent_type, absl::flat_hash_set&lt; int &gt; required_type_alternatives)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddTemporalRequiredTypeAlternatives</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a92ee209f167d3974329301d784010b63</anchor>
      <arglist>(int dependent_type, absl::flat_hash_set&lt; int &gt; required_type_alternatives)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; absl::flat_hash_set&lt; int &gt; &gt; &amp;</type>
      <name>GetSameVehicleRequiredTypeAlternativesOfType</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ae350d70cb713a6772283e3753f4f2f7a</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; absl::flat_hash_set&lt; int &gt; &gt; &amp;</type>
      <name>GetTemporalRequiredTypeAlternativesOfType</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ab1652af55e9d83490d9c59d35d991ce9</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSameVehicleTypeRequirements</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>abc101a64a3c876dcdf1b7176d59bd2c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasTemporalTypeRequirements</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a5e3f4c6871f7b2c67fd5b1ad6c94d891</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasTypeRegulations</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ab313d84a56c5e9b1b8f28da70b8d4045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>UnperformedPenalty</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a3600327c657a0c83430d7bd9566e9ab6</anchor>
      <arglist>(int64 var_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>UnperformedPenaltyOrValue</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ae8364b53d49a5b46e994d41124c4ffd6</anchor>
      <arglist>(int64 default_value, int64 var_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetDepot</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>acca75b5d3bfe2433c5805b049815f533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcCostEvaluatorOfAllVehicles</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ab8d61705aa4291d2cd437ba0a7dfccbf</anchor>
      <arglist>(int evaluator_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcCostEvaluatorOfVehicle</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ae75d9f49c157b7784fc8baa7d623ee35</anchor>
      <arglist>(int evaluator_index, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedCostOfAllVehicles</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a07b796e9f91ee5b4c5e99c7f23e2f743</anchor>
      <arglist>(int64 cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedCostOfVehicle</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a4e8f5b5f090cf084347eda6eb803813a</anchor>
      <arglist>(int64 cost, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetFixedCostOfVehicle</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a4bab641f5b9bf8de266adad29558b4c2</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>quadratic_cost_factor_of_vehicle_ *[v] square of length of route v void</type>
      <name>SetAmortizedCostFactorsOfAllVehicles</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aa3d92ac74ce8d3e57551677e88e2c846</anchor>
      <arglist>(int64 linear_cost_factor, int64 quadratic_cost_factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAmortizedCostFactorsOfVehicle</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ae1acdfe3dcf892d108d2a2ecab94e936</anchor>
      <arglist>(int64 linear_cost_factor, int64 quadratic_cost_factor, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>GetAmortizedLinearCostFactorOfVehicles</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aa01519be299cb5ddef36111ee6f8a5cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>GetAmortizedQuadraticCostFactorOfVehicles</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aaeaf95383c1c03da6f22c522d119775b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConsiderEmptyRouteCostsForVehicle</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a7ccaa3133378da76d3fd5cdb560038ae</anchor>
      <arglist>(bool consider_costs, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreEmptyRouteCostsConsideredForVehicle</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aed6760664a6e4f3427832ee3b7ba0602</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>const Solver::IndexEvaluator2 &amp;</type>
      <name>first_solution_evaluator</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a660cb5477a6d3fbf146657aa7af73968</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFirstSolutionEvaluator</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ab69145472d51d341f82d3ad29e9c6be2</anchor>
      <arglist>(Solver::IndexEvaluator2 evaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddLocalSearchOperator</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a1156fa8214dba09e2a2a94862244aa1f</anchor>
      <arglist>(LocalSearchOperator *ls_operator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSearchMonitor</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a0e23be986e4c3b96a50c8798aa5f536d</anchor>
      <arglist>(SearchMonitor *const monitor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAtSolutionCallback</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a086605d9650ce3c576d8a9c45ce0b9fc</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVariableMinimizedByFinalizer</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a4768ba91c34c542eddec212a68d79473</anchor>
      <arglist>(IntVar *var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVariableMaximizedByFinalizer</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aabdcf3bd412a5a61d811ef85e115e5ff</anchor>
      <arglist>(IntVar *var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseModel</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>add71470f4175a0859e6e3d69c2a53988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseModelWithParameters</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aa79f8d482de4dd0ef86a1b54999686af</anchor>
      <arglist>(const RoutingSearchParameters &amp;search_parameters)</arglist>
    </member>
    <member kind="function">
      <type>const Assignment *</type>
      <name>Solve</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a562e4c0a80f7f4eda9573a482af288d1</anchor>
      <arglist>(const Assignment *assignment=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const Assignment *</type>
      <name>SolveWithParameters</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>af4e97be54c31d45d312d168ce1c8ba6f</anchor>
      <arglist>(const RoutingSearchParameters &amp;search_parameters, std::vector&lt; const Assignment * &gt; *solutions=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const Assignment *</type>
      <name>SolveFromAssignmentWithParameters</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a56e06d63a6d3792ab5cd64e51724632b</anchor>
      <arglist>(const Assignment *assignment, const RoutingSearchParameters &amp;search_parameters, std::vector&lt; const Assignment * &gt; *solutions=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAssignmentFromOtherModelAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ac1a2ab630f6b13644ca6853c7893f413</anchor>
      <arglist>(Assignment *target_assignment, const RoutingModel *source_model, const Assignment *source_assignment)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>ComputeLowerBound</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ae9b2404a26ab1e6acf562b8261eeba38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>status</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>adb1490a44086db009cdb51f854a02a65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>ApplyLocks</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aaf71584ad4bffea7a489dc53787fa6f8</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;locks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyLocksToAllVehicles</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a410f7da30cf944b7874eebe57eebe41a</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; int64 &gt;&gt; &amp;locks, bool close_routes)</arglist>
    </member>
    <member kind="function">
      <type>const Assignment *const</type>
      <name>PreAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ae033bc458ffce1ecc4874f3e212896f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>MutablePreAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a3af1158b77552d60afc3f0473de3892d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>acfcef421e8c8cd243157543f741d6a73</anchor>
      <arglist>(const std::string &amp;file_name) const</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>ReadAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a74e3de2ce73322e1860be0713c07c33e</anchor>
      <arglist>(const std::string &amp;file_name)</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>RestoreAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a566ddf59563c1b37e8c178b1805aa0f4</anchor>
      <arglist>(const Assignment &amp;solution)</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>ReadAssignmentFromRoutes</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a97dca877bb5083a72c147628a8439770</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; int64 &gt;&gt; &amp;routes, bool ignore_inactive_indices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RoutesToAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a78f7f1cb8b08b7ec1d477a14447bd8d4</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; int64 &gt;&gt; &amp;routes, bool ignore_inactive_indices, bool close_routes, Assignment *const assignment) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignmentToRoutes</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a97d152b7049084186342b719eee6fa15</anchor>
      <arglist>(const Assignment &amp;assignment, std::vector&lt; std::vector&lt; int64 &gt;&gt; *const routes) const</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>CompactAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a1b7f20d14ae5261cb2f250c6e99f4383</anchor>
      <arglist>(const Assignment &amp;assignment) const</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>CompactAndCheckAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a3e87a7710617f6ac19dca14adad9c5a6</anchor>
      <arglist>(const Assignment &amp;assignment) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a437ae499bef0aa64f2753166a000f5bd</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIntervalToAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ab878a81ace850e3ecd26e95966409f61</anchor>
      <arglist>(IntervalVar *const interval)</arglist>
    </member>
    <member kind="function">
      <type>const Assignment *</type>
      <name>PackCumulsOfOptimizerDimensionsFromAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a5cc6e6b421a6dfc8650cc38e116fff03</anchor>
      <arglist>(const Assignment *original_assignment, absl::Duration duration_limit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSweepArranger</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a700982f228080c6278eb5a2f7f06f31d</anchor>
      <arglist>(SweepArranger *sweep_arranger)</arglist>
    </member>
    <member kind="function">
      <type>SweepArranger *</type>
      <name>sweep_arranger</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a71815ec83f6605bddb11578ebb835aae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddLocalSearchFilter</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a566384949e6395952f6f6b48603fd87f</anchor>
      <arglist>(LocalSearchFilter *filter)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Start</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>acbdbdfc9491ef0586459d38cc5ef4cb8</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>End</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a1dc8d32892f78532c8ee7a7186158e07</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStart</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ae1adbc353c105572655ae866124c61b6</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnd</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ae2530e17cabaf267e12929ca0ee1bee0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VehicleIndex</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>abd33c037942b971eeefad43c6022c20e</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a46a69d9769aa92122c7e5e20f49e3da3</anchor>
      <arglist>(const Assignment &amp;assignment, int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsVehicleUsed</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aedb8dca94b15e5465fef1667d1a81db6</anchor>
      <arglist>(const Assignment &amp;assignment, int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>Nexts</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aad154b31953d2b467bbac3e4ac696cd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>VehicleVars</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a80572a238b48c2cefe38409e7544f161</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>NextVar</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a66fb44c05f9875685e9c332fbdfb643b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>ActiveVar</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>afadc1348f0318e9bc8cebb75b2fc4234</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>VehicleCostsConsideredVar</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a7c2d33eef73401442fd9f2e205056c73</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>VehicleVar</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a8cded3d3d6746c179a8ec0eddad24342</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>CostVar</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>abcbe77312783c0a5aa4926ace764533b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetArcCostForVehicle</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a50dd6fccc1cca84aa10efc8f3ece396c</anchor>
      <arglist>(int64 from_index, int64 to_index, int64 vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CostsAreHomogeneousAcrossVehicles</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ae0c21c6d4e99cb309b8b298d280e4853</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetHomogeneousCost</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aa241abc19460575d250a5788f03afbf6</anchor>
      <arglist>(int64 from_index, int64 to_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetArcCostForFirstSolution</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a6569b0ea25fa25c91c2b8b63bedeacc6</anchor>
      <arglist>(int64 from_index, int64 to_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetArcCostForClass</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a92d7882c311f7d9d0c55c4def34150dd</anchor>
      <arglist>(int64 from_index, int64 to_index, int64 cost_class_index) const</arglist>
    </member>
    <member kind="function">
      <type>CostClassIndex</type>
      <name>GetCostClassIndexOfVehicle</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a32bba655accbd7dc8e23d30bf679b880</anchor>
      <arglist>(int64 vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasVehicleWithCostClassIndex</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a67e8d10adbcc563f428069f9b2c04b63</anchor>
      <arglist>(CostClassIndex cost_class_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCostClassesCount</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ad3b144985c2b4b24cf39b839dbd9c16d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNonZeroCostClassesCount</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>abaa74f74aefe075aedb6b16259a4404e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VehicleClassIndex</type>
      <name>GetVehicleClassIndexOfVehicle</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a7a8e134df97e40d1fc498f7f985c33ec</anchor>
      <arglist>(int64 vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetVehicleClassesCount</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a34ab0d5fa45360b5e6a42b9a78cfe5a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>GetSameVehicleIndicesOfIndex</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a0f8c7a97b5465ae4ba4cb1a92c39b756</anchor>
      <arglist>(int node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ArcIsMoreConstrainedThanArc</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a1048b3f7ef92f0d7747f93c8586ea1cc</anchor>
      <arglist>(int64 from, int64 to1, int64 to2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugOutputAssignment</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a25d079aaf52ffdf6d547384b523ff018</anchor>
      <arglist>(const Assignment &amp;solution_assignment, const std::string &amp;dimension_to_print) const</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a5f32c22c620c811754ba7b6f977db864</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckLimit</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a3f5d70fe48cb54cbc5d8f6bba55b007d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>absl::Duration</type>
      <name>RemainingTime</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>adb0524e488894fa8f88764c74abb31f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodes</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a0f38add802397fef1f57b7d90ccd5aef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vehicles</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aa9e7ba89833775f29889744fe9480d29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Size</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a354dd8c252cf59b748602b342db6019d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetNumberOfDecisionsInFirstSolution</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a04bd106a61d493872cabb0f41f7f118f</anchor>
      <arglist>(const RoutingSearchParameters &amp;search_parameters) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetNumberOfRejectsInFirstSolution</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aefff345740a5db07caea065ec14ec52f</anchor>
      <arglist>(const RoutingSearchParameters &amp;search_parameters) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMatchingModel</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>ac8347e84488d1b5eb7b5e6972fb32be3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTabuVarsCallback</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a7e2d405cde11bc4a08d752d0e669912c</anchor>
      <arglist>(GetTabuVarsCallback tabu_var_callback)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeGuidedSlackFinalizer</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a20d0a3f5cec2e425c86f358e5f06b4a8</anchor>
      <arglist>(const RoutingDimension *dimension, std::function&lt; int64(int64)&gt; initializer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; LocalSearchOperator &gt;</type>
      <name>MakeGreedyDescentLSOperator</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>aa1c45751ee316e0948ba32494262f006</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; variables)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSelfDependentDimensionFinalizer</name>
      <anchorfile>routing_8h.html</anchorfile>
      <anchor>a56c3abe7b321f4caf06a0a5e72586cac</anchor>
      <arglist>(const RoutingDimension *dimension)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing_enums.pb.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/gen/ortools/constraint_solver/</path>
    <filename>routing__enums_8pb_8h</filename>
    <class kind="struct">TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto</class>
    <class kind="class">operations_research::FirstSolutionStrategy</class>
    <class kind="class">operations_research::LocalSearchMetaheuristic</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::FirstSolutionStrategy_Value &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::LocalSearchMetaheuristic_Value &gt;</class>
    <namespace>operations_research</namespace>
    <namespace>google</namespace>
    <namespace>google::protobuf</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROTOBUF_INTERNAL_EXPORT_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto</name>
      <anchorfile>routing__enums_8pb_8h.html</anchorfile>
      <anchor>ab99f705eeba00bba1fbe3cbd06567188</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FirstSolutionStrategy_Value</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_UNSET</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362cad02e019c28342793688466400afd032d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_AUTOMATIC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca6c8e1e7a2859125316fe07082a2da868</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_PATH_CHEAPEST_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca4c1d8ec510011789f52267efc7d34bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_PATH_MOST_CONSTRAINED_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362cae133e7145564aa475a81741a6240e901</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_EVALUATOR_STRATEGY</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca6d0f4bf298a2b6e6462feb7035d2c5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_SAVINGS</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca2acc1235ef1e7bec84c9a60b010400b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_SWEEP</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca83fd39655867e51be481faa09fbea164</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_CHRISTOFIDES</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca8a09bb6c57bf531f6674ea171b011791</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_ALL_UNPERFORMED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca0c4ad672038428a0f3b3b7f6c92d8840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_BEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362cad0735ef20259782cea2046f90c39bda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_PARALLEL_CHEAPEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362cabba644bd336acdb33aef7257f5bfa536</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_SEQUENTIAL_CHEAPEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca8580f408e6e4af5373e4dd081d59d767</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_LOCAL_CHEAPEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca348e92318608b985248e17102d016cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_GLOBAL_CHEAPEST_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca9a63d38a1eed11971089af926145f83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_LOCAL_CHEAPEST_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca451e468bc86902552aa9b987f66f5875</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_FIRST_UNBOUND_MIN_VALUE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca9c097f678b4aaaa6b10df89dc4d4802e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_FirstSolutionStrategy_Value_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca8cdfd32facff4a66e180fab80f3fb711</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_FirstSolutionStrategy_Value_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362cae584dc12821c9b7171986c986b6c7462</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LocalSearchMetaheuristic_Value</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_UNSET</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77ab1177884bf5c3fda2cac819cca8279ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_AUTOMATIC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a883a6e25cd8984a9e4e06636823f7201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_GREEDY_DESCENT</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a844fc936bb493f6a5d592b28302ea2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_GUIDED_LOCAL_SEARCH</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a2909a10cd525473780b35aaa3c4f4eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_SIMULATED_ANNEALING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a0d373c31dbec1678db8b9e50ae63327f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_TABU_SEARCH</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a63e13a565cf5daf981c1b565912b3b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_GENERIC_TABU_SEARCH</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a300fe37f649b909a810935825778b77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_LocalSearchMetaheuristic_Value_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a0783003ef2622becdab73be7bfb66e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_LocalSearchMetaheuristic_Value_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a719d13ec837e44b8b25b0f3315346594</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDescriptors_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto</name>
      <anchorfile>routing__enums_8pb_8h.html</anchorfile>
      <anchor>afe156995beacc2afec599ab709faca04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::FirstSolutionStrategy *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::FirstSolutionStrategy &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a46a0573ef15e8d450a94645726e4a115</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::LocalSearchMetaheuristic *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::LocalSearchMetaheuristic &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a46ac56c90da4ab9e7c9d2cbe996a6889</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FirstSolutionStrategy_Value_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac8fb428ce4826abddd79ff391cfc1c51</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>FirstSolutionStrategy_Value_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3c3c2af7d77d5e7f76f9a3d8fb1edf0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>FirstSolutionStrategy_Value_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aaed24a4c7f867bbe1173faf422387c57</anchor>
      <arglist>(FirstSolutionStrategy_Value value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FirstSolutionStrategy_Value_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad1acf7e4aff76fb0cc1659d91bdb5a62</anchor>
      <arglist>(const ::std::string &amp;name, FirstSolutionStrategy_Value *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LocalSearchMetaheuristic_Value_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aed46fa1bbfbc75c04bd66f5055ddb3c1</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>LocalSearchMetaheuristic_Value_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5142d10acce3d076acf89506752dba5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>LocalSearchMetaheuristic_Value_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ade04d594c17cc2436976da614fa0a2f7</anchor>
      <arglist>(LocalSearchMetaheuristic_Value value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LocalSearchMetaheuristic_Value_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a8e7c14051a98f40a1782646965401ca7</anchor>
      <arglist>(const ::std::string &amp;name, LocalSearchMetaheuristic_Value *value)</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::FirstSolutionStrategy_Value &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a34bc82f8ac3dc7b49fdfc02cd399fcfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::LocalSearchMetaheuristic_Value &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>afdc886b972e845de58089a1f0fd7b61a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>FirstSolutionStrategyDefaultTypeInternal</type>
      <name>_FirstSolutionStrategy_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a88484804c6e66958d00fb3f1b0821b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LocalSearchMetaheuristicDefaultTypeInternal</type>
      <name>_LocalSearchMetaheuristic_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5e179c1aa71c3f208d4dfbd8a27bfdc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FirstSolutionStrategy_Value</type>
      <name>FirstSolutionStrategy_Value_Value_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a9aec91f2a6b9e10f98ded28a1df2925b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FirstSolutionStrategy_Value</type>
      <name>FirstSolutionStrategy_Value_Value_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a999203a7a00dc983c437624201cdbce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>FirstSolutionStrategy_Value_Value_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a9e8e1305d7b00c52172281a44baad6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LocalSearchMetaheuristic_Value</type>
      <name>LocalSearchMetaheuristic_Value_Value_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3713cc7fe59ec4df14e26ac0310cf0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LocalSearchMetaheuristic_Value</type>
      <name>LocalSearchMetaheuristic_Value_Value_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a86aef277165b7aacec371daebe466690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>LocalSearchMetaheuristic_Value_Value_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4fd8517c34ce555a83981c8cc3a00d3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing_flags.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing__flags_8h</filename>
    <includes id="routing__parameters_8pb_8h" name="routing_parameters.pb.h" local="yes" imported="no">ortools/constraint_solver/routing_parameters.pb.h</includes>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a3416505b31156eb123c7fe044ca301ff</anchor>
      <arglist>(routing_no_lns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a5a7014ba820155fca2b46772cc653f69</anchor>
      <arglist>(routing_no_fullpathlns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a09baada5e27307e4b579af9ea6778f7a</anchor>
      <arglist>(routing_no_relocate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>ac8cbfccb3e8d62cd3deafb1706db620c</anchor>
      <arglist>(routing_no_relocate_neighbors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a020dd19890638972a02c79b788d707df</anchor>
      <arglist>(routing_no_relocate_subtrip)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a37169d7a229a662b3c06bedfd64995a2</anchor>
      <arglist>(routing_no_exchange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a10d847949a4fec4762cc4fd87a3d13af</anchor>
      <arglist>(routing_no_exchange_subtrip)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a59d83a01bb9322b8dc72615050476ae9</anchor>
      <arglist>(routing_no_cross)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a3dc6962972228d5ce6067b9088138ee2</anchor>
      <arglist>(routing_no_2opt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a48e5ee1a077cd7f29bea07c2d51b68b5</anchor>
      <arglist>(routing_no_oropt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>aba27d4acb939d01dd3557a89defdfa89</anchor>
      <arglist>(routing_no_make_active)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a125960ed8e8ff7f4e09598527124c8fb</anchor>
      <arglist>(routing_no_lkh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>aeb59d6e13f3c429dd380178498417a50</anchor>
      <arglist>(routing_no_relocate_expensive_chain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a7bd2608be63ffd780a7733c092306372</anchor>
      <arglist>(routing_no_tsp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a1eab49dc667e9f72cbca34dcd328d776</anchor>
      <arglist>(routing_no_tsplns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>ae28598119cf24ae8bfc651ba7cc86ce4</anchor>
      <arglist>(routing_use_chain_make_inactive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a4e72d42c139a639cac1ffe4e7f845769</anchor>
      <arglist>(routing_use_extended_swap_active)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>acdb6d5ff34d3d970c44885a8ca07869b</anchor>
      <arglist>(routing_guided_local_search)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>aaf96533028f0c52c8148b551c7802009</anchor>
      <arglist>(routing_guided_local_search_lambda_coefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a73e88a9f0cb6cf64ca0c7a12db9a221d</anchor>
      <arglist>(routing_simulated_annealing)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a66d0ece2c9b49c9415107a5794667792</anchor>
      <arglist>(routing_tabu_search)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>aeb38a57037b1e9132c03733dbba265d8</anchor>
      <arglist>(routing_generic_tabu_search)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>ac088c88799f5e70878fc77861dead99c</anchor>
      <arglist>(routing_solution_limit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>aa8ee0757a04bdad93b86bccd0d032a5d</anchor>
      <arglist>(routing_time_limit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>ac7f6724dfc2c9e12e3a2e3fabde77d37</anchor>
      <arglist>(routing_lns_time_limit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_string</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>af03d19fcf75b266ff9c2f3bc4299954b</anchor>
      <arglist>(routing_first_solution)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>af7817771f35d51878aabad8b82218fef</anchor>
      <arglist>(routing_use_filtered_first_solutions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>acaf0064d0a157ab57f0dd76c86a77b2b</anchor>
      <arglist>(savings_neighbors_ratio)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a74c267c61bc622a290d4d4932f881234</anchor>
      <arglist>(savings_add_reverse_arcs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a0b5b747647513d9d068be3c862d32dc5</anchor>
      <arglist>(savings_arc_coefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a4eff6a6609b6eb3a70415c252345d81f</anchor>
      <arglist>(cheapest_insertion_farthest_seeds_ratio)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>af57b78879b9fa3639845edfb3208c974</anchor>
      <arglist>(cheapest_insertion_neighbors_ratio)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a78ea457187d5b3602a0211e0149d45c9</anchor>
      <arglist>(routing_dfs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a2ad659c8e2231e2ae9850d5e80fe90b2</anchor>
      <arglist>(routing_optimization_step)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int32</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a540512ada588875d8b65808a57e04098</anchor>
      <arglist>(routing_number_of_solutions_to_collect)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int32</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>af1cb364c9972cbe0fead215790f168b8</anchor>
      <arglist>(routing_relocate_expensive_chain_num_arcs_to_consider)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a871df133398c8959b3cb60352ce00a2f</anchor>
      <arglist>(routing_use_light_propagation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a0fa7d21980527aa0ea3b3fc702963531</anchor>
      <arglist>(routing_cache_callbacks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a96cdf25d3bc98c8eae24e3a761f5ef35</anchor>
      <arglist>(routing_max_cache_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>ac06171f360022662600e125df663cd70</anchor>
      <arglist>(routing_trace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a774858237612cc1d61ae3a812481e127</anchor>
      <arglist>(routing_profile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>ae44df5aa6332b25ae31c96216e45522b</anchor>
      <arglist>(routing_use_homogeneous_costs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a9f81449a13758249d4247ec0ddce5a9a</anchor>
      <arglist>(routing_gzip_compress_trail)</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters</type>
      <name>BuildModelParametersFromFlags</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae39a6c4d8ba890ec5150ea91a7aad643</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters</type>
      <name>BuildSearchParametersFromFlags</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a95da1d3a46432afd40024f79279a48b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing_index_manager.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing__index__manager_8h</filename>
    <includes id="routing__types_8h" name="routing_types.h" local="yes" imported="no">ortools/constraint_solver/routing_types.h</includes>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>*RoutingModel</type>
      <name>model</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a2f03e5ed2f65164d62fc5f039441596d</anchor>
      <arglist>(manager)</arglist>
    </member>
    <member kind="function">
      <type>use manager</type>
      <name>NodeToIndex</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a891fd91407acbbeb1c47d22be7991b3f</anchor>
      <arglist>(node)&apos; whenever &apos;model&apos; requires a variable *index. */class RoutingIndexManager</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>starts_ends</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a144750b8ec3f03decd898cc08c6b2894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>**</type>
      <name>Then</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad86181cc5dff70e9ce3bfa1f8393cb6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing_lp_scheduling.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing__lp__scheduling_8h</filename>
    <includes id="routing_8h" name="routing.h" local="yes" imported="no">ortools/constraint_solver/routing.h</includes>
    <class kind="class">operations_research::DimensionCumulOptimizerCore</class>
    <class kind="class">operations_research::LocalDimensionCumulOptimizer</class>
    <class kind="class">operations_research::GlobalDimensionCumulOptimizer</class>
    <namespace>operations_research</namespace>
  </compound>
  <compound kind="file">
    <name>routing_neighborhoods.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing__neighborhoods_8h</filename>
    <includes id="constraint__solver_8h" name="constraint_solver.h" local="yes" imported="no">ortools/constraint_solver/constraint_solver.h</includes>
    <includes id="constraint__solveri_8h" name="constraint_solveri.h" local="yes" imported="no">ortools/constraint_solver/constraint_solveri.h</includes>
    <includes id="routing__types_8h" name="routing_types.h" local="yes" imported="no">ortools/constraint_solver/routing_types.h</includes>
    <class kind="class">operations_research::MakeRelocateNeighborsOperator</class>
    <class kind="class">operations_research::MakePairActiveOperator</class>
    <class kind="class">operations_research::MakePairInactiveOperator</class>
    <class kind="class">operations_research::PairRelocateOperator</class>
    <class kind="class">operations_research::LightPairRelocateOperator</class>
    <class kind="class">operations_research::PairExchangeOperator</class>
    <class kind="class">operations_research::PairExchangeRelocateOperator</class>
    <class kind="class">operations_research::SwapIndexPairOperator</class>
    <class kind="class">operations_research::IndexPairSwapActiveOperator</class>
    <class kind="class">operations_research::RelocateExpensiveChain</class>
    <class kind="class">operations_research::PairNodeSwapActiveOperator</class>
    <class kind="class">operations_research::RelocateSubtrip</class>
    <class kind="class">operations_research::ExchangeSubtrip</class>
    <namespace>operations_research</namespace>
  </compound>
  <compound kind="file">
    <name>routing_parameters.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing__parameters_8h</filename>
    <includes id="routing__parameters_8pb_8h" name="routing_parameters.pb.h" local="yes" imported="no">ortools/constraint_solver/routing_parameters.pb.h</includes>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>RoutingModelParameters</type>
      <name>DefaultRoutingModelParameters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa388c8707db255ae7742c04046bdd613</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters</type>
      <name>DefaultRoutingSearchParameters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>adcac4a11f1e4d36ceb47f7251461487d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>FindErrorInRoutingSearchParameters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae2e060e8ee4ea901dc4df260b3385eac</anchor>
      <arglist>(const RoutingSearchParameters &amp;search_parameters)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing_parameters.pb.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/gen/ortools/constraint_solver/</path>
    <filename>routing__parameters_8pb_8h</filename>
    <includes id="routing__enums_8pb_8h" name="routing_enums.pb.h" local="yes" imported="no">ortools/constraint_solver/routing_enums.pb.h</includes>
    <class kind="struct">TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</class>
    <class kind="class">operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators</class>
    <class kind="class">operations_research::RoutingSearchParameters</class>
    <class kind="class">operations_research::RoutingModelParameters</class>
    <namespace>operations_research</namespace>
    <namespace>google</namespace>
    <namespace>google::protobuf</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROTOBUF_INTERNAL_EXPORT_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</name>
      <anchorfile>routing__parameters_8pb_8h.html</anchorfile>
      <anchor>a41c79b954c0fc1878adefd2371557f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDescriptors_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</name>
      <anchorfile>routing__parameters_8pb_8h.html</anchorfile>
      <anchor>a1b331d107b661381c44fcb30ec2d71ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::RoutingModelParameters *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::RoutingModelParameters &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a9b7b91a9046ed6001177f9828bb02baf</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::RoutingSearchParameters *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::RoutingSearchParameters &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a48576a6238bbee63a4e7b85f192b84c7</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a881c03b2a6c813d26593e6de11e4ff3c</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="variable">
      <type>RoutingModelParametersDefaultTypeInternal</type>
      <name>_RoutingModelParameters_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae3a853384e4e580582b670a57018029d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingSearchParametersDefaultTypeInternal</type>
      <name>_RoutingSearchParameters_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a601e1a7c230fbf44503db528b20e30ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperatorsDefaultTypeInternal</type>
      <name>_RoutingSearchParameters_LocalSearchNeighborhoodOperators_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a595bafdd2ca0348c23f2c03da8ef2468</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing_types.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing__types_8h</filename>
    <namespace>operations_research</namespace>
    <member kind="typedef">
      <type>std::function&lt; int64(int64)&gt;</type>
      <name>RoutingTransitCallback1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a40e66c7b62d7c023af6f08912fdc3f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(int64, int64)&gt;</type>
      <name>RoutingTransitCallback2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae7851f8d6518e3180b9d9f0ec69826e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::vector&lt; int64 &gt;, std::vector&lt; int64 &gt; &gt;</type>
      <name>RoutingIndexPair</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a30af988d402f0f3d36640575ca87153c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RoutingIndexPair &gt;</type>
      <name>RoutingIndexPairs</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a114ea14886b902c9cf9b988c4ef12672</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a8fee47a5359613bc7f8df356595c7ff0</anchor>
      <arglist>(RoutingNodeIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>afa9196adb7aa76d8e60cd4c0c6687c0d</anchor>
      <arglist>(RoutingCostClassIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3d98b6fb94b9cdabfaca3d9f3c9632e9</anchor>
      <arglist>(RoutingDimensionIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a1edd1d7c020633019991b13d14b4b15b</anchor>
      <arglist>(RoutingDisjunctionIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aff19b78b3d56ff95c23727ca4ff64ea7</anchor>
      <arglist>(RoutingVehicleClassIndex, int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sat_parameters.pb.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/gen/ortools/sat/</path>
    <filename>sat__parameters_8pb_8h</filename>
    <class kind="struct">TableStruct_ortools_2fsat_2fsat_5fparameters_2eproto</class>
    <class kind="class">operations_research::sat::SatParameters</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_VariableOrder &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_Polarity &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_BinaryMinizationAlgorithm &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_ClauseProtection &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_ClauseOrdering &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_RestartAlgorithm &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_MaxSatAssumptionOrder &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_SearchBranching &gt;</class>
    <namespace>operations_research</namespace>
    <namespace>operations_research::sat</namespace>
    <namespace>google</namespace>
    <namespace>google::protobuf</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fsat_5fparameters_2eproto</name>
      <anchorfile>sat__parameters_8pb_8h.html</anchorfile>
      <anchor>af6cf58e28c0974a7acdafa7d639296f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_VariableOrder</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a7500a48ce324f0ef41f39e45f60f214d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_VariableOrder_IN_ORDER</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a7500a48ce324f0ef41f39e45f60f214da92760d7186df85dfd6c188eae0b9b591</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_VariableOrder_IN_REVERSE_ORDER</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a7500a48ce324f0ef41f39e45f60f214da941215af97625c63a144520ec7e02bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_VariableOrder_IN_RANDOM_ORDER</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a7500a48ce324f0ef41f39e45f60f214da8de6cbc54e325b78d800c8354591d726</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_Polarity</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>add5353b524feae6119c2a8220f1ca3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_Polarity_POLARITY_TRUE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>add5353b524feae6119c2a8220f1ca3d2a6145ecb76ca29dc07b9acde97866a8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_Polarity_POLARITY_FALSE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>add5353b524feae6119c2a8220f1ca3d2a204c91561099609cdf7b6469e84e9576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_Polarity_POLARITY_RANDOM</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>add5353b524feae6119c2a8220f1ca3d2afaf662755a533bc2353968b4c4da4d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_Polarity_POLARITY_WEIGHTED_SIGN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>add5353b524feae6119c2a8220f1ca3d2af9a6fbf18fc3445083ca746b1e920ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_Polarity_POLARITY_REVERSE_WEIGHTED_SIGN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>add5353b524feae6119c2a8220f1ca3d2a77094f18176663ceea0b80667cf917a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_ConflictMinimizationAlgorithm</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8ab616f5071426513fb5d7dd88f2b23b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ConflictMinimizationAlgorithm_NONE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8ab616f5071426513fb5d7dd88f2b23bae1bd62c48ad8f9a7d242ae916bbe5066</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ConflictMinimizationAlgorithm_SIMPLE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8ab616f5071426513fb5d7dd88f2b23bac1adcdd93b988565644ddc9c3510c96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ConflictMinimizationAlgorithm_RECURSIVE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8ab616f5071426513fb5d7dd88f2b23bacf7f9f878c3e92e4e319c3e4ea926af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ConflictMinimizationAlgorithm_EXPERIMENTAL</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8ab616f5071426513fb5d7dd88f2b23ba52b205df52309c4f050206500297e4e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_BinaryMinizationAlgorithm</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af925d9b6f4730729d935c3fad014c4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_BinaryMinizationAlgorithm_NO_BINARY_MINIMIZATION</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af925d9b6f4730729d935c3fad014c4ffa5cefb853f31166cc3684d90594d5dde9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_BinaryMinizationAlgorithm_BINARY_MINIMIZATION_FIRST</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af925d9b6f4730729d935c3fad014c4ffacefb9cb334d97dc99896de7db79a2476</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_BinaryMinizationAlgorithm_BINARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_REDUCTION</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af925d9b6f4730729d935c3fad014c4ffac586955ded9c943dee2faf8b5b738dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_BinaryMinizationAlgorithm_BINARY_MINIMIZATION_WITH_REACHABILITY</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af925d9b6f4730729d935c3fad014c4ffa30c30629b82fa4252c40e28942e35416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_BinaryMinizationAlgorithm_EXPERIMENTAL_BINARY_MINIMIZATION</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af925d9b6f4730729d935c3fad014c4ffaeb6a38e1f5f44d7f13c6f8d6325ba069</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_ClauseProtection</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad24109146a44723f1c95b7d3f226fcc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ClauseProtection_PROTECTION_NONE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad24109146a44723f1c95b7d3f226fcc1a1739f0f3322dc59ebaa2fb9fa3481d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ClauseProtection_PROTECTION_ALWAYS</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad24109146a44723f1c95b7d3f226fcc1aa7de36c91e9668bd4d3429170a3a915a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ClauseProtection_PROTECTION_LBD</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad24109146a44723f1c95b7d3f226fcc1a4ce148354b01f5b1e2da32e7576edaa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_ClauseOrdering</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a31ad84fa962b626887890dd76a53c74a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ClauseOrdering_CLAUSE_ACTIVITY</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a31ad84fa962b626887890dd76a53c74aaaab0bb6b57e109185e6a62d5d0271a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ClauseOrdering_CLAUSE_LBD</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a31ad84fa962b626887890dd76a53c74aa2dcf758b7ee7431577e2aa80a60b163e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_RestartAlgorithm</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a192662f710ae6cff2e00eff50ce55ac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_RestartAlgorithm_NO_RESTART</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a192662f710ae6cff2e00eff50ce55ac3a698c5900a88697e89f1a9ffa790fd49f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_RestartAlgorithm_LUBY_RESTART</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a192662f710ae6cff2e00eff50ce55ac3a0fcf1821b877dd61f6cfac37a36a82d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_RestartAlgorithm_DL_MOVING_AVERAGE_RESTART</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a192662f710ae6cff2e00eff50ce55ac3a89e7ee47fc5c826c03f455f082f22c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_RestartAlgorithm_LBD_MOVING_AVERAGE_RESTART</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a192662f710ae6cff2e00eff50ce55ac3a5d2302ed4086b87cadaad18aa5981aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_RestartAlgorithm_FIXED_RESTART</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a192662f710ae6cff2e00eff50ce55ac3a353691b5a40f70fe5d05cc01bdf22536</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_MaxSatAssumptionOrder</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a683a06394b218203a4517b19468df400</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_MaxSatAssumptionOrder_DEFAULT_ASSUMPTION_ORDER</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a683a06394b218203a4517b19468df400ab0500c1196441cd7820da82c2c1baf6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_MaxSatAssumptionOrder_ORDER_ASSUMPTION_BY_DEPTH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a683a06394b218203a4517b19468df400a61bc7845a56fecefcc18795a536d5eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_MaxSatAssumptionOrder_ORDER_ASSUMPTION_BY_WEIGHT</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a683a06394b218203a4517b19468df400a44da070df5c6e2443fa1c00b6c25893f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_MaxSatStratificationAlgorithm</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab342c0ecaab53f1e8e6cf05ca513b8d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_MaxSatStratificationAlgorithm_STRATIFICATION_NONE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab342c0ecaab53f1e8e6cf05ca513b8d5a5bb7f0a112c4672ea2abec407f7d384c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_MaxSatStratificationAlgorithm_STRATIFICATION_DESCENT</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab342c0ecaab53f1e8e6cf05ca513b8d5a0c67cde78d6314de8d13734d65709b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_MaxSatStratificationAlgorithm_STRATIFICATION_ASCENT</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab342c0ecaab53f1e8e6cf05ca513b8d5adf547628eb3421e641512aeb95b31912</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_SearchBranching</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_SearchBranching_AUTOMATIC_SEARCH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4bac23498a3951b707b682de68c3f2ef4ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_SearchBranching_FIXED_SEARCH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4ba4b402cda1dee9234ecc9bf3f969dae9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_SearchBranching_PORTFOLIO_SEARCH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4ba79d67aaf6b62f71bbddd9c5177ebedc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_SearchBranching_LP_SEARCH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4bac0ee72ff494861f949253aac50496f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_SearchBranching_PSEUDO_COST_SEARCH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4ba0959d8f131e2610b97a8830464b2c633</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_SearchBranching_PORTFOLIO_WITH_QUICK_RESTART_SEARCH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4ba28a2409f7a5ca2ecd6635da22e4e6667</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDescriptors_ortools_2fsat_2fsat_5fparameters_2eproto</name>
      <anchorfile>sat__parameters_8pb_8h.html</anchorfile>
      <anchor>a68b07c45a03772248435665ca63fb33a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::SatParameters *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::SatParameters &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a5e3ba24b3733dab6d3aac5a8deec1fc6</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_VariableOrder_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a711b59624fbd706f0754647084c665d8</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_VariableOrder_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a63d00708775015b761d79d26958ae008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_VariableOrder_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aea11eda3bbcc4f79baab267009d28df6</anchor>
      <arglist>(SatParameters_VariableOrder value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_VariableOrder_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a628f11b71a7acbabf2c7eb0a55ebf04e</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_VariableOrder *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_Polarity_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a4585806adf77d6f7a56bd21230a31175</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_Polarity_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab019ee0753776b26fed17764e82d23e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_Polarity_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aeb3937db56cace9b52fbb3ada9bfea73</anchor>
      <arglist>(SatParameters_Polarity value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_Polarity_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aacbaf337b8a87121b647c838bef22e1b</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_Polarity *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a90d6f173fbfa33e26ff6508013c81ffd</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a0405a68dd3f67e20ca8c7b12d45cb870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a729819ca8e41e5a7c95a32da63d75804</anchor>
      <arglist>(SatParameters_ConflictMinimizationAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a184421f59216ca2ef58f282236cf8bc3</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_ConflictMinimizationAlgorithm *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_BinaryMinizationAlgorithm_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a3e37f554c39fbb05faf07674ac550f47</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_BinaryMinizationAlgorithm_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ac6854e48c578db9f71a0c4a95dc95279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_BinaryMinizationAlgorithm_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af7cc36dac69bb4b7d7d5dacbf37e57ba</anchor>
      <arglist>(SatParameters_BinaryMinizationAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_BinaryMinizationAlgorithm_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa0292e780dbe4984839ecad4b44fccf0</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_BinaryMinizationAlgorithm *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_ClauseProtection_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ac1aa9d5ea93fbc96a68237c2beda3836</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_ClauseProtection_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>afdfdf216dea1b6ca3cb4c816396f7493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_ClauseProtection_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa46504e5e34f1716ac37b78ddc08b060</anchor>
      <arglist>(SatParameters_ClauseProtection value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_ClauseProtection_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a1558fb6c8e007b75889204116c149f78</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_ClauseProtection *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_ClauseOrdering_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa6f7c43106217e8a55877110b7d87e7c</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_ClauseOrdering_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a38f0d79ca92d2252d62d8db8dfd1556a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_ClauseOrdering_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a56d5fe6aa184be05f6092ab990f5250e</anchor>
      <arglist>(SatParameters_ClauseOrdering value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_ClauseOrdering_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad674863df7b9117f210c945f2674db58</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_ClauseOrdering *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_RestartAlgorithm_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab199957e5457d8356687f12d67d1aaac</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_RestartAlgorithm_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa2f24a25dc16dd685917069e6bb22b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_RestartAlgorithm_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9703a0efa39a7877735205de9a006c0f</anchor>
      <arglist>(SatParameters_RestartAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_RestartAlgorithm_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a0960de8f477819a400cbd3a41062b9a2</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_RestartAlgorithm *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_MaxSatAssumptionOrder_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a4104fcd7cb88b2edc4cbc86e6b331cdf</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_MaxSatAssumptionOrder_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a828b06b1d9e9e57276c5092899592cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_MaxSatAssumptionOrder_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a3a48b4e764d3598485a64075cee904fa</anchor>
      <arglist>(SatParameters_MaxSatAssumptionOrder value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_MaxSatAssumptionOrder_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a3bc3e149fd0e1959e5805d7ad73ccff2</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_MaxSatAssumptionOrder *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a5fcee51ba7784a7c403731301af6e14c</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a52f132562a3089063ffa35dc1c54f21b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a08c2c94217816891bec7180e5f6b50d3</anchor>
      <arglist>(SatParameters_MaxSatStratificationAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>affb8017c363df7be4c369908a6e1f90f</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_MaxSatStratificationAlgorithm *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_SearchBranching_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9018824bcc1b169f32af87ad4faf7561</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_SearchBranching_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a136b498c164dea9e5a9829d1590cec7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_SearchBranching_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aaf4dfaa6a41d60012b210e5587cbbf51</anchor>
      <arglist>(SatParameters_SearchBranching value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_SearchBranching_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a992a00120a7ac841217f4561576cc354</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_SearchBranching *value)</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_VariableOrder &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>affaa52e637aa5700a18de9de15d50802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_Polarity &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a7ce45884a30882618460722b3f5b6a63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a865dfb0c8234642d80df4b0f91914a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_BinaryMinizationAlgorithm &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a53653792bc958c9d29044e3ab139254b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_ClauseProtection &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ad34fd79c2176b0344e2a5a649cfcca5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_ClauseOrdering &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a5f0b29c0076ec4e010aeeb8bdb500a02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_RestartAlgorithm &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>aa75c01445cca67a20648e0162d4d01b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_MaxSatAssumptionOrder &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>afa03ee919b72e3665921728ee15be26d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a86ff4f7acb5908cc179e592e6dae80e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_SearchBranching &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a20bb637648e3cdc283c4e71ce06a3956</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SatParametersDefaultTypeInternal</type>
      <name>_SatParameters_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ae6d7897cec550c4b33117827b971e421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_VariableOrder</type>
      <name>SatParameters_VariableOrder_VariableOrder_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>afebbdcc35f1ea46b6b36b02942a45718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_VariableOrder</type>
      <name>SatParameters_VariableOrder_VariableOrder_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa37fa90963dd6767336794ec9ddd88a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_VariableOrder_VariableOrder_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a0dbcc1f155896d126ee866c6fa7cdbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_Polarity</type>
      <name>SatParameters_Polarity_Polarity_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a7dcc06ad16f29c763ef71c12e33428d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_Polarity</type>
      <name>SatParameters_Polarity_Polarity_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa9e4f6913a334312075d8b06e4a8f481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_Polarity_Polarity_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa038a595c0924ec0a6b6d1df43a47a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_ConflictMinimizationAlgorithm</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a797fae7f793822a392093b2c0e0583df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_ConflictMinimizationAlgorithm</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad89401863cafbbb42117a67da51a9c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8bb3e1b9fc46859bcb473d877fdf81f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_BinaryMinizationAlgorithm</type>
      <name>SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af3993105042b8a18ef4c48af71dbfae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_BinaryMinizationAlgorithm</type>
      <name>SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ac3979ff56f4e8e1a3827ffe9a1cfd953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a4603f2b46b1da66b7f160b501802a571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_ClauseProtection</type>
      <name>SatParameters_ClauseProtection_ClauseProtection_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a50a54b74c5a02bf787d5161be8496a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_ClauseProtection</type>
      <name>SatParameters_ClauseProtection_ClauseProtection_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a315f1d416996e0e1df6cf7c5f22c4c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_ClauseProtection_ClauseProtection_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a177a5f526c9aaf4dde0ae3d973a0a1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_ClauseOrdering</type>
      <name>SatParameters_ClauseOrdering_ClauseOrdering_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa6f7a09fe0ece7997430857d3d2b06d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_ClauseOrdering</type>
      <name>SatParameters_ClauseOrdering_ClauseOrdering_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8939c25bb2dba51fc7d410b379ca4b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_ClauseOrdering_ClauseOrdering_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a7bd8956745a9e0f194935411ad26a7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_RestartAlgorithm</type>
      <name>SatParameters_RestartAlgorithm_RestartAlgorithm_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad069012c7b5da25c0b506d93f249ae3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_RestartAlgorithm</type>
      <name>SatParameters_RestartAlgorithm_RestartAlgorithm_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ae5654991d85d76a2bb57727e534aca69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_RestartAlgorithm_RestartAlgorithm_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9fc9eb8a69f68bb8c56f718d2905cccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_MaxSatAssumptionOrder</type>
      <name>SatParameters_MaxSatAssumptionOrder_MaxSatAssumptionOrder_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8276145f0fea9405a17ea4e15437c370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_MaxSatAssumptionOrder</type>
      <name>SatParameters_MaxSatAssumptionOrder_MaxSatAssumptionOrder_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a253ac635cb2d948d9e6f7ddbdf50deb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_MaxSatAssumptionOrder_MaxSatAssumptionOrder_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab876374ba4d61ed8a8f5ab1647214f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_MaxSatStratificationAlgorithm</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_MaxSatStratificationAlgorithm_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a81ef72928f25bf91f9459e95b30f60a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_MaxSatStratificationAlgorithm</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_MaxSatStratificationAlgorithm_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af77a4c44b279a8ed20ba62fe6855f3d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_MaxSatStratificationAlgorithm_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aeb0e2efc07e4da53cac4c129726d25c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_SearchBranching</type>
      <name>SatParameters_SearchBranching_SearchBranching_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a759737df3763d9079011350ee71b933f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_SearchBranching</type>
      <name>SatParameters_SearchBranching_SearchBranching_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ae811ceae8f8230a59d40b5effad594af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_SearchBranching_SearchBranching_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a82110fc37ba023a467574052d75d507b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>shortestpaths.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>shortestpaths_8h</filename>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>bool</type>
      <name>DijkstraShortestPath</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a53e6a83fcbd689abf5b3078b0236f9f1</anchor>
      <arglist>(int node_count, int start_node, int end_node, std::function&lt; int64(int, int)&gt; graph, int64 disconnected_distance, std::vector&lt; int &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StableDijkstraShortestPath</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad56bae19a2298c3163af96ca7f8b89b1</anchor>
      <arglist>(int node_count, int start_node, int end_node, std::function&lt; int64(int, int)&gt; graph, int64 disconnected_distance, std::vector&lt; int &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BellmanFordShortestPath</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad5bfec6ea714171fbff2d8b791d0d286</anchor>
      <arglist>(int node_count, int start_node, int end_node, std::function&lt; int64(int, int)&gt; graph, int64 disconnected_distance, std::vector&lt; int &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AStarShortestPath</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>acff272be25bcf9641218c05c59ec1a4e</anchor>
      <arglist>(int node_count, int start_node, int end_node, std::function&lt; int64(int, int)&gt; graph, std::function&lt; int64(int)&gt; heuristic, int64 disconnected_distance, std::vector&lt; int &gt; *nodes)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sorted_interval_list.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/util/</path>
    <filename>sorted__interval__list_8h</filename>
    <class kind="struct">operations_research::ClosedInterval</class>
    <class kind="class">operations_research::Domain</class>
    <class kind="class">operations_research::SortedDisjointIntervalList</class>
    <class kind="struct">operations_research::SortedDisjointIntervalList::IntervalComparator</class>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5c341d9214d5d46014089435ba0e26d3</anchor>
      <arglist>(std::ostream &amp;out, const ClosedInterval &amp;interval)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aaa301d39d2a9271daf8c65e779635335</anchor>
      <arglist>(std::ostream &amp;out, const std::vector&lt; ClosedInterval &gt; &amp;intervals)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IntervalsAreSortedAndNonAdjacent</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab8c23924c4b61ed5c531424a6f18bde1</anchor>
      <arglist>(absl::Span&lt; const ClosedInterval &gt; intervals)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abebf3070a940da6bf678953a66584e76</anchor>
      <arglist>(std::ostream &amp;out, const Domain &amp;domain)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strongly_connected_components.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>strongly__connected__components_8h</filename>
    <class kind="struct">SccCounterOutput</class>
    <member kind="function">
      <type>void</type>
      <name>FindStronglyConnectedComponents</name>
      <anchorfile>strongly__connected__components_8h.html</anchorfile>
      <anchor>aafab5785b250e1013c13511ce478f36b</anchor>
      <arglist>(const NodeIndex num_nodes, const Graph &amp;graph, SccOutput *components)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>util.h</name>
    <path>/Users/lperron/Work/or-tools/ortools/graph/</path>
    <filename>util_8h</filename>
    <includes id="connected__components_8h" name="connected_components.h" local="yes" imported="no">ortools/graph/connected_components.h</includes>
    <includes id="graph_8h" name="graph.h" local="yes" imported="no">ortools/graph/graph.h</includes>
    <includes id="iterators_8h" name="iterators.h" local="yes" imported="no">ortools/graph/iterators.h</includes>
    <class kind="class">util::UndirectedAdjacencyListsOfDirectedGraph</class>
    <class kind="class">util::UndirectedAdjacencyListsOfDirectedGraph::AdjacencyListIterator</class>
    <namespace>util</namespace>
    <member kind="function">
      <type>bool</type>
      <name>GraphHasSelfArcs</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ac4af76993c891ee4ad507783edec2a1c</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GraphHasDuplicateArcs</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a6b37593970a26f5c88b3d2ea9acea9d2</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GraphIsSymmetric</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a784b483eeae1b49164a8a02fe9c0d3ba</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GraphIsWeaklyConnected</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a97311561fd1f01e9f35b2f7ce18b0af3</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Graph &gt;</type>
      <name>CopyGraph</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a0ed748741b17dad9e6cc485728bb0043</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Graph &gt;</type>
      <name>RemapGraph</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>acfecdce43e9933bde2a94fd879f12f5f</anchor>
      <arglist>(const Graph &amp;graph, const std::vector&lt; int &gt; &amp;new_node_index)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Graph &gt;</type>
      <name>GetSubgraphOfNodes</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ad1df170a504d335462a1104a942e6069</anchor>
      <arglist>(const Graph &amp;graph, const std::vector&lt; int &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>GetWeaklyConnectedComponents</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ab34783e729bb5fc99042893f6bfcbb2f</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSubsetOf0N</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>aa9fb4c9a176acaf72053b11727436e9e</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;v, int n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsValidPermutation</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ad7986b01cf61a31c09a27b4a97db6a83</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Graph &gt;</type>
      <name>RemoveSelfArcsAndDuplicateArcs</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a8a06031908a024a50dbdddc394a22490</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveCyclesFromPath</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a06fa201576c927d92657e090fa86bfdb</anchor>
      <arglist>(const Graph &amp;graph, std::vector&lt; int &gt; *arc_path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PathHasCycle</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>adbb18bcb2f9d64cbbaeb57c328f57e7b</anchor>
      <arglist>(const Graph &amp;graph, const std::vector&lt; int &gt; &amp;arc_path)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>ComputeOnePossibleReverseArcMapping</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae469c559688b92f36bae2788c2e6063e</anchor>
      <arglist>(const Graph &amp;graph, bool die_if_not_symmetric)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::UndirectedAdjacencyListsOfDirectedGraph::AdjacencyListIterator</name>
    <filename>classutil_1_1UndirectedAdjacencyListsOfDirectedGraph_1_1AdjacencyListIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>AdjacencyListIterator</name>
      <anchorfile>classutil_1_1UndirectedAdjacencyListsOfDirectedGraph_1_1AdjacencyListIterator.html</anchorfile>
      <anchor>a12996aa34ae37ed7efa6fb2eca4ff54e</anchor>
      <arglist>(const Graph &amp;graph, ArcIterator &amp;&amp;arc_it)</arglist>
    </member>
    <member kind="function">
      <type>Graph::NodeIndex</type>
      <name>operator *</name>
      <anchorfile>classutil_1_1UndirectedAdjacencyListsOfDirectedGraph_1_1AdjacencyListIterator.html</anchorfile>
      <anchor>a9c411230b6cd51ca80cb31a1f8387ae8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::AllDifferentConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>AllDifferentConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>afa374362ff2ec8d60e5c421e54b6a8a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AllDifferentConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a0e2f7dc53c99244558213cf95867b151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AllDifferentConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a26fea2882d6146622fff824680664334</anchor>
      <arglist>(const AllDifferentConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>AllDifferentConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>ad4bf1bfe0a0aa3f19e6b5dc7159adb30</anchor>
      <arglist>(const AllDifferentConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a6a9aed54518ace24b21f1c97dad50e14</anchor>
      <arglist>(AllDifferentConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>AllDifferentConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a9d39bf2a98cfbbc78cd1c3b1c79e3fae</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>AllDifferentConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a3f257dab16292c7831f7361aef07625d</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>afb358ed428e2e634fabf33b60f99d149</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a43898ffb224792fda6b89f64411a60f8</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a6e634b216b297afc7daab20e4d4df6aa</anchor>
      <arglist>(const AllDifferentConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>ab5b2993c4ea616b2c2f7f858c5879f1c</anchor>
      <arglist>(const AllDifferentConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>aaddbe0d802e4082ef20b54714f729d9a</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a03f21d65761f0771abb669fa9aead776</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>aebd51dada93f067e7c9f84fbff787b5b</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a3a28d885a00ca704abf9bbd609e30090</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>ab7b8130120e80ca58bc306d702a250e0</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a308313c0054b1c5b7bf34ec4f540f249</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a0064fce1beae7a9a46176c1050ac5fc3</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a603e743d00fcfb3ca7a4f92e67de73a3</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vars_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a7a9333c7f1acab5f529ced5c134a0526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a6e37adc908b3f8e82a6eda54c0fd56e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a3d78b15020b25d11c0907e92f7c3b566</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a336ec9541dce5445385a90d03c2ab273</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a5e343db89b4f96f073219ff96cbf1ed1</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>adbe8562cfce680587f33ec3377bf9a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a5fe82b6bcc56f466ed48bf5891f3b617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a7f5b7ef264feb768b76df854f4a63f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const AllDifferentConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>aa86d19876167cc651ab7c7f91813cf11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a20f5b23bd98aeff3e7de3b247547d0de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const AllDifferentConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a2f260cd00606d62f67eb3cd8a5dfb00b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a58f503a20854e14c4f88516be9e6a7fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>a0ab3526b503dbd92ed23ad2d929f03e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1AllDifferentConstraintProto.html</anchorfile>
      <anchor>aaa3305f1fd5a03f4eb7996c2a2aba0a9</anchor>
      <arglist>(AllDifferentConstraintProto &amp;a, AllDifferentConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::AnnotatedGraphBuildManager</name>
    <filename>classoperations__research_1_1AnnotatedGraphBuildManager.html</filename>
    <templarg></templarg>
    <base>GraphBuilderFromArcs&lt; GraphType, graph_traits&lt; GraphType &gt;::is_dynamic &gt;</base>
    <member kind="function">
      <type></type>
      <name>AnnotatedGraphBuildManager</name>
      <anchorfile>classoperations__research_1_1AnnotatedGraphBuildManager.html</anchorfile>
      <anchor>a54e58efb7e00c121962f0642e086ff62</anchor>
      <arglist>(typename GraphType::NodeIndex num_nodes, typename GraphType::ArcIndex num_arcs, bool sort_arcs)</arglist>
    </member>
    <member kind="function">
      <type>GraphType::ArcIndex</type>
      <name>AddArc</name>
      <anchorfile>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs.html</anchorfile>
      <anchor>ac8c490f6e4ec383c92799f17ddde40e1</anchor>
      <arglist>(typename GraphType::NodeIndex tail, typename GraphType::NodeIndex head)</arglist>
    </member>
    <member kind="function">
      <type>GraphType *</type>
      <name>Graph</name>
      <anchorfile>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs.html</anchorfile>
      <anchor>a63eda0d830f2a9f145e3aa65e7b80bae</anchor>
      <arglist>(PermutationCycleHandler&lt; typename GraphType::ArcIndex &gt; *client_cycle_handler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ArcFunctorOrderingByTailAndHead</name>
    <filename>classoperations__research_1_1ArcFunctorOrderingByTailAndHead.html</filename>
    <templarg>GraphType</templarg>
    <member kind="function">
      <type></type>
      <name>ArcFunctorOrderingByTailAndHead</name>
      <anchorfile>classoperations__research_1_1ArcFunctorOrderingByTailAndHead.html</anchorfile>
      <anchor>a47fb62aeee589ee246d918654aa5fcbf</anchor>
      <arglist>(const GraphType &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classoperations__research_1_1ArcFunctorOrderingByTailAndHead.html</anchorfile>
      <anchor>adcc7e1ea101f9a6a7f276d7d5ae85926</anchor>
      <arglist>(typename GraphType::ArcIndex a, typename GraphType::ArcIndex b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ArcIndexOrderingByTailNode</name>
    <filename>classoperations__research_1_1ArcIndexOrderingByTailNode.html</filename>
    <templarg>GraphType</templarg>
    <member kind="function">
      <type></type>
      <name>ArcIndexOrderingByTailNode</name>
      <anchorfile>classoperations__research_1_1ArcIndexOrderingByTailNode.html</anchorfile>
      <anchor>abe28f103a119480ebe81781bec2b980e</anchor>
      <arglist>(const GraphType &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classoperations__research_1_1ArcIndexOrderingByTailNode.html</anchorfile>
      <anchor>a469f26e2984e4bb6058323ff48609f08</anchor>
      <arglist>(typename GraphType::ArcIndex a, typename GraphType::ArcIndex b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::StarGraphBase::ArcIterator</name>
    <filename>classoperations__research_1_1StarGraphBase_1_1ArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ArcIterator</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1ArcIterator.html</anchorfile>
      <anchor>a3656b335cbb811daf46ffbc07629c101</anchor>
      <arglist>(const DerivedGraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1ArcIterator.html</anchorfile>
      <anchor>ad1b734838923b0401394878f884f80bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1ArcIterator.html</anchorfile>
      <anchor>a261b6e58a0dfd38d8d0c0d882c2ccf8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1ArcIterator.html</anchorfile>
      <anchor>a682828ce4c89cae5de8accd10a9a12c4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ArgumentHolder</name>
    <filename>classoperations__research_1_1ArgumentHolder.html</filename>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>TypeName</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ae8ee031f957d5ede9e14f8c1941551d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTypeName</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a6cd262ab7a6e37c48174f7f0dbd2bb73</anchor>
      <arglist>(const std::string &amp;type_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntegerArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a024839a22b80cf3bd4c9879f71b9dbe4</anchor>
      <arglist>(const std::string &amp;arg_name, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntegerArrayArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ae321335efa9fe9d82edd8d5fa95ade4e</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntegerMatrixArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ab41855f3cb2bd93669de47d89208366f</anchor>
      <arglist>(const std::string &amp;arg_name, const IntTupleSet &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntegerExpressionArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ad82e3466e449af82245c2e0b91c8c66e</anchor>
      <arglist>(const std::string &amp;arg_name, IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntegerVariableArrayArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a059904b2a1d62ed9ad661e5a1177553d</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntervalArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ae190963f736cea776abfcee0c371894f</anchor>
      <arglist>(const std::string &amp;arg_name, IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntervalArrayArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a1664c8587a17a2dbf1aa5d26c9adfae5</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; IntervalVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSequenceArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a5e31bbe24e0a9e5918f264717c40b391</anchor>
      <arglist>(const std::string &amp;arg_name, SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSequenceArrayArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>af0fbaf39e9ce3f12565d1674a874feeb</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; SequenceVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasIntegerExpressionArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a7546de0f0f511735bd7a0875575e4280</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasIntegerVariableArrayArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ab72da67fc0dc6e063bde74f0827bd66c</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>FindIntegerArgumentWithDefault</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a3f504aa5d541d118ea2581d54eaba52e</anchor>
      <arglist>(const std::string &amp;arg_name, int64 def) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>FindIntegerArgumentOrDie</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a01223d35d0c3d058461a2c9bee5f84a4</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>FindIntegerArrayArgumentOrDie</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ab94296da5de955005d9bb021c9dedadb</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
    <member kind="function">
      <type>const IntTupleSet &amp;</type>
      <name>FindIntegerMatrixArgumentOrDie</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a08f189fbfdb08977ffde2df4bba3e471</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>FindIntegerExpressionArgumentOrDie</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a9ae78960041ab71c94f6acbd79878f0f</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>FindIntegerVariableArrayArgumentOrDie</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a530925ddb857ccac27e83b01e438f107</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ArrayWithOffset</name>
    <filename>classoperations__research_1_1ArrayWithOffset.html</filename>
    <templarg></templarg>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>ArrayWithOffset</name>
      <anchorfile>classoperations__research_1_1ArrayWithOffset.html</anchorfile>
      <anchor>a9ab37894f3c478b606d5f62452636324</anchor>
      <arglist>(int64 index_min, int64 index_max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayWithOffset</name>
      <anchorfile>classoperations__research_1_1ArrayWithOffset.html</anchorfile>
      <anchor>a3c91ad81a54a07e40255e93cd3b798bf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>Evaluate</name>
      <anchorfile>classoperations__research_1_1ArrayWithOffset.html</anchorfile>
      <anchor>ade4331eb679d14fc9b17ee6e30372993</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1ArrayWithOffset.html</anchorfile>
      <anchor>a8863e9c3396d82c7f8af68d9711a4599</anchor>
      <arglist>(int64 index, T value)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1ArrayWithOffset.html</anchorfile>
      <anchor>ae3389cbd1f1f47c3c0ba0d8c9d98c8d2</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Assignment</name>
    <filename>classoperations__research_1_1Assignment.html</filename>
    <base>operations_research::PropagationBaseObject</base>
    <member kind="typedef">
      <type>AssignmentContainer&lt; IntVar, IntVarElement &gt;</type>
      <name>IntContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a8f1f48670d847343b04f8bacd77686e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AssignmentContainer&lt; IntervalVar, IntervalVarElement &gt;</type>
      <name>IntervalContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab8f7d613cbf4ee63e39460698d3a46b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AssignmentContainer&lt; SequenceVar, SequenceVarElement &gt;</type>
      <name>SequenceContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a094bbb476dd216af27921dcb30ee5303</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Assignment</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a54a6c970300c41c108c0ea9634d6cfa7</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Assignment</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ac1cb35f70f4f534716957a5ac9b381f4</anchor>
      <arglist>(const Assignment *const copy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Assignment</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a676bfc6bcaf0a4866b511c82fd47c420</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a95769d12b65e9e41966f082e6be717e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad89ba9e1f4d98d3a3b2bb5d97bd1e8bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a8c6ea345dae471d30d83faeef85f61cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumIntVars</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a607ab1726c4a6ae603e3645084ae96b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumIntervalVars</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a8341278b341fb7888adf8cdde439dfa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumSequenceVars</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>abc1a433b3e54e2fa0aef6925f83d43b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a7eb289b0a73f7cdb6296c26f485eb69e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a17a5e13f2f630fd1566794ac31087fb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Load</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a3b43a5bec63b40d16227469fa213cb18</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Load</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad0e1c1e364817d29b49def87e42942e5</anchor>
      <arglist>(File *file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Load</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aa12ff68b3fe5256080f06e9dc47cd1bf</anchor>
      <arglist>(const AssignmentProto &amp;assignment_proto)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Save</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>af0aa8d715cd8daf2fdc0dc6ebd1f5abb</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Save</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a18d25283cdf3f31ad33c05c6e9d73840</anchor>
      <arglist>(File *file) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Save</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a044f5e030695302807e757fcbb648948</anchor>
      <arglist>(AssignmentProto *const assignment_proto) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddObjective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>adae0600f8be577e57febc34f92d59203</anchor>
      <arglist>(IntVar *const v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearObjective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae2c61aed5346bd04a91421c70861d918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Objective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a507e861514fe3fdc9313406ba25b7443</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasObjective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a31c577d3e5dbbf7a90f5b1955660642c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>ObjectiveMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a51dadd0690d4db9d75d1f8616f2742d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>ObjectiveMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a47d98f9809485d149e9537e1afb1d6fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>ObjectiveValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a6eb497a20a19617c926afffe531654b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ObjectiveBound</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a57610548a8daffff880539eec24df109</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetObjectiveMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a5dbf21225962af3db13d216174989608</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetObjectiveMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a95bd74b66ab1626c7d7cb8b4c083463f</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetObjectiveValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab9f7970e317fa45b497c484a00485b1f</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetObjectiveRange</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a403ddf341e288433672bedb08c322963</anchor>
      <arglist>(int64 l, int64 u)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad71780560faa8a12413e6007c636c104</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>af5ddb7fd6be53f8a7673e9f02f8116c6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a11c9545171ef35516112a3f9b49484b7</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a272ed05b871564c3ab8034010901d068</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aadef912e9222db3003405f7b60492dce</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a91dba370f181ba0f0ca98992aaeb59d6</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a0e75f7efda75c27cdec0baa19c2803d1</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a117e51bab95cb5e42af11f97448c6d29</anchor>
      <arglist>(const IntVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a5c741487249c9eb1805e33285873c240</anchor>
      <arglist>(const IntVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ac0c8bfa3cf5460476327b1360783e29d</anchor>
      <arglist>(const IntVar *const var, int64 l, int64 u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad98cd25d71c9c8c2e98aab3866372a85</anchor>
      <arglist>(const IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a130169aa9a791d2f5534e5802c980c7e</anchor>
      <arglist>(IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>af99d85c1ebbb2482ae7f85dd59832013</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>abdae8b188272df57b2ef9723d241a176</anchor>
      <arglist>(IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a06215150a658d6f23e352df8e2edadc5</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a6e45377849d24ceb498ec05f3bb146e1</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a7530f8bd8c4e7153cae4e5245b28b0d9</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a95e429f9bc2b17b436f68f16bd184a4c</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>abf92c871da428f03cd4ad14853860721</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a0fc43c0f1a567725de7ac83cc86bde8f</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab8d2e00eb03cec613c05eaf9ad6da646</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aaee3eb3af912875dc367679f64d65a3b</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a5251224150b99f3458c7bc494ba9d193</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a02f7cd678fb793a4cedbaa11f1904e32</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a6e3a7428eea94e102ed7c7335f551b52</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ac3cbe166fe2619e72c729e18ee245eac</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae6f3b7ad8f6360c12d1b459cb5cefe59</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a8898f5457ee277d6365c9d01ef6e66ab</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartRange</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a846c66e60add2d3116f6080694492c55</anchor>
      <arglist>(const IntervalVar *const var, int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>af77457fc093a5cca3be6a1b56e2bc028</anchor>
      <arglist>(const IntervalVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a470a8ff6d426b41ce7b4cefbd7de8d6d</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aa52aacc34b2380d2b649983ac5c1c7fd</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationRange</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a514977300d99309ea09e80365ce54dca</anchor>
      <arglist>(const IntervalVar *const var, int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a3388a6269c91d6ec8b8edc5556d5a544</anchor>
      <arglist>(const IntervalVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a7e88fb7a9da71421cb4a67eb1f81a24e</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a157b6b9a936699c80f515accdf1bd422</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndRange</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a77552a8028118507b948e06dd8d5e879</anchor>
      <arglist>(const IntervalVar *const var, int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae52a3d79c5e89b8661928c6439d9e107</anchor>
      <arglist>(const IntervalVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a93c0e33825a1d8ef903b34a443b281b2</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a866caecff7e07d15a7771d26fcb3b995</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedRange</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab74b8ac19e3a0c418636b841ba551c1a</anchor>
      <arglist>(const IntervalVar *const var, int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>addd13c37ed68173aab91b87925f76e61</anchor>
      <arglist>(const IntervalVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>abf20633cc3fd8eb3262cd5eac9f8fe8b</anchor>
      <arglist>(SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab216a01981cb07c26a2cd5e5b5b3c574</anchor>
      <arglist>(const std::vector&lt; SequenceVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aeddb97ff376e95548afc629fd7720387</anchor>
      <arglist>(SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>ForwardSequence</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a240108b6b72b6f8ea4a479095b36504b</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>BackwardSequence</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab4a9176237aaf2e3b50196cf4726757a</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>Unperformed</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a47c48e2669dce44002b0c618273bddfe</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSequence</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab6d8cf1dcb0f18656622e325be57e9e8</anchor>
      <arglist>(const SequenceVar *const var, const std::vector&lt; int &gt; &amp;forward_sequence, const std::vector&lt; int &gt; &amp;backward_sequence, const std::vector&lt; int &gt; &amp;unperformed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForwardSequence</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad613991e451593b83b35081635d1fca6</anchor>
      <arglist>(const SequenceVar *const var, const std::vector&lt; int &gt; &amp;forward_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBackwardSequence</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad1746f20b39f1db633bb4781bedf05b7</anchor>
      <arglist>(const SequenceVar *const var, const std::vector&lt; int &gt; &amp;backward_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUnperformed</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab9ab90406aa4d66b882c1e873ce76c48</anchor>
      <arglist>(const SequenceVar *const var, const std::vector&lt; int &gt; &amp;unperformed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>af6e5490427e0fba93541ce64812af7ff</anchor>
      <arglist>(const IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a7d783636fe1d998f40ef05ac2b007f77</anchor>
      <arglist>(const IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a2ae9fa6611914148091bc9088fbd14e6</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad70c52f1150ba7ed487420845f117541</anchor>
      <arglist>(const IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aaebd87f4da9bbbeebd677fe83c8cd939</anchor>
      <arglist>(const IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a149aa46c3a234581162d68b2c6e64671</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a0576a040a8e1627cd8430d58780c2dc8</anchor>
      <arglist>(const SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae388b9094a9fc079091bedccd764796c</anchor>
      <arglist>(const SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aa557e7fbf011848be236254ce97d603b</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ActivateObjective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>add93a1a7265307e0915276d5d3645a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeactivateObjective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab5bba882c8c44098d624f9c17b3dc0b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ActivatedObjective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a808d1e2da8133bc44f693e87e5584bfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a709bad20694c9c117a3abfff24a60d03</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllElementsBound</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a75637e828b93b922f924b532c6bdf980</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a7ac7a68050caf1046a8f299d597e85b1</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a18fd0cec48cbde4d1621139313bffab0</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aa4e725a0d14583aa3dda4caf1465f991</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyIntersection</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad6ab5aff03cb66b05fcbdff43dde169a</anchor>
      <arglist>(const Assignment *assignment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a8640e47c57ef2d95a6c94d383a9641a4</anchor>
      <arglist>(const Assignment *assignment)</arglist>
    </member>
    <member kind="function">
      <type>const IntContainer &amp;</type>
      <name>IntVarContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae8af25911cdd4091cd6a0ec08c9a38c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntContainer *</type>
      <name>MutableIntVarContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae51ad783156fb9ec65af38a8d234a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntervalContainer &amp;</type>
      <name>IntervalVarContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad18a61ff8de4c3e7ec78a7e12a480af3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntervalContainer *</type>
      <name>MutableIntervalVarContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a9ffb2e99804d31214d9d23e1f200e85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SequenceContainer &amp;</type>
      <name>SequenceVarContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a40c0b89a06e6341fe2155f38ac1ceede</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SequenceContainer *</type>
      <name>MutableSequenceVarContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a8c613fab3bb57fb3ec18a55a11eee8b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a481f3887a70f86eb37968ee8909267f4</anchor>
      <arglist>(const Assignment &amp;assignment) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae285dcf4a5f8b6a28a9a6f5ed7b3e93d</anchor>
      <arglist>(const Assignment &amp;assignment) const</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::AssignmentContainer</name>
    <filename>classoperations__research_1_1AssignmentContainer.html</filename>
    <templarg>V</templarg>
    <templarg>E</templarg>
    <member kind="function">
      <type></type>
      <name>AssignmentContainer</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>af793fb6edd1488935eabba836ee8a76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab4270afda9d688e9132eb95fc9207ae2</anchor>
      <arglist>(V *var)</arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aa162c36af0d0d536c3cda267a2dac1cc</anchor>
      <arglist>(V *var)</arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>AddAtPosition</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a45d4fca065881a70fe4598dd5f91094c</anchor>
      <arglist>(V *var, int position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aae1c4d5b0bb21f3f53d7bd5f06635bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a144d9ee58d069b6f1863b2827085143f</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a877eabf96eaacfd5acee79411af3de22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyIntersection</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a716629cdc52bf32755b737c4ab1b1cad</anchor>
      <arglist>(const AssignmentContainer&lt; V, E &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a3e1c65f80f5da3371c10938c120fb984</anchor>
      <arglist>(const AssignmentContainer&lt; V, E &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab5bed5190537df6740bef2bede2814e6</anchor>
      <arglist>(const V *const var) const</arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a2f617e7ec317b5dab5b29213dd48950f</anchor>
      <arglist>(const V *const var)</arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>MutableElementOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a0f61a14dec7c5c955e2ec624a099d3ec</anchor>
      <arglist>(const V *const var)</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aaf8cce923cb7cfc1aa15c6f0b0f7820e</anchor>
      <arglist>(const V *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const E *</type>
      <name>ElementPtrOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a4d04b95d5dd08e9c6466eea81801d931</anchor>
      <arglist>(const V *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; E &gt; &amp;</type>
      <name>elements</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ae5f07b17110a4860e1801c0f6254e4a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a252f023ff4bc155319812ef86b5356a4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aabf4caa6a1427778f66aafbfea546b43</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a088429aaba219da2c92f9abbdaaa906d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac4fc0cfe7060f5cf2e37c03b7b9a0b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac376aeb350b04f9b4876dfd9284a2c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllElementsBound</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a37197e2028382d8987a41c9ac84ed7f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a6a50632530dfd8c9a55a5134bdee9cb4</anchor>
      <arglist>(const AssignmentContainer&lt; V, E &gt; &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a5750f450575a30e8a539ecf7b2e89f18</anchor>
      <arglist>(const AssignmentContainer&lt; V, E &gt; &amp;container) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AssignmentContainer&lt; IntervalVar, IntervalVarElement &gt;</name>
    <filename>classoperations__research_1_1AssignmentContainer.html</filename>
    <member kind="function">
      <type></type>
      <name>AssignmentContainer</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>af793fb6edd1488935eabba836ee8a76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab4270afda9d688e9132eb95fc9207ae2</anchor>
      <arglist>(IntervalVar *var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aa162c36af0d0d536c3cda267a2dac1cc</anchor>
      <arglist>(IntervalVar *var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>AddAtPosition</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a45d4fca065881a70fe4598dd5f91094c</anchor>
      <arglist>(IntervalVar *var, int position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aae1c4d5b0bb21f3f53d7bd5f06635bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a144d9ee58d069b6f1863b2827085143f</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a877eabf96eaacfd5acee79411af3de22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyIntersection</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a716629cdc52bf32755b737c4ab1b1cad</anchor>
      <arglist>(const AssignmentContainer&lt; IntervalVar, IntervalVarElement &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a3e1c65f80f5da3371c10938c120fb984</anchor>
      <arglist>(const AssignmentContainer&lt; IntervalVar, IntervalVarElement &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab5bed5190537df6740bef2bede2814e6</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a2f617e7ec317b5dab5b29213dd48950f</anchor>
      <arglist>(const IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a252f023ff4bc155319812ef86b5356a4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>MutableElementOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a0f61a14dec7c5c955e2ec624a099d3ec</anchor>
      <arglist>(const IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>const IntervalVarElement &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aaf8cce923cb7cfc1aa15c6f0b0f7820e</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const IntervalVarElement &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aabf4caa6a1427778f66aafbfea546b43</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const IntervalVarElement *</type>
      <name>ElementPtrOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a4d04b95d5dd08e9c6466eea81801d931</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntervalVarElement &gt; &amp;</type>
      <name>elements</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ae5f07b17110a4860e1801c0f6254e4a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a088429aaba219da2c92f9abbdaaa906d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac4fc0cfe7060f5cf2e37c03b7b9a0b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac376aeb350b04f9b4876dfd9284a2c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllElementsBound</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a37197e2028382d8987a41c9ac84ed7f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a6a50632530dfd8c9a55a5134bdee9cb4</anchor>
      <arglist>(const AssignmentContainer&lt; IntervalVar, IntervalVarElement &gt; &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a5750f450575a30e8a539ecf7b2e89f18</anchor>
      <arglist>(const AssignmentContainer&lt; IntervalVar, IntervalVarElement &gt; &amp;container) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AssignmentContainer&lt; IntVar, IntVarElement &gt;</name>
    <filename>classoperations__research_1_1AssignmentContainer.html</filename>
    <member kind="function">
      <type></type>
      <name>AssignmentContainer</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>af793fb6edd1488935eabba836ee8a76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab4270afda9d688e9132eb95fc9207ae2</anchor>
      <arglist>(IntVar *var)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aa162c36af0d0d536c3cda267a2dac1cc</anchor>
      <arglist>(IntVar *var)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>AddAtPosition</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a45d4fca065881a70fe4598dd5f91094c</anchor>
      <arglist>(IntVar *var, int position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aae1c4d5b0bb21f3f53d7bd5f06635bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a144d9ee58d069b6f1863b2827085143f</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a877eabf96eaacfd5acee79411af3de22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyIntersection</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a716629cdc52bf32755b737c4ab1b1cad</anchor>
      <arglist>(const AssignmentContainer&lt; IntVar, IntVarElement &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a3e1c65f80f5da3371c10938c120fb984</anchor>
      <arglist>(const AssignmentContainer&lt; IntVar, IntVarElement &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab5bed5190537df6740bef2bede2814e6</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a2f617e7ec317b5dab5b29213dd48950f</anchor>
      <arglist>(const IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a252f023ff4bc155319812ef86b5356a4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>MutableElementOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a0f61a14dec7c5c955e2ec624a099d3ec</anchor>
      <arglist>(const IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>const IntVarElement &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aaf8cce923cb7cfc1aa15c6f0b0f7820e</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const IntVarElement &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aabf4caa6a1427778f66aafbfea546b43</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const IntVarElement *</type>
      <name>ElementPtrOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a4d04b95d5dd08e9c6466eea81801d931</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVarElement &gt; &amp;</type>
      <name>elements</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ae5f07b17110a4860e1801c0f6254e4a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a088429aaba219da2c92f9abbdaaa906d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac4fc0cfe7060f5cf2e37c03b7b9a0b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac376aeb350b04f9b4876dfd9284a2c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllElementsBound</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a37197e2028382d8987a41c9ac84ed7f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a6a50632530dfd8c9a55a5134bdee9cb4</anchor>
      <arglist>(const AssignmentContainer&lt; IntVar, IntVarElement &gt; &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a5750f450575a30e8a539ecf7b2e89f18</anchor>
      <arglist>(const AssignmentContainer&lt; IntVar, IntVarElement &gt; &amp;container) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AssignmentContainer&lt; SequenceVar, SequenceVarElement &gt;</name>
    <filename>classoperations__research_1_1AssignmentContainer.html</filename>
    <member kind="function">
      <type></type>
      <name>AssignmentContainer</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>af793fb6edd1488935eabba836ee8a76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab4270afda9d688e9132eb95fc9207ae2</anchor>
      <arglist>(SequenceVar *var)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aa162c36af0d0d536c3cda267a2dac1cc</anchor>
      <arglist>(SequenceVar *var)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>AddAtPosition</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a45d4fca065881a70fe4598dd5f91094c</anchor>
      <arglist>(SequenceVar *var, int position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aae1c4d5b0bb21f3f53d7bd5f06635bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a144d9ee58d069b6f1863b2827085143f</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a877eabf96eaacfd5acee79411af3de22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyIntersection</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a716629cdc52bf32755b737c4ab1b1cad</anchor>
      <arglist>(const AssignmentContainer&lt; SequenceVar, SequenceVarElement &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a3e1c65f80f5da3371c10938c120fb984</anchor>
      <arglist>(const AssignmentContainer&lt; SequenceVar, SequenceVarElement &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab5bed5190537df6740bef2bede2814e6</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a2f617e7ec317b5dab5b29213dd48950f</anchor>
      <arglist>(const SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a252f023ff4bc155319812ef86b5356a4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>MutableElementOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a0f61a14dec7c5c955e2ec624a099d3ec</anchor>
      <arglist>(const SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>const SequenceVarElement &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aaf8cce923cb7cfc1aa15c6f0b0f7820e</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const SequenceVarElement &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aabf4caa6a1427778f66aafbfea546b43</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const SequenceVarElement *</type>
      <name>ElementPtrOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a4d04b95d5dd08e9c6466eea81801d931</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; SequenceVarElement &gt; &amp;</type>
      <name>elements</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ae5f07b17110a4860e1801c0f6254e4a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a088429aaba219da2c92f9abbdaaa906d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac4fc0cfe7060f5cf2e37c03b7b9a0b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac376aeb350b04f9b4876dfd9284a2c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllElementsBound</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a37197e2028382d8987a41c9ac84ed7f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a6a50632530dfd8c9a55a5134bdee9cb4</anchor>
      <arglist>(const AssignmentContainer&lt; SequenceVar, SequenceVarElement &gt; &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a5750f450575a30e8a539ecf7b2e89f18</anchor>
      <arglist>(const AssignmentContainer&lt; SequenceVar, SequenceVarElement &gt; &amp;container) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::AssignmentElement</name>
    <filename>classoperations__research_1_1AssignmentElement.html</filename>
    <member kind="function">
      <type></type>
      <name>AssignmentElement</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a72b7c59e2cb99e623dff415ad129aa07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a065f45865ec10318174fad87f6b00075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a878af7bb76cdf04d84eb523d6deeb696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>aaa91977feff42f876d7cd00556ab94f7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::AutomatonConstraint</name>
    <filename>classoperations__research_1_1sat_1_1AutomatonConstraint.html</filename>
    <base>operations_research::sat::Constraint</base>
    <member kind="function">
      <type>void</type>
      <name>AddTransition</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraint.html</anchorfile>
      <anchor>a4fa8634eeba27c91397c58105ff50eb7</anchor>
      <arglist>(int tail, int head, int64 transition_label)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9052e9e1dd8248433909b5542f314add</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; literals)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>ab6457905c9a8cd1c5f92738d57e6f298</anchor>
      <arglist>(BoolVar literal)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>WithName</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9401ab195650160402df5b61f8ac9bda</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aeaf30f4ee7d141e68905f1ac2432b937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintProto &amp;</type>
      <name>Proto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aa0b277df64333f670b66c8d5295b8250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstraintProto *</type>
      <name>MutableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>acaa17b2fbfd62f6845329ae944835654</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstraintProto *</type>
      <name>proto_</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9d74c3d77f601020ab87700745f830ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CpModelBuilder</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraint.html</anchorfile>
      <anchor>ae04c85577cf33a05fb50bb361877fb42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::AutomatonConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>AutomatonConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a2ce37e9a01698c28e3918fea2380b34a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AutomatonConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a2bcaf0024a666930de570132899432f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AutomatonConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a55f2533461576fb4106ce5e8c79e712e</anchor>
      <arglist>(const AutomatonConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>AutomatonConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>acb72109275f0bbd30408de1bcf0eeacc</anchor>
      <arglist>(const AutomatonConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a0aa92588fd47a629b96696e25dd6300b</anchor>
      <arglist>(AutomatonConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>AutomatonConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>aff155b45acfb3df83388e54a20b84420</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>AutomatonConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ac9c293fb6841816d4911c2f1290e1754</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a19b7f343b8d97295cd1669c93cbec5f2</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a40dd164a5aebba8849cccdc52b0a2f4b</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a15b619d6ee471826fa715465ae242ae4</anchor>
      <arglist>(const AutomatonConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>aaa030cd3ff45507264753f8b0b10d252</anchor>
      <arglist>(const AutomatonConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a9a044943acecb41edd5ea95d6b321ed9</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a8878a085c2b4478c553749bac6725edc</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a951d2ca862980a508c22c5e0308278d9</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>aab3fb4fe814c6edcba5e71d8fdfaa63b</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a006fe8a819c993ad062c8d4bd18083dc</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ad34c59148c5364923d67f967682cea4d</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ad3328ed391a2d36ad716d60d910bcdb3</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ad94224e07479c7e60dbe62515a3ff409</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>final_states_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ac99e1afae75590e25d661f1137da0ba8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_final_states</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a7083c52be05ded4ea61e630caa50bc4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>final_states</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a7608e2255874168b59392f72cb753447</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_final_states</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a80ed7ff85b8efd1815d86586068c4b76</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_final_states</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a0dff0dadcfc0fa8c28c8ac1fa094b778</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>final_states</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a043b5f8d4dced524e49a99b4a53fa07f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_final_states</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a32c8de8beacb484cff5d46efba7ee59c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>transition_tail_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>add75ec952b964800c3a18adb171d09ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_transition_tail</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a95b5195c56298dbfae5f770ed360a341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>transition_tail</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>aa7d0d3d3943614c389782d117262f1e6</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_transition_tail</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a96e3c98ba5837f23106681f0db79560e</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_transition_tail</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a59b9541b95f5f3f798dbecd104e31a11</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>transition_tail</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>adf3352df0fdb68b199240d941a2acb47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_transition_tail</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a4c04bcfc62345b462205b2779600d9f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>transition_head_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a6728dfcf5656948276eb264330581fd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_transition_head</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a14890736d4144d5d0500007c66c250f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>transition_head</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ade960984611c1148c2bf4d8d33c661b2</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_transition_head</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a8f85400789546a6557933cd3d4544118</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_transition_head</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a58a98d5c7fd069b1b2951b8239db3006</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>transition_head</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a31a2f332cf3239dc51b35c8fd4c085d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_transition_head</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a40d46599946d091ddaed7d1b8a4c0ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>transition_label_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>acfe5b84916bdea1c88761d9313af37e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_transition_label</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a03d458adcd99f56890b91bdafd07933f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>transition_label</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a43b569d25ec0ab27d4b422c67e26dc0b</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_transition_label</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ac9244949573e2ed7874c351cae0b07e2</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_transition_label</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a073dbd97e67b045e5a92e5e3839be2b5</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>transition_label</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a801d47702cc27485643dba6b9c342429</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_transition_label</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a01636f4466914de4f4faaeed4be942e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vars_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a53a302dce7c81b492f48e64d181fdb63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a2bd463b949a988e39d0d48b557c1ba67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ace455118d811041fc43444902f78cfc0</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a70a7ca8986dd225fbf8f4b88835f98e8</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ae831863cb9f82a9ec4ac78ae8d2eabee</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ac080d419e3df06c0e526c304be0398ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a1eff50f92f57709e19816fe5eb38c3d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_starting_state</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>acb7af1f1b3e2085c4fc287d24c969927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>starting_state</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a4f0070663b33142e48c4d67622bec0b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_starting_state</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ab967d11422ab695be4918379f20b70d0</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a3c88a9d69667ec90b35c18c3869e9536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const AutomatonConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a55d75e066622788e5c181dac8c008bc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ae0e9c59d0fb6ecfedba625909970b89a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const AutomatonConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ab01d12ceba022e6cbac43b994e2f989e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a387ca7a7c92210a71e8c77629eadd560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kFinalStatesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a2b50dfa699e33a00007187246d440403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTransitionTailFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a79a4872e3a0d000ff7a62b728f0be592</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTransitionHeadFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>aec94b3112b64bf15d42a2f06d3cd58fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTransitionLabelFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>ad42d3c684b92af8eb39541c92976479d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a499c2db091213dae28610e24433d5667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kStartingStateFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>a7f92fefd240bd66168e393acaa6c4d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1AutomatonConstraintProto.html</anchorfile>
      <anchor>afe5304b03b26f7f806e85d9af6e439ab</anchor>
      <arglist>(AutomatonConstraintProto &amp;a, AutomatonConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::BaseGraph</name>
    <filename>classutil_1_1BaseGraph.html</filename>
    <templarg>NodeIndexType</templarg>
    <templarg>ArcIndexType</templarg>
    <templarg>HasReverseArcs</templarg>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>adb271cf4bcf2de5b5bbe300d7054af29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0eba6e5899924388644dfa2258ae8929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseGraph</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab2aa905e49f98689100f071c493d20fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseGraph</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad2353019d9890202a2220fd230940fb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0f551c921fa0b5aaa334a6e36f61db4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aefb468e4d4a3128c91b3bad9f5b314c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; NodeIndex &gt;</type>
      <name>AllNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a32ba4a5ca9a4b89f750eb2dc56518b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndex &gt;</type>
      <name>AllForwardArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abcfd7c21143e5ed38573c0dd60826dd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abf853acea86e01356f53055f77661770</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a2097ccda3b1ad27e2c82166979018bda</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>node_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a463d57480c9563a7a707c5d0928c9946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>arc_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a92ffd852b2ab2e5241f9832e71a2de71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReserveNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a69a71cbb575b13bde9899f5a6a217139</anchor>
      <arglist>(NodeIndexType bound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReserveArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a9563f7154a759843923dd9bb27b288e7</anchor>
      <arglist>(ArcIndexType bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab731ca5c638e7b1b0a2c459c94a90f55</anchor>
      <arglist>(NodeIndexType node_capacity, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeCapacities</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa3bd051d1e141b09dda17aa9b5f24f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a07214b96597069d781e27b1dd17ef83e</anchor>
      <arglist>(const A &amp;a, B *b)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a346b8a5811f0e287e1ebce2de2c1ad28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab1292c82a3f43be3bd57b63a05fe0214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad5b77846f77c2771e840820812ad5521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeCumulativeSum</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ac47030fcb75a3220f8cf9ed79697056e</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BuildStartAndForwardHead</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a63fd586eed6c345866317e2f0faf377e</anchor>
      <arglist>(SVector&lt; NodeIndexType &gt; *head, std::vector&lt; ArcIndexType &gt; *start, std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a473db46afec1eabf0762411830dee30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>node_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a424bd34a9767e7edeaf3a60ecd3cb000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>af16f99d41856a7b22ae8a226ef09abff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>arc_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a895e891d1ad52ce3efcfeb7ba11194c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>const_capacities_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa980e5526b9ded17a83928fc339c71e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseGraph&lt; NodeIndexType, ArcIndexType, false &gt;</name>
    <filename>classutil_1_1BaseGraph.html</filename>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>adb271cf4bcf2de5b5bbe300d7054af29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0eba6e5899924388644dfa2258ae8929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseGraph</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab2aa905e49f98689100f071c493d20fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseGraph</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad2353019d9890202a2220fd230940fb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0f551c921fa0b5aaa334a6e36f61db4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aefb468e4d4a3128c91b3bad9f5b314c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; NodeIndex &gt;</type>
      <name>AllNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a32ba4a5ca9a4b89f750eb2dc56518b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndex &gt;</type>
      <name>AllForwardArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abcfd7c21143e5ed38573c0dd60826dd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abf853acea86e01356f53055f77661770</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a2097ccda3b1ad27e2c82166979018bda</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>node_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a463d57480c9563a7a707c5d0928c9946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>arc_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a92ffd852b2ab2e5241f9832e71a2de71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReserveNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a69a71cbb575b13bde9899f5a6a217139</anchor>
      <arglist>(NodeIndexType bound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReserveArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a9563f7154a759843923dd9bb27b288e7</anchor>
      <arglist>(ArcIndexType bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab731ca5c638e7b1b0a2c459c94a90f55</anchor>
      <arglist>(NodeIndexType node_capacity, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeCapacities</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa3bd051d1e141b09dda17aa9b5f24f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a07214b96597069d781e27b1dd17ef83e</anchor>
      <arglist>(const A &amp;a, B *b)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a346b8a5811f0e287e1ebce2de2c1ad28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab1292c82a3f43be3bd57b63a05fe0214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad5b77846f77c2771e840820812ad5521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeCumulativeSum</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ac47030fcb75a3220f8cf9ed79697056e</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BuildStartAndForwardHead</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a63fd586eed6c345866317e2f0faf377e</anchor>
      <arglist>(SVector&lt; NodeIndexType &gt; *head, std::vector&lt; ArcIndexType &gt; *start, std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a473db46afec1eabf0762411830dee30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>node_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a424bd34a9767e7edeaf3a60ecd3cb000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>af16f99d41856a7b22ae8a226ef09abff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>arc_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a895e891d1ad52ce3efcfeb7ba11194c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>const_capacities_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa980e5526b9ded17a83928fc339c71e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseGraph&lt; NodeIndexType, ArcIndexType, true &gt;</name>
    <filename>classutil_1_1BaseGraph.html</filename>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>adb271cf4bcf2de5b5bbe300d7054af29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0eba6e5899924388644dfa2258ae8929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseGraph</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab2aa905e49f98689100f071c493d20fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseGraph</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad2353019d9890202a2220fd230940fb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0f551c921fa0b5aaa334a6e36f61db4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aefb468e4d4a3128c91b3bad9f5b314c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; NodeIndex &gt;</type>
      <name>AllNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a32ba4a5ca9a4b89f750eb2dc56518b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndex &gt;</type>
      <name>AllForwardArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abcfd7c21143e5ed38573c0dd60826dd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abf853acea86e01356f53055f77661770</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a2097ccda3b1ad27e2c82166979018bda</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>node_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a463d57480c9563a7a707c5d0928c9946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>arc_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a92ffd852b2ab2e5241f9832e71a2de71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReserveNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a69a71cbb575b13bde9899f5a6a217139</anchor>
      <arglist>(NodeIndexType bound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReserveArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a9563f7154a759843923dd9bb27b288e7</anchor>
      <arglist>(ArcIndexType bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab731ca5c638e7b1b0a2c459c94a90f55</anchor>
      <arglist>(NodeIndexType node_capacity, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeCapacities</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa3bd051d1e141b09dda17aa9b5f24f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a07214b96597069d781e27b1dd17ef83e</anchor>
      <arglist>(const A &amp;a, B *b)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a346b8a5811f0e287e1ebce2de2c1ad28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab1292c82a3f43be3bd57b63a05fe0214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad5b77846f77c2771e840820812ad5521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeCumulativeSum</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ac47030fcb75a3220f8cf9ed79697056e</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BuildStartAndForwardHead</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a63fd586eed6c345866317e2f0faf377e</anchor>
      <arglist>(SVector&lt; NodeIndexType &gt; *head, std::vector&lt; ArcIndexType &gt; *start, std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a473db46afec1eabf0762411830dee30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>node_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a424bd34a9767e7edeaf3a60ecd3cb000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>af16f99d41856a7b22ae8a226ef09abff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>arc_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a895e891d1ad52ce3efcfeb7ba11194c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>const_capacities_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa980e5526b9ded17a83928fc339c71e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::BaseIntExpr</name>
    <filename>classoperations__research_1_1BaseIntExpr.html</filename>
    <base>operations_research::IntExpr</base>
    <member kind="function">
      <type></type>
      <name>BaseIntExpr</name>
      <anchorfile>classoperations__research_1_1BaseIntExpr.html</anchorfile>
      <anchor>ad7d12cdfcb4b9340db0ea792b5545419</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BaseIntExpr</name>
      <anchorfile>classoperations__research_1_1BaseIntExpr.html</anchorfile>
      <anchor>a92036e166d6a3a89c23d7f77840f7f5c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1BaseIntExpr.html</anchorfile>
      <anchor>a1482a8f4291d806dc98deaf586777f0a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntVar *</type>
      <name>CastToVar</name>
      <anchorfile>classoperations__research_1_1BaseIntExpr.html</anchorfile>
      <anchor>ac03c6f867b7e567f25a14a9e0c49a04b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a58d589131cbea30d4826248a2fa06aba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>afec5a6eea8ee64fbc7fa34d7d28f8d8f</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1fb9e08cff06a9a5b5739de4acba587c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>adee9a082160df545671781df47f2b985</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Range</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a07b522d73ebcc17ebc1b480d181627f1</anchor>
      <arglist>(int64 *l, int64 *u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a153843dc05670b540a8e83dba2043eb0</anchor>
      <arglist>(int64 l, int64 u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a8889930ed76665b0f24f12df2ed4e05c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a13e126985026936fe8da212d2e377236</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsVar</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a4bb288e8b397020398b1184047587f01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>VarWithName</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1de04a321f16e9cdc50bbec78e1adbf7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a845a3c3c71323504f6b59f9c0ea46b08</anchor>
      <arglist>(Demon *d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a4b35ce14dbdbd3df0d20af5b708288f8</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a6d21b7e60b50a18a1591de348da6563e</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>aa573e0d34def6539f939b4b81d506164</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ae5b6f8cb73c1b76da152ad612f91c4ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::BaseLns</name>
    <filename>classoperations__research_1_1BaseLns.html</filename>
    <base>operations_research::IntVarLocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>BaseLns</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>ab86ba3827c156713a060c3dc3386a440</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BaseLns</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>a570a094915d4923b09b4d1572bb0c5b3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>InitFragments</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>a9d18ce7a9e739df8e4e48550616e7985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>NextFragment</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>ad86de5fe7fa58d23b953923ff1c60ef2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AppendToFragment</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>a064f23839b17ce88e9c299c98c85efdc</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FragmentSize</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>acfc31fcffe1be7d082d23d3260a6c1eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>a4d8adbee4dc4ff4795904ef4e817a5f2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>abbf605907da7a213cfeef822a7290c53</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::BaseObject</name>
    <filename>classoperations__research_1_1BaseObject.html</filename>
    <member kind="function">
      <type></type>
      <name>BaseObject</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>abcf5669a8a0612adb1665e276efb416f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseObject</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>a9bd95fcee9e5856c6097b5dfae0b7076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LinearSumAssignment::BipartiteLeftNodeIterator</name>
    <filename>classoperations__research_1_1LinearSumAssignment_1_1BipartiteLeftNodeIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>BipartiteLeftNodeIterator</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment_1_1BipartiteLeftNodeIterator.html</anchorfile>
      <anchor>afba2834f3d7371e144baf2b197e91531</anchor>
      <arglist>(const GraphType &amp;graph, NodeIndex num_left_nodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BipartiteLeftNodeIterator</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment_1_1BipartiteLeftNodeIterator.html</anchorfile>
      <anchor>aa8fc1a4359689fce936304944920dcd9</anchor>
      <arglist>(const LinearSumAssignment &amp;assignment)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>Index</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment_1_1BipartiteLeftNodeIterator.html</anchorfile>
      <anchor>a6d8310143b745dc4e1ddb43ccf67b495</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment_1_1BipartiteLeftNodeIterator.html</anchorfile>
      <anchor>aaaf694760ebdabb160b78fb2a21fbd38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment_1_1BipartiteLeftNodeIterator.html</anchorfile>
      <anchor>ae9da472542deee8fc78fc2ce4bfc2f15</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::BoolArgumentProto</name>
    <filename>classoperations__research_1_1sat_1_1BoolArgumentProto.html</filename>
    <member kind="function">
      <type></type>
      <name>BoolArgumentProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>aa6d7164d8f0e2932c3f5e9f19074f744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoolArgumentProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a358ed03085bd4ed48d3504ceff622780</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoolArgumentProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>ad3578c907f4521c8e9677d6868b9427d</anchor>
      <arglist>(const BoolArgumentProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>BoolArgumentProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a9bb2617efbb9575da8fc1d4cf01af39f</anchor>
      <arglist>(const BoolArgumentProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a3914a36d19690e3df25bb7b4e7ed1c79</anchor>
      <arglist>(BoolArgumentProto *other)</arglist>
    </member>
    <member kind="function">
      <type>BoolArgumentProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a43d3bfd3136b34018452bbddcb96d030</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>BoolArgumentProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>ad71453c1e6cf339ee64682c236414895</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>add1109346f6be8042ba61c50d9a1693c</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a7cd712133e4d51f544270bbc03043bc6</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>ae8c1b738c76f2366fc317e7c092df9c1</anchor>
      <arglist>(const BoolArgumentProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a29ceab5bb3c648acf7cf73cb8322e8e8</anchor>
      <arglist>(const BoolArgumentProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a15cad7b5f5252937821fd4d6d9f9b2f4</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>af787de2b844643c16104056bf79ab97b</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>aae91c259f6cd19cf9251bd5ff5870f0b</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a0ed2d0310bea9145b889990c36ea6407</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>acf1bd48d0a8e0a45f0ca59be3c9176af</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a1bcc5e52d8ab9d48de1e58857b7207bb</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>afe0fff5867a98c14d6d29ba4720071ce</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a88a222d89d9c63750694affc2a16a369</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>literals_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a81914ffb56d793ba98c8633026bd8cf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a5256bdb96599195f9b9271412b0a48fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a3f16f613b34bcf50af48d7485ebb35c1</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>adfdf82f30184efad642acf6159fcfe9a</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a749ebb82bf43204a4e1ea9cb17c533cc</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a73001359fb4c2ea4644c08122967b05b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a40332ca462fb011f1a83a39295e9b630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>aa7da3152a8f00b1cbd80cb886bce1db2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BoolArgumentProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a17325964be2cd6a3cc1ec1d2f9652107</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a7bd57a2b7a336d7e53b36212fcb5c834</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BoolArgumentProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a1e56fdb95df22a4766a67ae9bbb61591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a07c8eb97a8c1865d856c6600728251f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLiteralsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a264798808af6ae84c09a6f047980025b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolArgumentProto.html</anchorfile>
      <anchor>a5de194fae79eeb9b54d960d21d113787</anchor>
      <arglist>(BoolArgumentProto &amp;a, BoolArgumentProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::BooleanVar</name>
    <filename>classoperations__research_1_1BooleanVar.html</filename>
    <base>operations_research::IntVar</base>
    <member kind="function">
      <type></type>
      <name>BooleanVar</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>aad74139cfb563933bf9ecdaf6e50d962</anchor>
      <arglist>(Solver *const s, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BooleanVar</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>ae5e724ed74c6500d881a105bae76815f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>adcdc43494bcafece6480f57f626544ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a6b734a5a677fb0fe2825436c6ba48a7f</anchor>
      <arglist>(int64 m) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a3a05915289d4c146e0a38bb316a7a47c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a378347db1409d83313ccb4af90628da5</anchor>
      <arglist>(int64 m) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>ae662ff228ca3c6d00bf1b5a44cde80af</anchor>
      <arglist>(int64 mi, int64 ma) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>ae3a6eede92fb16e764d9ed3d41457a90</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>af736502981e90d35f527e88e78c22ab5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveValue</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>ad87a19fb837f8246ec54921a3ce9a964</anchor>
      <arglist>(int64 v) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveInterval</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a6b644a17239598032c2018ee45d70d46</anchor>
      <arglist>(int64 l, int64 u) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenBound</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>ae00d6563324cebef0f7e25fae162b18c</anchor>
      <arglist>(Demon *d) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>afe92381987bbfe57038d9505070961f1</anchor>
      <arglist>(Demon *d) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDomain</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a9591600255397e362d4e5e7b7849ccbd</anchor>
      <arglist>(Demon *d) override</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a68168a3801af19c22a488b7ee54a4f65</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a6b91fb41b08de29549be0c06ffe8c02e</anchor>
      <arglist>(int64 v) const override</arglist>
    </member>
    <member kind="function">
      <type>IntVarIterator *</type>
      <name>MakeHoleIterator</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>ad753797f8931384f49e7bd611955ec92</anchor>
      <arglist>(bool reversible) const override</arglist>
    </member>
    <member kind="function">
      <type>IntVarIterator *</type>
      <name>MakeDomainIterator</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a06e0b808e27d374abdf8c21fbb6a66ec</anchor>
      <arglist>(bool reversible) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>acad14290f1f14a53adc0feb170d67f22</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VarType</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>aecaf73027230c4b1822c9570dfb57d8d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>IsEqual</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a15849c683f45c394fa0226b63f878f88</anchor>
      <arglist>(int64 constant) override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>IsDifferent</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a10b409b112a69d967a38fb8410b32628</anchor>
      <arglist>(int64 constant) override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>IsGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a71fce3ed760fa7b7411c1d535d6b2b1f</anchor>
      <arglist>(int64 constant) override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>IsLessOrEqual</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a27b67394cfaf7bc52064ccbcf7c5ccb4</anchor>
      <arglist>(int64 constant) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RestoreValue</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a91649bf1da373e9ecc4e2988055b71f9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>af9f1ddd2359a6d10c4003822bfc81289</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RawValue</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a855de66d6f54ee97107882d40bf87fd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsVar</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a1e8732e1343228cbe86db9c986aa48d4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ac65d53711c52b0988b7e8fb81e79aeb9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RemoveValues</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ade36b093f22913a40c24d37575c28f38</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetValues</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a9b3717393d801dc1ca5ce32e55a73622</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenBound</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a7b77bca97b9e8c80757ce1f8d3f985a6</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenBound</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a5ed044357d490a6a2fd91b6bc180039e</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDomain</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a8540cc984d3c888633b4a741e052260d</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDomain</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a549ce691c8ea0477891f7caf86d8ab37</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldMin</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a894ecb1c102fa7fca59661a215f14d50</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldMax</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a619ac58213bbff56398934e76dd1079f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a6d8841341ab21ef119c0b7df02785a48</anchor>
      <arglist>(ModelVisitor *const visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a49fb18ac443f329969336d1d685269ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Range</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a07b522d73ebcc17ebc1b480d181627f1</anchor>
      <arglist>(int64 *l, int64 *u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a8889930ed76665b0f24f12df2ed4e05c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>VarWithName</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1de04a321f16e9cdc50bbec78e1adbf7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a4b35ce14dbdbd3df0d20af5b708288f8</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a6d21b7e60b50a18a1591de348da6563e</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUnboundBooleanVarValue</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>aae0d6d6c66c7b9aece9eaa53d37df781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>value_</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>aed0332baea49669ae70390240fa706d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleRevFIFO&lt; Demon * &gt;</type>
      <name>bound_demons_</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>aac17bfbf716bbfb56247821a17915738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleRevFIFO&lt; Demon * &gt;</type>
      <name>delayed_bound_demons_</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a758ecbaa706908f9ad017e4c4f3dd7de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::BoolVar</name>
    <filename>classoperations__research_1_1sat_1_1BoolVar.html</filename>
    <member kind="function">
      <type></type>
      <name>BoolVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>a8467b4b5dffef99ffb96ef6b9b4a4097</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoolVar</type>
      <name>WithName</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>a1963637fcd9bfe8f9bd85a0971c0270d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>abcebeff89abbdb6b0b812616f1517f25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BoolVar</type>
      <name>Not</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>ac5a3346c2302559c71bd9cd1e989edf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>afb7fdd0dab72ba28030fb6d03ce5c32f</anchor>
      <arglist>(const BoolVar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>a6e9d4868f30b80fa5c37ac8991726110</anchor>
      <arglist>(const BoolVar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>afb03d8ed70e426b0f7b83c76fce3c68f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IntegerVariableProto &amp;</type>
      <name>Proto</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>a379713d334c199eeb834c338385293ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerVariableProto *</type>
      <name>MutableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>ae7e96dfb8ae534a787632d78711f9a44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>a27d52277902e0d08306697a43863b5e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CircuitConstraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>a946eae8a695dfad4799c1efecec379e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>a697ed9eaa8955d595a023663ab1e8418</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CpModelBuilder</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>ae04c85577cf33a05fb50bb361877fb42</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IntVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>a34419e55556ff4e92b447fe895bdb9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IntervalVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>afc7f9983234a41167299a74f07ec6622</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LinearExpr</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>a7678a938bf60a5c17fb47cf58995db0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ReservoirConstraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>ae0ff478f6506cb705bbc1737598276f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>SolutionBooleanValue</name>
      <anchorfile>classoperations__research_1_1sat_1_1BoolVar.html</anchorfile>
      <anchor>a8391a20c25890ccbf3f5e3982afed236</anchor>
      <arglist>(const CpSolverResponse &amp;r, BoolVar x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimpleBoundCosts::BoundCost</name>
    <filename>structSimpleBoundCosts_1_1BoundCost.html</filename>
    <member kind="variable">
      <type>int64</type>
      <name>bound</name>
      <anchorfile>structSimpleBoundCosts_1_1BoundCost.html</anchorfile>
      <anchor>aafe091324086df78a56f418adf2dc202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>cost</name>
      <anchorfile>structSimpleBoundCosts_1_1BoundCost.html</anchorfile>
      <anchor>a8e9bc21d85a15811daec7d1b03b50704</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::BronKerboschAlgorithm</name>
    <filename>classoperations__research_1_1BronKerboschAlgorithm.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::function&lt; bool(NodeIndex, NodeIndex)&gt;</type>
      <name>IsArcCallback</name>
      <anchorfile>classoperations__research_1_1BronKerboschAlgorithm.html</anchorfile>
      <anchor>a2c635d9b0b40012abf93606dd023e535</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; CliqueResponse(const std::vector&lt; NodeIndex &gt; &amp;)&gt;</type>
      <name>CliqueCallback</name>
      <anchorfile>classoperations__research_1_1BronKerboschAlgorithm.html</anchorfile>
      <anchor>ae49289c12a088e9f15bb26f927406c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BronKerboschAlgorithm</name>
      <anchorfile>classoperations__research_1_1BronKerboschAlgorithm.html</anchorfile>
      <anchor>ae7ca5a1b7767ea98c2f337e8b6f94c44</anchor>
      <arglist>(IsArcCallback is_arc, NodeIndex num_nodes, CliqueCallback clique_callback)</arglist>
    </member>
    <member kind="function">
      <type>BronKerboschAlgorithmStatus</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1BronKerboschAlgorithm.html</anchorfile>
      <anchor>a6dcb077f31531cc17c94da3364b6f099</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BronKerboschAlgorithmStatus</type>
      <name>RunIterations</name>
      <anchorfile>classoperations__research_1_1BronKerboschAlgorithm.html</anchorfile>
      <anchor>a14b12a4c5ea291009f47c1a98c458f81</anchor>
      <arglist>(int64 max_num_iterations)</arglist>
    </member>
    <member kind="function">
      <type>BronKerboschAlgorithmStatus</type>
      <name>RunWithTimeLimit</name>
      <anchorfile>classoperations__research_1_1BronKerboschAlgorithm.html</anchorfile>
      <anchor>aa28a934535a824fa63672b6c314b61cc</anchor>
      <arglist>(int64 max_num_iterations, TimeLimit *time_limit)</arglist>
    </member>
    <member kind="function">
      <type>BronKerboschAlgorithmStatus</type>
      <name>RunWithTimeLimit</name>
      <anchorfile>classoperations__research_1_1BronKerboschAlgorithm.html</anchorfile>
      <anchor>a4a1ea40849bc5e92cecec1a90f2f2bb9</anchor>
      <arglist>(TimeLimit *time_limit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CallMethod0</name>
    <filename>classoperations__research_1_1CallMethod0.html</filename>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>CallMethod0</name>
      <anchorfile>classoperations__research_1_1CallMethod0.html</anchorfile>
      <anchor>a52f89d97b033f2aaaed56b59f155e843</anchor>
      <arglist>(T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallMethod0</name>
      <anchorfile>classoperations__research_1_1CallMethod0.html</anchorfile>
      <anchor>a440b83783e9b3e454da1b9ff8e0158d6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1CallMethod0.html</anchorfile>
      <anchor>a1a9ae132209a5ae456616619c3a85766</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1CallMethod0.html</anchorfile>
      <anchor>a50933bd9255294eca78f60b3b5bd176c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a7ec8db0f9eacea36b80bfacfb1b5af8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CallMethod1</name>
    <filename>classoperations__research_1_1CallMethod1.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>CallMethod1</name>
      <anchorfile>classoperations__research_1_1CallMethod1.html</anchorfile>
      <anchor>a8fcc65a2b8b85180d3953f4a053c0427</anchor>
      <arglist>(T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallMethod1</name>
      <anchorfile>classoperations__research_1_1CallMethod1.html</anchorfile>
      <anchor>a6a0b5eb94a6a346e2105f39044639a57</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1CallMethod1.html</anchorfile>
      <anchor>a05fb24c470827029abf15ecebafbdc50</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1CallMethod1.html</anchorfile>
      <anchor>ab65d89c9f459c682e727ec7352b13d0f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a7ec8db0f9eacea36b80bfacfb1b5af8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CallMethod2</name>
    <filename>classoperations__research_1_1CallMethod2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>CallMethod2</name>
      <anchorfile>classoperations__research_1_1CallMethod2.html</anchorfile>
      <anchor>a71db8158282db6b1843ac9f374c2d257</anchor>
      <arglist>(T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallMethod2</name>
      <anchorfile>classoperations__research_1_1CallMethod2.html</anchorfile>
      <anchor>a4844807bcdeb161db01ec170851aad5b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1CallMethod2.html</anchorfile>
      <anchor>a722104f90990e4111a7dfb142e83f172</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1CallMethod2.html</anchorfile>
      <anchor>a441b1578ed3ec8baccd9938f637fb96d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a7ec8db0f9eacea36b80bfacfb1b5af8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CallMethod3</name>
    <filename>classoperations__research_1_1CallMethod3.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>CallMethod3</name>
      <anchorfile>classoperations__research_1_1CallMethod3.html</anchorfile>
      <anchor>a7bb7c2f91ea3952b404a6f0a0ba52e90</anchor>
      <arglist>(T *const ct, void(T::*method)(P, Q, R), const std::string &amp;name, P param1, Q param2, R param3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallMethod3</name>
      <anchorfile>classoperations__research_1_1CallMethod3.html</anchorfile>
      <anchor>a02df126ffb5bc00e01cdb0a5fd13ff12</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1CallMethod3.html</anchorfile>
      <anchor>a259efc51f0c4cda1c584c295309efd8a</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1CallMethod3.html</anchorfile>
      <anchor>a8ffd455d49414f28011382cf83fff175</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a7ec8db0f9eacea36b80bfacfb1b5af8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CastConstraint</name>
    <filename>classoperations__research_1_1CastConstraint.html</filename>
    <base>operations_research::Constraint</base>
    <member kind="function">
      <type></type>
      <name>CastConstraint</name>
      <anchorfile>classoperations__research_1_1CastConstraint.html</anchorfile>
      <anchor>a6d1daffc6d0067731f886641c64de177</anchor>
      <arglist>(Solver *const solver, IntVar *const target_var)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CastConstraint</name>
      <anchorfile>classoperations__research_1_1CastConstraint.html</anchorfile>
      <anchor>abb7d3d824e298a2756e9a74b2163c5e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>target_var</name>
      <anchorfile>classoperations__research_1_1CastConstraint.html</anchorfile>
      <anchor>a89f0e9f3c52c31eba3759c8c411f792d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Post</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>aaa882d58b5fc0f2e3df6eff957ad4a0d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InitialPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a64ab23714e57db311ba5b9fe1e742979</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a443bf6da3f8db15c240cb92d20e37466</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PostAndPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a92c3bfe86238b5c95448d4a0384a327f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a6e3070956af148d6fa0491de1d3cf289</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCastConstraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a834edc2ae995b866a6aa63e44c242570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a5606cc31756a1708615d492ab75ba886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVar *const</type>
      <name>target_var_</name>
      <anchorfile>classoperations__research_1_1CastConstraint.html</anchorfile>
      <anchor>afe3c20ec0800b1d344861e783d45be41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ChangeValue</name>
    <filename>classoperations__research_1_1ChangeValue.html</filename>
    <base>operations_research::IntVarLocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>ChangeValue</name>
      <anchorfile>classoperations__research_1_1ChangeValue.html</anchorfile>
      <anchor>abe683422f672a5f8a9356fc63e3d21b6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChangeValue</name>
      <anchorfile>classoperations__research_1_1ChangeValue.html</anchorfile>
      <anchor>a70285841877125a42f6e09c3de6d9ae2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>ModifyValue</name>
      <anchorfile>classoperations__research_1_1ChangeValue.html</anchorfile>
      <anchor>a71b2589b82650decb06c8563310f5d5f</anchor>
      <arglist>(int64 index, int64 value)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1ChangeValue.html</anchorfile>
      <anchor>a7bcd4a197ade8555b9c1c1dcb731d5c3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ChristofidesPathSolver</name>
    <filename>classoperations__research_1_1ChristofidesPathSolver.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>MatchingAlgorithm</name>
      <anchorfile>classoperations__research_1_1ChristofidesPathSolver.html</anchorfile>
      <anchor>ad44822002f75a6f478a62e107d880018</anchor>
      <arglist></arglist>
      <enumvalue file="classoperations__research_1_1ChristofidesPathSolver.html" anchor="ad44822002f75a6f478a62e107d880018a99c5fe202c37dcd8ed9cc60926a4f525">MINIMAL_WEIGHT_MATCHING</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>ChristofidesPathSolver</name>
      <anchorfile>classoperations__research_1_1ChristofidesPathSolver.html</anchorfile>
      <anchor>a4c46f50f1d26cb5d1945fee66db56029</anchor>
      <arglist>(NodeIndex num_nodes, CostFunction costs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMatchingAlgorithm</name>
      <anchorfile>classoperations__research_1_1ChristofidesPathSolver.html</anchorfile>
      <anchor>a76c636e1d48da64087686dd06bc45519</anchor>
      <arglist>(MatchingAlgorithm matching)</arglist>
    </member>
    <member kind="function">
      <type>CostType</type>
      <name>TravelingSalesmanCost</name>
      <anchorfile>classoperations__research_1_1ChristofidesPathSolver.html</anchorfile>
      <anchor>ada30f267a0dea4a4f25fcce1a6158438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; NodeIndex &gt;</type>
      <name>TravelingSalesmanPath</name>
      <anchorfile>classoperations__research_1_1ChristofidesPathSolver.html</anchorfile>
      <anchor>a8db7cbf56d8882ecefcb1f88ff20c755</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::CircuitConstraint</name>
    <filename>classoperations__research_1_1sat_1_1CircuitConstraint.html</filename>
    <base>operations_research::sat::Constraint</base>
    <member kind="function">
      <type>void</type>
      <name>AddArc</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraint.html</anchorfile>
      <anchor>a9ee6aa474b9e4c2bcf8fab717079704d</anchor>
      <arglist>(int tail, int head, BoolVar literal)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9052e9e1dd8248433909b5542f314add</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; literals)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>ab6457905c9a8cd1c5f92738d57e6f298</anchor>
      <arglist>(BoolVar literal)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>WithName</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9401ab195650160402df5b61f8ac9bda</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aeaf30f4ee7d141e68905f1ac2432b937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintProto &amp;</type>
      <name>Proto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aa0b277df64333f670b66c8d5295b8250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstraintProto *</type>
      <name>MutableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>acaa17b2fbfd62f6845329ae944835654</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstraintProto *</type>
      <name>proto_</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9d74c3d77f601020ab87700745f830ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CpModelBuilder</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraint.html</anchorfile>
      <anchor>ae04c85577cf33a05fb50bb361877fb42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::CircuitConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>CircuitConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>ac03c25224efaf68cb37bf98ed55607ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CircuitConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a3736b5b621d7a4b3605ac433b6382957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircuitConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>aec23bde0c2a7502ff946c4423641abd3</anchor>
      <arglist>(const CircuitConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>CircuitConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>ac2b3d1c86cae0843cb1b90ad512a485a</anchor>
      <arglist>(const CircuitConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>ab1c3303746b39a3d342e45f19a811140</anchor>
      <arglist>(CircuitConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>CircuitConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a6c8172fd753d71de2ca23661777bbda7</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>CircuitConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>ab44585f7a5855d888e1f7b9b6e923eed</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a7aa2c01b5ad538488d678c00c1e9c0f0</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a81fafe099df488db67ca908097324839</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>abcd4e0a410ac9673f6f6712ea7054325</anchor>
      <arglist>(const CircuitConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>ab160b48ca874381ff6b41dd56b1c7938</anchor>
      <arglist>(const CircuitConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>ad70d2820838a83df3348e4dcd1b20cea</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a0f06b46a64f75615a4a2c49db992481f</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>aba954be1d46b388b7d3065635f71f326</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a9ee7a4d988128cb5b3d3c5795e9628b9</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a678875e4c352af0223e22ae4d6205423</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>ac930eec00068f2bc78e8846589f0eee9</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a90aa18f88888ace0d623de979f7c398d</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a616915ddd9c051553257da27d6626d14</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tails_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a57607035d4858f8ef2e01a22fff82439</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_tails</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a9edc97dfbac3dc05fb3ae0404581d6b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>tails</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>ae4c70a436cb759f1aa65e64652de574a</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_tails</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a360bf3fdf81562acae6740542f62d96a</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_tails</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a34bd0d3c0fcf3bc84a925c6043e333ff</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>tails</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>ab030bad5974eb5c6748f8fb02ee1dc4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_tails</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a8445c2a968481ce74e53bae45148a473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>heads_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a4f13a443bccc6025d789530f9c1f8424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_heads</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>adfb00c3666338f5bded103a6c5d04b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>heads</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a7d9717048673653429237fb3a2cdd9e1</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_heads</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a7e8fc502eec008fd4dbeffb1dccd4938</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_heads</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a934fa3aeaeb55e19742e07813cd283ef</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>heads</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>aefa5a6533fbf4b7b116e763067be3d6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_heads</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a9e5d797bed65aa26e8add80266749d02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>literals_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>ac9af2e517541f34a816b08876e7bf897</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a8497d861f72f9440c9f57e5202a2c690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>aa154f4ee20de7b05fd19987ea35c1a59</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a330cd6d9c5d1d0b9eadccf208c32d4c7</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>af9a48fb2a07e20f850c529f7a76aa26f</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a67c6013435a3684f201e1255768029ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a38a95c5e65fbf2ffb20f1d54eab900c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a71a68d9e1f208f445411a521b3c004dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CircuitConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a533b4d7ddbe62501bdbc1dbc0757b158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a8f89111afdbc96248e6ceb54cafe47b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CircuitConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a4f99cdabbc4a106fb43c80697145bf40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a11a07cf84b1b816316bf2027e70ab5e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTailsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a97650e3f1e5e6e75690bd1a8edc2f7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kHeadsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a6b73f88461df2b0d76c8675ef2a3455f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLiteralsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a2d76ed5befb82bafa1780691d6e1fea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitConstraintProto.html</anchorfile>
      <anchor>a3f29fae2e2b1458bafebce6492c8350a</anchor>
      <arglist>(CircuitConstraintProto &amp;a, CircuitConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::CircuitCoveringConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>CircuitCoveringConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a18f7844e9f186e5fbc933a07e4b60cc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CircuitCoveringConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>aa7d06305f269b95c8f0916c11c030886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircuitCoveringConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a8aaa75ccc3693b2cadf9a61a3142dd49</anchor>
      <arglist>(const CircuitCoveringConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>CircuitCoveringConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a7923ca37bb6e6c8a86928e95ede9eede</anchor>
      <arglist>(const CircuitCoveringConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a53e35c361f142f5d263af6122c2cd1fc</anchor>
      <arglist>(CircuitCoveringConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>CircuitCoveringConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>ae9dae8863a44b93144a4a09693a912ec</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>CircuitCoveringConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>aebd09027ebd0f9aa811cb79663961ac8</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>acd2b5c5d7f23d9f4522b208909f2e637</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a0730512bbaf709aea4661d0dc96aad81</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>ae2ad0379b25a0e3cfefe079d5590775a</anchor>
      <arglist>(const CircuitCoveringConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>ab8c29293be1cbc7305cd3d6834567e5b</anchor>
      <arglist>(const CircuitCoveringConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a633979cc780157b04496cfef86de26ea</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>abee12d9695573cecfa922cc630900bb2</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a78d5dba85d260f0ae28db4e8bfcb59fa</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a6df68edcf297586760f81fe8dc06e6e2</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a3e5412f253d404a7d7ccddb9b523eca1</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>ae50eccc06cd67c0985936e744f7f4883</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a634b2023dc3d99e11a8bdc314cc6e3da</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a18da503c7a02cbc861ec7c061d25e9c8</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nexts_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>ae81a5330d9c4578a872554f767a95030</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_nexts</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a702407bd83369a9f351bfeca7d70d9a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>nexts</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a345efbf6fed0f58374bb58083c021a15</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_nexts</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a2d3aa7f19f696d1a4bdf6d7c2826cb59</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_nexts</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a5db8ca7f4e96ce3b3a3396aa397f5351</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>nexts</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a54e42a780e65edfc9c5a1a44ffd572da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_nexts</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>aaa54f6a6d1916e53cad22f46bb2a4909</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>distinguished_nodes_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a91305e4fa3c1579cc39428a3b701fa35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_distinguished_nodes</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a1b772f12f1d739f8664093caab32492f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>distinguished_nodes</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a70b107b5eb2e8170009f089209220cdc</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_distinguished_nodes</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a5205db0efa49b6c873824ce9b326cd63</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_distinguished_nodes</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>adf3da7be113000ed83607e3116ce8741</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>distinguished_nodes</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a860f8ef11d9677f4fb412c260082f524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_distinguished_nodes</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>ad60ef4ef646a2db977c7817270d4ff1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>adbb601898963a0ffe3e010989cc1ca67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CircuitCoveringConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a00ce285601d62105dd0c050374821ee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a77003f4a28115587497843e1b86fe1ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CircuitCoveringConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>ae878ab3d55408227172e06d3128f791b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a92608cdb80815a28da2a1be947994d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNextsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a0a92e93b4764d23f4356d960ebc0ced9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kDistinguishedNodesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>a425c18334e10877278812faa278192fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CircuitCoveringConstraintProto.html</anchorfile>
      <anchor>ac4168eb8c043a305f923cbdb229dfb2b</anchor>
      <arglist>(CircuitCoveringConstraintProto &amp;a, CircuitCoveringConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::ClosedInterval</name>
    <filename>structoperations__research_1_1ClosedInterval.html</filename>
    <member kind="function">
      <type></type>
      <name>ClosedInterval</name>
      <anchorfile>structoperations__research_1_1ClosedInterval.html</anchorfile>
      <anchor>ac88ed3db6ef14b84e38b5d89d39aaa04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosedInterval</name>
      <anchorfile>structoperations__research_1_1ClosedInterval.html</anchorfile>
      <anchor>ae79c6820d4e756c8805ef8f3dac20655</anchor>
      <arglist>(int64 s, int64 e)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>structoperations__research_1_1ClosedInterval.html</anchorfile>
      <anchor>a45209c3e31f989a7d5b3c7f8a15f6164</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structoperations__research_1_1ClosedInterval.html</anchorfile>
      <anchor>a5e40a5426c5178a044f8147e05a57e67</anchor>
      <arglist>(const ClosedInterval &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structoperations__research_1_1ClosedInterval.html</anchorfile>
      <anchor>aec81d0fbae7b13a421f4aebc0285df2d</anchor>
      <arglist>(const ClosedInterval &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>start</name>
      <anchorfile>structoperations__research_1_1ClosedInterval.html</anchorfile>
      <anchor>add276e813566f507dc7b02a1971ea60b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>end</name>
      <anchorfile>structoperations__research_1_1ClosedInterval.html</anchorfile>
      <anchor>a650dc1bae78be4048e0f8e8377208925</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::CompleteBipartiteGraph</name>
    <filename>classutil_1_1CompleteBipartiteGraph.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>BaseGraph&lt; NodeIndexType, ArcIndexType, false &gt;</base>
    <class kind="class">util::CompleteBipartiteGraph::OutgoingArcIterator</class>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>adb271cf4bcf2de5b5bbe300d7054af29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0eba6e5899924388644dfa2258ae8929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompleteBipartiteGraph</name>
      <anchorfile>classutil_1_1CompleteBipartiteGraph.html</anchorfile>
      <anchor>a63dffe1efb9b218697c5658752d2f557</anchor>
      <arglist>(NodeIndexType left_nodes, NodeIndexType right_nodes)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classutil_1_1CompleteBipartiteGraph.html</anchorfile>
      <anchor>ad68ad92884b0ed0e3b2eb6888a6eebea</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Tail</name>
      <anchorfile>classutil_1_1CompleteBipartiteGraph.html</anchorfile>
      <anchor>a31e96f6c4453535f09ba76224fd4628a</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>OutDegree</name>
      <anchorfile>classutil_1_1CompleteBipartiteGraph.html</anchorfile>
      <anchor>acf1c65e6f320741ffab9a8717ac4ba28</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndexType &gt;</type>
      <name>OutgoingArcs</name>
      <anchorfile>classutil_1_1CompleteBipartiteGraph.html</anchorfile>
      <anchor>a8e4bf50d021c9ed65c6da43b6ed014ae</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndexType &gt;</type>
      <name>OutgoingArcsStartingFrom</name>
      <anchorfile>classutil_1_1CompleteBipartiteGraph.html</anchorfile>
      <anchor>a6c20eacdf4ddd2af4c40b1fcce27ada9</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; NodeIndexType &gt;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1CompleteBipartiteGraph.html</anchorfile>
      <anchor>ae2e3523b6d6cdff67cbca55bdc2bcc4b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0f551c921fa0b5aaa334a6e36f61db4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aefb468e4d4a3128c91b3bad9f5b314c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; NodeIndex &gt;</type>
      <name>AllNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a32ba4a5ca9a4b89f750eb2dc56518b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndex &gt;</type>
      <name>AllForwardArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abcfd7c21143e5ed38573c0dd60826dd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abf853acea86e01356f53055f77661770</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a2097ccda3b1ad27e2c82166979018bda</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>node_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a463d57480c9563a7a707c5d0928c9946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>arc_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a92ffd852b2ab2e5241f9832e71a2de71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReserveNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a69a71cbb575b13bde9899f5a6a217139</anchor>
      <arglist>(NodeIndexType bound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReserveArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a9563f7154a759843923dd9bb27b288e7</anchor>
      <arglist>(ArcIndexType bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab731ca5c638e7b1b0a2c459c94a90f55</anchor>
      <arglist>(NodeIndexType node_capacity, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeCapacities</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa3bd051d1e141b09dda17aa9b5f24f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a07214b96597069d781e27b1dd17ef83e</anchor>
      <arglist>(const A &amp;a, B *b)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a346b8a5811f0e287e1ebce2de2c1ad28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab1292c82a3f43be3bd57b63a05fe0214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad5b77846f77c2771e840820812ad5521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeCumulativeSum</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ac47030fcb75a3220f8cf9ed79697056e</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BuildStartAndForwardHead</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a63fd586eed6c345866317e2f0faf377e</anchor>
      <arglist>(SVector&lt; NodeIndexType &gt; *head, std::vector&lt; ArcIndexType &gt; *start, std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a473db46afec1eabf0762411830dee30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>node_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a424bd34a9767e7edeaf3a60ecd3cb000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>af16f99d41856a7b22ae8a226ef09abff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>arc_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a895e891d1ad52ce3efcfeb7ba11194c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>const_capacities_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa980e5526b9ded17a83928fc339c71e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::CompleteGraph</name>
    <filename>classutil_1_1CompleteGraph.html</filename>
    <templarg>NodeIndexType</templarg>
    <templarg>ArcIndexType</templarg>
    <base>BaseGraph&lt; NodeIndexType, ArcIndexType, false &gt;</base>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>adb271cf4bcf2de5b5bbe300d7054af29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0eba6e5899924388644dfa2258ae8929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompleteGraph</name>
      <anchorfile>classutil_1_1CompleteGraph.html</anchorfile>
      <anchor>ad3401c3d9df9b08cd9be279464029a32</anchor>
      <arglist>(NodeIndexType num_nodes)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classutil_1_1CompleteGraph.html</anchorfile>
      <anchor>af32d9f7de8ae0ccb7a859794a8fa7329</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Tail</name>
      <anchorfile>classutil_1_1CompleteGraph.html</anchorfile>
      <anchor>aa6dc77def1cc80ffd14cb931a3043e52</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>OutDegree</name>
      <anchorfile>classutil_1_1CompleteGraph.html</anchorfile>
      <anchor>a715345c684f1cbeb1896f09ebd989dd1</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndexType &gt;</type>
      <name>OutgoingArcs</name>
      <anchorfile>classutil_1_1CompleteGraph.html</anchorfile>
      <anchor>aa5561d57ac19a632ed3086e7f96fdbe6</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndexType &gt;</type>
      <name>OutgoingArcsStartingFrom</name>
      <anchorfile>classutil_1_1CompleteGraph.html</anchorfile>
      <anchor>a77b6facc3e744aa4ff764c9b9725e2d8</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; NodeIndexType &gt;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1CompleteGraph.html</anchorfile>
      <anchor>ab12a266c0c091c00a150667619f491d4</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0f551c921fa0b5aaa334a6e36f61db4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aefb468e4d4a3128c91b3bad9f5b314c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; NodeIndex &gt;</type>
      <name>AllNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a32ba4a5ca9a4b89f750eb2dc56518b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndex &gt;</type>
      <name>AllForwardArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abcfd7c21143e5ed38573c0dd60826dd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abf853acea86e01356f53055f77661770</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a2097ccda3b1ad27e2c82166979018bda</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>node_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a463d57480c9563a7a707c5d0928c9946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>arc_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a92ffd852b2ab2e5241f9832e71a2de71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReserveNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a69a71cbb575b13bde9899f5a6a217139</anchor>
      <arglist>(NodeIndexType bound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReserveArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a9563f7154a759843923dd9bb27b288e7</anchor>
      <arglist>(ArcIndexType bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab731ca5c638e7b1b0a2c459c94a90f55</anchor>
      <arglist>(NodeIndexType node_capacity, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeCapacities</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa3bd051d1e141b09dda17aa9b5f24f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a07214b96597069d781e27b1dd17ef83e</anchor>
      <arglist>(const A &amp;a, B *b)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a346b8a5811f0e287e1ebce2de2c1ad28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab1292c82a3f43be3bd57b63a05fe0214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad5b77846f77c2771e840820812ad5521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeCumulativeSum</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ac47030fcb75a3220f8cf9ed79697056e</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BuildStartAndForwardHead</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a63fd586eed6c345866317e2f0faf377e</anchor>
      <arglist>(SVector&lt; NodeIndexType &gt; *head, std::vector&lt; ArcIndexType &gt; *start, std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a473db46afec1eabf0762411830dee30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>node_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a424bd34a9767e7edeaf3a60ecd3cb000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>af16f99d41856a7b22ae8a226ef09abff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>arc_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a895e891d1ad52ce3efcfeb7ba11194c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>const_capacities_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa980e5526b9ded17a83928fc339c71e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ConnectedComponents</name>
    <filename>classoperations__research_1_1ConnectedComponents.html</filename>
    <templarg>NodeIndex</templarg>
    <templarg>ArcIndex</templarg>
    <member kind="function">
      <type></type>
      <name>ConnectedComponents</name>
      <anchorfile>classoperations__research_1_1ConnectedComponents.html</anchorfile>
      <anchor>afcf39280b3d8dad94c80e2977415acac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classoperations__research_1_1ConnectedComponents.html</anchorfile>
      <anchor>a2d8283743a52c2e331309c33c798b23c</anchor>
      <arglist>(NodeIndex num_nodes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddArc</name>
      <anchorfile>classoperations__research_1_1ConnectedComponents.html</anchorfile>
      <anchor>a2b3b54f216c61506eaaace2d29819f79</anchor>
      <arglist>(NodeIndex tail, NodeIndex head)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddGraph</name>
      <anchorfile>classoperations__research_1_1ConnectedComponents.html</anchorfile>
      <anchor>a257c3606c853fb7b79f62a5b62c65359</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>CompressPath</name>
      <anchorfile>classoperations__research_1_1ConnectedComponents.html</anchorfile>
      <anchor>a37aff82e0d7503f2dda86e1211cc89af</anchor>
      <arglist>(NodeIndex node)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>GetClassRepresentative</name>
      <anchorfile>classoperations__research_1_1ConnectedComponents.html</anchorfile>
      <anchor>aa3cdc15d5fad9ed6672bd4e436d987dd</anchor>
      <arglist>(NodeIndex node)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>GetNumberOfConnectedComponents</name>
      <anchorfile>classoperations__research_1_1ConnectedComponents.html</anchorfile>
      <anchor>abe650442ae4ce0a544245721946abb89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeClasses</name>
      <anchorfile>classoperations__research_1_1ConnectedComponents.html</anchorfile>
      <anchor>a8de720dd960dc6e2e831bb27c3500466</anchor>
      <arglist>(NodeIndex node1, NodeIndex node2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectedComponentsFinder</name>
    <filename>classConnectedComponentsFinder.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ConnectedComponentsFinder</name>
      <anchorfile>classConnectedComponentsFinder.html</anchorfile>
      <anchor>aa669a113d3ee23c506b97949f740b1cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectedComponentsFinder</name>
      <anchorfile>classConnectedComponentsFinder.html</anchorfile>
      <anchor>a3985503e0bc5adaeba09484e723378c6</anchor>
      <arglist>(const ConnectedComponentsFinder &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ConnectedComponentsFinder &amp;</type>
      <name>operator=</name>
      <anchorfile>classConnectedComponentsFinder.html</anchorfile>
      <anchor>a21da7363443c34ad00c529fae4b3b3e2</anchor>
      <arglist>(const ConnectedComponentsFinder &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNode</name>
      <anchorfile>classConnectedComponentsFinder.html</anchorfile>
      <anchor>a93b2c753675c77bfdbc0c33eb582380b</anchor>
      <arglist>(T node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddEdge</name>
      <anchorfile>classConnectedComponentsFinder.html</anchorfile>
      <anchor>a77a24beaed190e2f3a0d12662a65b18a</anchor>
      <arglist>(T node1, T node2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Connected</name>
      <anchorfile>classConnectedComponentsFinder.html</anchorfile>
      <anchor>a67dc34888511ab5b90b7389c90dbc1f8</anchor>
      <arglist>(T node1, T node2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSize</name>
      <anchorfile>classConnectedComponentsFinder.html</anchorfile>
      <anchor>a7a173636e3dce11a27f2f7121e01a563</anchor>
      <arglist>(T node)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; T &gt; &gt;</type>
      <name>FindConnectedComponents</name>
      <anchorfile>classConnectedComponentsFinder.html</anchorfile>
      <anchor>a9eaa06cffceda90c1d44f550ad3459f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindConnectedComponents</name>
      <anchorfile>classConnectedComponentsFinder.html</anchorfile>
      <anchor>a7f7b2f745e4c87bcaafec8fa295bfa91</anchor>
      <arglist>(std::vector&lt; typename internal::ConnectedComponentsTypeHelper&lt; T, CompareOrHashT &gt;::Set &gt; *components)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfComponents</name>
      <anchorfile>classConnectedComponentsFinder.html</anchorfile>
      <anchor>a30350bb98f0e1f7ae47ec1292d253b52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfNodes</name>
      <anchorfile>classConnectedComponentsFinder.html</anchorfile>
      <anchor>a350a0a0790e558f619478ce97c8f2ae7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>internal::ConnectedComponentsTypeHelper</name>
    <filename>structinternal_1_1ConnectedComponentsTypeHelper.html</filename>
    <templarg>T</templarg>
    <templarg>CompareOrHashT</templarg>
    <class kind="struct">internal::ConnectedComponentsTypeHelper::SelectContainer</class>
    <class kind="struct">internal::ConnectedComponentsTypeHelper::SelectContainer&lt; U, absl::enable_if_t&lt; std::is_integral&lt; decltype(std::declval&lt; const U &amp; &gt;()(std::declval&lt; const T &amp; &gt;()))&gt;::value &gt; &gt;</class>
    <member kind="typedef">
      <type>typename SelectContainer&lt; CompareOrHashT &gt;::Set</type>
      <name>Set</name>
      <anchorfile>structinternal_1_1ConnectedComponentsTypeHelper.html</anchorfile>
      <anchor>a9cd35864d49655496e8299033909c931</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SelectContainer&lt; CompareOrHashT &gt;::Map</type>
      <name>Map</name>
      <anchorfile>structinternal_1_1ConnectedComponentsTypeHelper.html</anchorfile>
      <anchor>ae62844a121f82b3e7f7b43bb7eda50e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Constraint</name>
    <filename>classoperations__research_1_1Constraint.html</filename>
    <base>operations_research::PropagationBaseObject</base>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>ae4bce2b10b1b0b3f953e356e6a34f339</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Constraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>ade8518fb88221d449c6a89f1dc7eac44</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Post</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>aaa882d58b5fc0f2e3df6eff957ad4a0d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InitialPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a64ab23714e57db311ba5b9fe1e742979</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a443bf6da3f8db15c240cb92d20e37466</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PostAndPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a92c3bfe86238b5c95448d4a0384a327f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a6e3070956af148d6fa0491de1d3cf289</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCastConstraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a834edc2ae995b866a6aa63e44c242570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a5606cc31756a1708615d492ab75ba886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::Constraint</name>
    <filename>classoperations__research_1_1sat_1_1Constraint.html</filename>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9052e9e1dd8248433909b5542f314add</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; literals)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>ab6457905c9a8cd1c5f92738d57e6f298</anchor>
      <arglist>(BoolVar literal)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>WithName</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9401ab195650160402df5b61f8ac9bda</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aeaf30f4ee7d141e68905f1ac2432b937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintProto &amp;</type>
      <name>Proto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aa0b277df64333f670b66c8d5295b8250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstraintProto *</type>
      <name>MutableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>acaa17b2fbfd62f6845329ae944835654</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9a6b9b664d4d0d56e8c0d14c8ad3bad9</anchor>
      <arglist>(ConstraintProto *proto)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstraintProto *</type>
      <name>proto_</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9d74c3d77f601020ab87700745f830ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>CpModelBuilder</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>ae04c85577cf33a05fb50bb361877fb42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::ConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1ConstraintProto.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ConstraintCase</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kBoolOr</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a705bb6ca71f5af4bc065f01fdd3e6bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kBoolAnd</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ac21140bc25c184d332f57f1d725e38a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAtMostOne</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a104ac051e3fac45d118336fafcd78bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kBoolXor</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ad987062c36dc563894f2a3d26197500e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIntDiv</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a35fd22077d30d054670d016ede906acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIntMod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ac7bbacce3d7eb4fc277a51a65cfe0702</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIntMax</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a8ad369fa4f923910360c564bdb7d8762</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIntMin</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a9ec63c50679c0039a12e29226f226527</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIntProd</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ac895ea97ae4e81a42cc9b2fdfd1030ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kLinear</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a7fdfe348c47fb1b603ece24d1ebaa579</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAllDiff</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ae9e579cb7ddd6426d9a0e14764c741a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kElement</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ad0ca39d67db616b9882a3519577acbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kCircuit</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92af1487093aa6682e397319c8764b9ee00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kRoutes</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a1a0f4bf1d276c8925468553869e13785</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kCircuitCovering</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ac31f3d955393c8475ff900a0b895dc03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kTable</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a497212ead868a867a2fd85dee6fd05cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAutomaton</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a642b33c3b02ca487eb0aa00a089538ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kInverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a55c8140a2905eb6f14420003b5c2f521</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReservoir</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92aedb4cff3209c9d64a1f575e83564d429</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kInterval</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a7fb600421a46d673bc2add6f400164d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kNoOverlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a4b2a9828c1ffaae1a8462362a1c28a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kNoOverlap2D</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a6821b17ef82cf675d5f5c4011e4df114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kCumulative</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a3986d7b34549a1cdf7c2a8d3151d6569</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINT_NOT_SET</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a6930b48c82c46169a6cbcf8428ae757c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kBoolOr</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a705bb6ca71f5af4bc065f01fdd3e6bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kBoolAnd</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ac21140bc25c184d332f57f1d725e38a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAtMostOne</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a104ac051e3fac45d118336fafcd78bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kBoolXor</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ad987062c36dc563894f2a3d26197500e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIntDiv</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a35fd22077d30d054670d016ede906acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIntMod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ac7bbacce3d7eb4fc277a51a65cfe0702</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIntMax</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a8ad369fa4f923910360c564bdb7d8762</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIntMin</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a9ec63c50679c0039a12e29226f226527</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIntProd</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ac895ea97ae4e81a42cc9b2fdfd1030ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kLinear</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a7fdfe348c47fb1b603ece24d1ebaa579</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAllDiff</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ae9e579cb7ddd6426d9a0e14764c741a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kElement</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ad0ca39d67db616b9882a3519577acbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kCircuit</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92af1487093aa6682e397319c8764b9ee00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kRoutes</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a1a0f4bf1d276c8925468553869e13785</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kCircuitCovering</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92ac31f3d955393c8475ff900a0b895dc03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kTable</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a497212ead868a867a2fd85dee6fd05cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAutomaton</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a642b33c3b02ca487eb0aa00a089538ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kInverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a55c8140a2905eb6f14420003b5c2f521</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReservoir</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92aedb4cff3209c9d64a1f575e83564d429</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kInterval</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a7fb600421a46d673bc2add6f400164d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kNoOverlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a4b2a9828c1ffaae1a8462362a1c28a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kNoOverlap2D</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a6821b17ef82cf675d5f5c4011e4df114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kCumulative</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a3986d7b34549a1cdf7c2a8d3151d6569</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINT_NOT_SET</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76cca486a4920b723b07a9a3a7eb3c92a6930b48c82c46169a6cbcf8428ae757c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aa628f3ef0e0d0c55a0dccf97ec232432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aca53fb5a4f68fc1e76308cc4e2c8fe2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a4445e9c8d129bbdebe140a7c4548ac6c</anchor>
      <arglist>(const ConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>ConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a3a8b3abb61dc03fc158995e8a642a52c</anchor>
      <arglist>(const ConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ab38234cd745e7718479c1190684c3074</anchor>
      <arglist>(ConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>ConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>adabc7caebc27504dfb2777ec4b5cb9c0</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>ConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a912cd7bfaef8d9fc7d84e2d018717886</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>af211fe01e91b6e7a72e3c26f1ec703b4</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a2b77692bab4e194cc9b0176728023a59</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a04352802d1d8a3ad245ae9ad9e633c90</anchor>
      <arglist>(const ConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a20f50dd9fdc3d0f5a18753d1afcfc816</anchor>
      <arglist>(const ConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a28ef8fea92c19bfa1539a11cfd78c6ef</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>adaf1e2ed016dcbdae3846cb5dd6a4330</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a3a541675e89688d089ad6efbbdd60925</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a3cf90604f80fdf917e71beaf9e4a87f0</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a555a6c06001400bb65fc7126e023bcb9</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a17dfaf4a23a22ef75948187a00515ae6</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aef2bfeeda4c457d5b815191a78613004</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a0fd5b8a1e6c42ec4bf9f7067f60984d1</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enforcement_literal_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ada17d138a6873ebfc0e1e177ea44c1a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_enforcement_literal</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a85645c71e824bd3c863f89f6b2a024dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>enforcement_literal</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aad8a9f4db9671f2ba09b7cc5f80de829</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_enforcement_literal</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a0511c64e1a26240948da5f9c88dd9c10</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_enforcement_literal</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ad436d37ed3f40815cc2c988656940a13</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>enforcement_literal</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a896083969ba6c2e5ac1312c456199a9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_enforcement_literal</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a8ded2b15353596d604787ffd5fc8599a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a6fe2a4cda5e554408466838cb36b33f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a95f1be1dd6ac795a3df9c3a0e170528f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a7cfbf8832eedc78348b1518fdfc71433</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a91f047ceac8b25cd82c5073ab3cebc54</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a9d454afc0f3570545ae5acf267084c95</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>mutable_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>adbdd4f5efeab12b810f875b2492a663c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>release_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a042ffd63999a1573d23d2af6b3d28e8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a0b5d2693fd55e990ae477fa73c24c599</anchor>
      <arglist>(::std::string *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_bool_or</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a8eeb6ccaf041efbef3dcac3d8d369c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_bool_or</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a19d5119ec6a645926d6d46c2a184aaac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::BoolArgumentProto &amp;</type>
      <name>bool_or</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a754492eba7a8f5c3c8f96848facc71c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::BoolArgumentProto *</type>
      <name>release_bool_or</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a62f2ecbd3538bebd072d29c3b4fd3d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::BoolArgumentProto *</type>
      <name>mutable_bool_or</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ad64dfd534d8e4d9c738ecb39430a4e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_bool_or</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ae9bc04148c3e407f788c0719504323cb</anchor>
      <arglist>(::operations_research::sat::BoolArgumentProto *bool_or)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_bool_and</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a6d05b7c78cc7c9ea4adaf410bb0ab086</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_bool_and</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a2b328a572737cfc26823c98bcec6ec40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::BoolArgumentProto &amp;</type>
      <name>bool_and</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>acd1eb701663490f35a869ae0029821a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::BoolArgumentProto *</type>
      <name>release_bool_and</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a3ccec574fa60b9de955695227a2efd23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::BoolArgumentProto *</type>
      <name>mutable_bool_and</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a7f9733e7139e307759fc4602dfd0b56a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_bool_and</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a0dccc441215330271deb5c98b51a9e4c</anchor>
      <arglist>(::operations_research::sat::BoolArgumentProto *bool_and)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_at_most_one</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a4d27d7f212e20be9bed29b988a228ea1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_at_most_one</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aa459a0b9c801b03a74d89884073420bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::BoolArgumentProto &amp;</type>
      <name>at_most_one</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a03c603d6b4eeab5423acacc1f98496b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::BoolArgumentProto *</type>
      <name>release_at_most_one</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ab851a997d7fb3cc3377e5cc7ac8088d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::BoolArgumentProto *</type>
      <name>mutable_at_most_one</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ad5a86f793f0fec20827f758347aca07e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_at_most_one</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aa1ccddfbfc49e86adf46ee7dcf782b28</anchor>
      <arglist>(::operations_research::sat::BoolArgumentProto *at_most_one)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_bool_xor</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ae33c7520fa3a6010d01b0bed238a41a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_bool_xor</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ade7b3062d3d4cd50a8a771f5c623467e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::BoolArgumentProto &amp;</type>
      <name>bool_xor</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a27b1a116b55d8003acd879e0c9af5f54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::BoolArgumentProto *</type>
      <name>release_bool_xor</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a346ae96c2bacba32a16e3526e491d9e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::BoolArgumentProto *</type>
      <name>mutable_bool_xor</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a0ee6dafe035cf2a2b34de199c3e070fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_bool_xor</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a5499c4d8c62e5fddd76edae19b28c859</anchor>
      <arglist>(::operations_research::sat::BoolArgumentProto *bool_xor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_int_div</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a8e694024366c39609e83916bf228525c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_int_div</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a1a49ba721ab0d72719427e2ea63a2cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::IntegerArgumentProto &amp;</type>
      <name>int_div</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ac98aedbccc413ad565665104385eb8b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerArgumentProto *</type>
      <name>release_int_div</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aba5451e0cf15021d15ef93dd0ecfd2c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerArgumentProto *</type>
      <name>mutable_int_div</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a965593a260f98b72401c6dd591a1c478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_int_div</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a79e178989442f33a380e4e1e09675eeb</anchor>
      <arglist>(::operations_research::sat::IntegerArgumentProto *int_div)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_int_mod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ae27d2c57e5fcf3ece47493864e05e6c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_int_mod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a8a52cf64c8840a2996a35e320c079304</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::IntegerArgumentProto &amp;</type>
      <name>int_mod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ada28832d5c3177a8d643b3fe60d85525</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerArgumentProto *</type>
      <name>release_int_mod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aea04332e976da951abe82bbc9d111865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerArgumentProto *</type>
      <name>mutable_int_mod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a9e17fd7855d21b3c061e523f4c17ffcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_int_mod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ab69ee8bfb94cc03e06224489d9601fc5</anchor>
      <arglist>(::operations_research::sat::IntegerArgumentProto *int_mod)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_int_max</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a15dc6cc84c0b2c8e75f4b9f869ea4bdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_int_max</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ae097560547ce4f1c8fac9e5c43398f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::IntegerArgumentProto &amp;</type>
      <name>int_max</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ae868376b0fb6f39a92b2de852dfcf528</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerArgumentProto *</type>
      <name>release_int_max</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a640d36ed728390f7e10b94884e90ea45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerArgumentProto *</type>
      <name>mutable_int_max</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a11a14f59bc17176e5fb38f4705803437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_int_max</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aae61c045e02d39891ecb5895bd52d2b3</anchor>
      <arglist>(::operations_research::sat::IntegerArgumentProto *int_max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_int_min</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ab797b2456d12310663e86385a30ef92e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_int_min</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a54adc16f1f475237bda78939bf9ef2b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::IntegerArgumentProto &amp;</type>
      <name>int_min</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ac22fa70288a89ea56585f776bd083757</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerArgumentProto *</type>
      <name>release_int_min</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a7fa575785f3d16348d2d062dcd6d00ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerArgumentProto *</type>
      <name>mutable_int_min</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ace0dfba4cd6fe07b264bc3f00a61e357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_int_min</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a3a7d708a1b6b811428425c944b2a4261</anchor>
      <arglist>(::operations_research::sat::IntegerArgumentProto *int_min)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_int_prod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>adb4b75e20479a3a3bac243fd4d4a03ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_int_prod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ac11569d8f764f319a79168b4152be94b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::IntegerArgumentProto &amp;</type>
      <name>int_prod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a3df8e61dddf8563c43760238caf53564</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerArgumentProto *</type>
      <name>release_int_prod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aa8a6058adda8a5fe3fd4e3cf58f1ffc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerArgumentProto *</type>
      <name>mutable_int_prod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a6f8c9a1b4fc19f1bda65d0831c37480f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_int_prod</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a00125c011fa695eb6febc1c309e63a60</anchor>
      <arglist>(::operations_research::sat::IntegerArgumentProto *int_prod)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_linear</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>abd5b36c1c0e1e2a0f4303dc7598bbcc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_linear</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a33e78410bd3b735ca279c41818daa690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::LinearConstraintProto &amp;</type>
      <name>linear</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>abdd556609679a9dd5d55808714a9ccd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::LinearConstraintProto *</type>
      <name>release_linear</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a7a2afe4818cafb9d335eb8c8d65ea495</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::LinearConstraintProto *</type>
      <name>mutable_linear</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aa70cf5d09d837abbe42bae58e70ebca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_linear</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a01a753b8ddf9d293498dcaf960970c48</anchor>
      <arglist>(::operations_research::sat::LinearConstraintProto *linear)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_all_diff</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a89ea5c26f5cfaacb41885e21b0739318</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_all_diff</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a10ee3f265f74a6e8eeb345eb9e92b815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::AllDifferentConstraintProto &amp;</type>
      <name>all_diff</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ae970851ed15ddb7c62e8c3c30f5b050d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::AllDifferentConstraintProto *</type>
      <name>release_all_diff</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a2f17eaf7115a57ea973dd6f0696d0e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::AllDifferentConstraintProto *</type>
      <name>mutable_all_diff</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a084726006cfced96fb4287ed3eea412b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_all_diff</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a971d4bb38f3ce6e6f05b0bd90e8cc1e0</anchor>
      <arglist>(::operations_research::sat::AllDifferentConstraintProto *all_diff)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_element</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a627718808956f9cb524bd2c14ebeb0c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_element</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a6430185c94e453e61ee566034b0992e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::ElementConstraintProto &amp;</type>
      <name>element</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a9f1abbc633e56b7b348d3b609ead7acc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::ElementConstraintProto *</type>
      <name>release_element</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a500f8a08b6b4cefb0a97b6e099b14ce2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::ElementConstraintProto *</type>
      <name>mutable_element</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>addb2cf23713cb60d8616735504e91872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_element</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a4cc74717757be245b38fbd3cc9510a97</anchor>
      <arglist>(::operations_research::sat::ElementConstraintProto *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_circuit</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a02b63f2b7366e5a96c07d7e6d73aabbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_circuit</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a1703e9ccd8b4242d429eed2bd489e356</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::CircuitConstraintProto &amp;</type>
      <name>circuit</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>afa730516e6940d146615bbe424b3c9ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CircuitConstraintProto *</type>
      <name>release_circuit</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a9240cbc42e2246a0e063f7251dd940aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CircuitConstraintProto *</type>
      <name>mutable_circuit</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>abe777d7758df71582184306ba8c5da7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_circuit</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ad855e9d8c1b392615686e1cf8dbad634</anchor>
      <arglist>(::operations_research::sat::CircuitConstraintProto *circuit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_routes</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a1c4a90046e3aa8a141cedc6c1e288d92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_routes</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a8b6942181a96fa5846db02593033bb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::RoutesConstraintProto &amp;</type>
      <name>routes</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a297017471bd201fbe1a9a4f52c30e9da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::RoutesConstraintProto *</type>
      <name>release_routes</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a4a94142f808ed752ede3fdae935dff8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::RoutesConstraintProto *</type>
      <name>mutable_routes</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>acef74e462acb705571c58402daccd50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_routes</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a43ffbdd6ff2f9bfa820e3dda7c69e49c</anchor>
      <arglist>(::operations_research::sat::RoutesConstraintProto *routes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_circuit_covering</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a8915ad7bc02b1cc182b748f2e2a04560</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_circuit_covering</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a02270d1584e5e9455f2e2cc29bf4c6b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::CircuitCoveringConstraintProto &amp;</type>
      <name>circuit_covering</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a7629bb3aa48dcbdce9da36c54105ccaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CircuitCoveringConstraintProto *</type>
      <name>release_circuit_covering</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a278b495f8ddd14f3acb86b75d32f2e85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CircuitCoveringConstraintProto *</type>
      <name>mutable_circuit_covering</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ad914f6fea2f7b7a17ef042aa08361f90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_circuit_covering</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aad655b896d353fa0df1303dd819e42fd</anchor>
      <arglist>(::operations_research::sat::CircuitCoveringConstraintProto *circuit_covering)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_table</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aeb08b4a9be82558eb8b8addc6d1cf5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_table</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a74d6706101d4479131d9bb7e7bc9cdbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::TableConstraintProto &amp;</type>
      <name>table</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aba9c5d11cb96089802b971e4cde83d42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::TableConstraintProto *</type>
      <name>release_table</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a55eb257594f88832d263858f5e8dcbf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::TableConstraintProto *</type>
      <name>mutable_table</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a166b08fc0567630f2552a03d58993a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_table</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a12fff3aa9f1aadd9e1eb2d023328e990</anchor>
      <arglist>(::operations_research::sat::TableConstraintProto *table)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_automaton</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a7e7543fa5d1aba41534ca4852b1300d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_automaton</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a62b9b8410dac5bfe9a6ed0847c15c4c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::AutomatonConstraintProto &amp;</type>
      <name>automaton</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a6a44efc50a6d420dde804b2c13a29d2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::AutomatonConstraintProto *</type>
      <name>release_automaton</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a8e4a8b7e77ee1f85ea1fbc8d779470aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::AutomatonConstraintProto *</type>
      <name>mutable_automaton</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a77f4ca4f6e1d27b8be0a97bdc466757c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_automaton</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ad690d8dc521a1a7eff040cd75bc6d061</anchor>
      <arglist>(::operations_research::sat::AutomatonConstraintProto *automaton)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_inverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>af600f40a1add13e35a9cb4fd5535254c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_inverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ad13881856cc0e4dc3185bbee36aa6527</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::InverseConstraintProto &amp;</type>
      <name>inverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a552864982e1aac5d5b9fd81f2411b610</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::InverseConstraintProto *</type>
      <name>release_inverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ab068ab670b940effbccb19eb240e3af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::InverseConstraintProto *</type>
      <name>mutable_inverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a37e03920cb15a23dbbdc0dc713829695</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_inverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a99bbc4d81db8b146bcf5485eb3885a62</anchor>
      <arglist>(::operations_research::sat::InverseConstraintProto *inverse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_reservoir</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a72469434295122d4bdccf2986c3bd385</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_reservoir</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>af902a3a65702888a4529f4117a5604bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::ReservoirConstraintProto &amp;</type>
      <name>reservoir</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a83d29e180d4186e53e1d286f711ffce0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::ReservoirConstraintProto *</type>
      <name>release_reservoir</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a3786f26c22e5f492c29c392a3ac9cefa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::ReservoirConstraintProto *</type>
      <name>mutable_reservoir</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a908bb0d4164b848a84057736b4a8c724</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_reservoir</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ab9798c39d2f8a9b708ea485edc615d0d</anchor>
      <arglist>(::operations_research::sat::ReservoirConstraintProto *reservoir)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_interval</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a906c8887a15a9e2e062e3c94e0485af8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_interval</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a34d38697419b83574126ade5a3343ae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::IntervalConstraintProto &amp;</type>
      <name>interval</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ade0baf9bbe5b09d470ab30ae8b730cc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntervalConstraintProto *</type>
      <name>release_interval</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a8664980a825a616233930f9b6529cfce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntervalConstraintProto *</type>
      <name>mutable_interval</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a86f1152bd1888743f98a99b789d3295b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_interval</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a4900ad42598ced45bf0dcafaa13834f5</anchor>
      <arglist>(::operations_research::sat::IntervalConstraintProto *interval)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_no_overlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a2b5e2fd804e863cc9610fb0cdfd5d6cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_no_overlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a6b7cda7ca614d61c7d30bc7504beed98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::NoOverlapConstraintProto &amp;</type>
      <name>no_overlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a28a10d059e4d7ca2af29486c6bf3797c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::NoOverlapConstraintProto *</type>
      <name>release_no_overlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ac46d571f03e55688721d3a8fa86a935b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::NoOverlapConstraintProto *</type>
      <name>mutable_no_overlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>afb596d34d84e861a2295ff3550db4c86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_no_overlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ac43a15f789057ccd03d25225811f4579</anchor>
      <arglist>(::operations_research::sat::NoOverlapConstraintProto *no_overlap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_no_overlap_2d</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>af158df9c07131ce5b103cbf94bd9d42b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_no_overlap_2d</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>abcb1ff6ac7cf6b45215b62deb5f32ab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::NoOverlap2DConstraintProto &amp;</type>
      <name>no_overlap_2d</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a94a7627048af8685d765c873f685f167</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::NoOverlap2DConstraintProto *</type>
      <name>release_no_overlap_2d</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a2c25158af83e9cf5adac4daf3432dda5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::NoOverlap2DConstraintProto *</type>
      <name>mutable_no_overlap_2d</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aa2e8622d488f2bf1b7a15031eef3c3d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_no_overlap_2d</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ae5f3f51b59a1d676368d619011ed5127</anchor>
      <arglist>(::operations_research::sat::NoOverlap2DConstraintProto *no_overlap_2d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_cumulative</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a5d955b99d5d06123b64685022b2e0e9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_cumulative</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a321e8a0e5d4b7e6f2dc6326468712846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::CumulativeConstraintProto &amp;</type>
      <name>cumulative</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a15912fac98ec813ba33511cdcd822eb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CumulativeConstraintProto *</type>
      <name>release_cumulative</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a70e56256d09e73b0d260974e421f4541</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CumulativeConstraintProto *</type>
      <name>mutable_cumulative</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a6a7efe03d69f3f9e62c947264be11aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_cumulative</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ac4389cff5ade3f8aa8676338593c1bac</anchor>
      <arglist>(::operations_research::sat::CumulativeConstraintProto *cumulative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a38e1a9bae801a20c0e53d6e641f2266a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstraintCase</type>
      <name>constraint_case</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a08e8450b51a1cca8d87966eec73a3c5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a70b6960ffe28e5091a48a9ef5641c0eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a6418169b66b7c446772bc96bdccadc6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aa8803a53504ca66c79280126febce054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a99ba01adbb6e53724371a73b20d3d030</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a05456fe94d9d3faadbe82adf75dfd092</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kEnforcementLiteralFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a885d5eff5834669d4530d60229d0cafe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNameFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a94e106954629e7915d651f69cdb8d840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kBoolOrFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a97258948e7274277dbfe0e3abc212b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kBoolAndFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>af912de3fadfeccaa8cd0752a3bdbcf7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kAtMostOneFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a7a1157f4641665b8de2f2a775aeb8a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kBoolXorFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>acc755737adc1475c9122062d325e79fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIntDivFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>afa4ca15e85aa42caa479dc427f2f6ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIntModFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ac99b0684244b5c4b59b2c08652cf4357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIntMaxFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a7ae1372250adbdc1ed846a532b7d5bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIntMinFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a4cd8784612e115cc60aee0dad6b1e61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIntProdFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>ae6db68f568300ad894ec1374e350c538</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLinearFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a76f012cccdad501b9233a33d15582572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kAllDiffFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a55acb9786dfd3d5006e126d5c6ef892a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kElementFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a503c0d40d6d4d912c631f9db8314b941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCircuitFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a2134a22b274fb6f603caf140c3303cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRoutesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aa254a93166f6c631d9daf99bd8f94587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCircuitCoveringFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>af01618478588d3efae9e1a66eab51fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTableFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aa4e3896b0665bf4b39b442b67b8c9399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kAutomatonFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a338adf39e1fbb0cbeabb42acb0781da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kInverseFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a63ba14faa7112beed8b1459910f48e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kReservoirFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>aa3be03774f769cdd2a1e138493dee736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIntervalFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a20641009a768b0c458a93a7637042311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoOverlapFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a7e0021d4dc9b5d2793298bc06ba0f056</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoOverlap2DFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a3063681fb867d8da0f5512e81bbcd6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCumulativeFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a9c53395c32bcae6681fca96aa1038a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ConstraintProto.html</anchorfile>
      <anchor>a42cd6e1de56b3b4b6141435ac47d9c19</anchor>
      <arglist>(ConstraintProto &amp;a, ConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CostValueCycleHandler</name>
    <filename>classoperations__research_1_1CostValueCycleHandler.html</filename>
    <templarg>ArcIndexType</templarg>
    <member kind="function">
      <type></type>
      <name>CostValueCycleHandler</name>
      <anchorfile>classoperations__research_1_1CostValueCycleHandler.html</anchorfile>
      <anchor>a1b62936a1f89c012e183861069715e58</anchor>
      <arglist>(std::vector&lt; CostValue &gt; *cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTempFromIndex</name>
      <anchorfile>classoperations__research_1_1CostValueCycleHandler.html</anchorfile>
      <anchor>aab4c66b41c942bd6829688d6714aa141</anchor>
      <arglist>(ArcIndexType source) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIndexFromIndex</name>
      <anchorfile>classoperations__research_1_1CostValueCycleHandler.html</anchorfile>
      <anchor>a537baf6f7affea8a66e36dd158827dac</anchor>
      <arglist>(ArcIndexType source, ArcIndexType destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIndexFromTemp</name>
      <anchorfile>classoperations__research_1_1CostValueCycleHandler.html</anchorfile>
      <anchor>a2ccf134a7aed1ea8eaf972a932853c4f</anchor>
      <arglist>(ArcIndexType destination) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CostValueCycleHandler</name>
      <anchorfile>classoperations__research_1_1CostValueCycleHandler.html</anchorfile>
      <anchor>a54662c4637c7f7b59b14fb5627e9cdad</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::CpModelBuilder</name>
    <filename>classoperations__research_1_1sat_1_1CpModelBuilder.html</filename>
    <member kind="function">
      <type>IntVar</type>
      <name>NewIntVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a0887a2fe4518bde7bbde18f592b6243f</anchor>
      <arglist>(const Domain &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>BoolVar</type>
      <name>NewBoolVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a8fc4a0c717f985687d63a586dba04641</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntVar</type>
      <name>NewConstant</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>adac551c8b80fc7bdd7b30779fd20a4ea</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type>BoolVar</type>
      <name>TrueVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a6dc655a67c5213fcefb82a213dac5e2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoolVar</type>
      <name>FalseVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a9a53531099bebddbf54dd15418817326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar</type>
      <name>NewIntervalVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a4e1c85e161ee8e50f2f2162cd7294d03</anchor>
      <arglist>(IntVar start, IntVar size, IntVar end)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar</type>
      <name>NewOptionalIntervalVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a99c82eca478306942b3aed3372b38384</anchor>
      <arglist>(IntVar start, IntVar size, IntVar end, BoolVar presence)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddBoolOr</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>ae8bd984917b305dc49abae6c19b69ea3</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; literals)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddBoolAnd</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a3088d984ab4874140f7c367dc457ac0f</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; literals)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddBoolXor</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a18d2ca2be01dd3e67893f4e1dbe4af43</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; literals)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddImplication</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a43ca3f9c073ea5078c1abd3bb0c563d4</anchor>
      <arglist>(BoolVar a, BoolVar b)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddEquality</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>ad941d4f0156fc746c4ed12790bce7af7</anchor>
      <arglist>(const LinearExpr &amp;left, const LinearExpr &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a7a718730caef4f258e1cbbb2e3e3b452</anchor>
      <arglist>(const LinearExpr &amp;left, const LinearExpr &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddGreaterThan</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>acf4c5429ec08207e147b65bd1330ba92</anchor>
      <arglist>(const LinearExpr &amp;left, const LinearExpr &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddLessOrEqual</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a4f1c8c11f9f840728e5c037249192b8f</anchor>
      <arglist>(const LinearExpr &amp;left, const LinearExpr &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddLessThan</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a7cf9ff9df25ff433286b4f5bda41f990</anchor>
      <arglist>(const LinearExpr &amp;left, const LinearExpr &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddLinearConstraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a562a899753d60f28ae87ecb93e96b797</anchor>
      <arglist>(const LinearExpr &amp;expr, const Domain &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddNotEqual</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>aa64c33dd1487bf4f0d575edf33ef2dc9</anchor>
      <arglist>(const LinearExpr &amp;left, const LinearExpr &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddAllDifferent</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a605cc0b904f4d9b2de5fffbf6fa40c68</anchor>
      <arglist>(absl::Span&lt; const IntVar &gt; vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddVariableElement</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a001974a3f1f5e9d791ae10cd435f07cf</anchor>
      <arglist>(IntVar index, absl::Span&lt; const IntVar &gt; variables, IntVar target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddElement</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>ada1b4fad9b4f017f9009ce3761123a8b</anchor>
      <arglist>(IntVar index, absl::Span&lt; const int64 &gt; values, IntVar target)</arglist>
    </member>
    <member kind="function">
      <type>CircuitConstraint</type>
      <name>AddCircuitConstraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>ad5ec615a9107ebcb8a7516bb3ccfbcd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TableConstraint</type>
      <name>AddAllowedAssignments</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a7d05d91ffdd70f16ad170e25fd47e200</anchor>
      <arglist>(absl::Span&lt; const IntVar &gt; vars)</arglist>
    </member>
    <member kind="function">
      <type>TableConstraint</type>
      <name>AddForbiddenAssignments</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a05b1310e7cfde91fbdc10798a84a2345</anchor>
      <arglist>(absl::Span&lt; const IntVar &gt; vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddInverseConstraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a0c391768bc423a43875a7867ee247a4b</anchor>
      <arglist>(absl::Span&lt; const IntVar &gt; variables, absl::Span&lt; const IntVar &gt; inverse_variables)</arglist>
    </member>
    <member kind="function">
      <type>ReservoirConstraint</type>
      <name>AddReservoirConstraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a5d2c35d16d6b9cb25254ca6d3b963ac8</anchor>
      <arglist>(int64 min_level, int64 max_level)</arglist>
    </member>
    <member kind="function">
      <type>AutomatonConstraint</type>
      <name>AddAutomaton</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a5738c98c07c2e0ec747877eb3813a134</anchor>
      <arglist>(absl::Span&lt; const IntVar &gt; transition_variables, int starting_state, absl::Span&lt; const int &gt; final_states)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddMinEquality</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a967f11af5e1cfb143514e09925628be5</anchor>
      <arglist>(IntVar target, absl::Span&lt; const IntVar &gt; vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddMaxEquality</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a902eb5d208511f7da9cdd9cde9a79c45</anchor>
      <arglist>(IntVar target, absl::Span&lt; const IntVar &gt; vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddDivisionEquality</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>adffb8e57735762a6f321279f2e60ae65</anchor>
      <arglist>(IntVar target, IntVar numerator, IntVar denominator)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddAbsEquality</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>aa1eae45130c127fe6cac9805736216ef</anchor>
      <arglist>(IntVar target, IntVar var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddModuloEquality</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>abd73201c6fbc455ca4783ff99ca2eed1</anchor>
      <arglist>(IntVar target, IntVar var, IntVar mod)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddProductEquality</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a991b6a2a16def3962ccc5727004638db</anchor>
      <arglist>(IntVar target, absl::Span&lt; const IntVar &gt; vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>AddNoOverlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a89c4590eaf404f0ef3b80d4ce584fbda</anchor>
      <arglist>(absl::Span&lt; const IntervalVar &gt; vars)</arglist>
    </member>
    <member kind="function">
      <type>NoOverlap2DConstraint</type>
      <name>AddNoOverlap2D</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a10d61bc6bc9584cadfc0b87537ada9eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CumulativeConstraint</type>
      <name>AddCumulative</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a6620906cabb980393d9433df9a7f7b70</anchor>
      <arglist>(IntVar capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Minimize</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a0faf578c69fe9ae80ee0ea9f671dc5e7</anchor>
      <arglist>(const LinearExpr &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Maximize</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a3559ac1f9f840b2d5637f1d26cd18f0b</anchor>
      <arglist>(const LinearExpr &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ScaleObjectiveBy</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>ac93a7c7467278afb9eac2bb4a8dec6d3</anchor>
      <arglist>(double scaling)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDecisionStrategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a4d0cfb231f4bed2420d0aff928f3a980</anchor>
      <arglist>(absl::Span&lt; const IntVar &gt; variables, DecisionStrategyProto::VariableSelectionStrategy var_strategy, DecisionStrategyProto::DomainReductionStrategy domain_strategy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDecisionStrategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a81d8ef14e29732b81f56778090bfa547</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; variables, DecisionStrategyProto::VariableSelectionStrategy var_strategy, DecisionStrategyProto::DomainReductionStrategy domain_strategy)</arglist>
    </member>
    <member kind="function">
      <type>const CpModelProto &amp;</type>
      <name>Build</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a8e1b64644f124be491431bbae9d5d843</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CpModelProto &amp;</type>
      <name>Proto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a791f54d4afefc05d6462fa9a9f1f304d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CpModelProto *</type>
      <name>MutableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a4b3320604b4344b5bea17c5fae1ed7ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CumulativeConstraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>a9d31ad87d4edee55fc3cb5e239077720</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ReservoirConstraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelBuilder.html</anchorfile>
      <anchor>ae0ff478f6506cb705bbc1737598276f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::CpModelProto</name>
    <filename>classoperations__research_1_1sat_1_1CpModelProto.html</filename>
    <member kind="function">
      <type></type>
      <name>CpModelProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a3a6863cd8da35857ee1f4a7f4eecdcf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CpModelProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a581b38d56c54d82d6a423a4e0d53c428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CpModelProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a8d94acf76d5ec3e2c7041eb2a6523247</anchor>
      <arglist>(const CpModelProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>CpModelProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a7006db70a302c79981b9660bbe246958</anchor>
      <arglist>(const CpModelProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ae19b07a23175dc8868ddb41b86fca418</anchor>
      <arglist>(CpModelProto *other)</arglist>
    </member>
    <member kind="function">
      <type>CpModelProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a5a2f738f83003403a34641886d8ab5fc</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>CpModelProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>af9bea058cd2cf13e0433cfd3bcc35be9</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ae235c19572e0a8d48b42e9c31ab78b0b</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a25c173cba523e37dfbb7190edc8f3073</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a0730b50923f4a8db369fd5b72e8f9158</anchor>
      <arglist>(const CpModelProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ab70cec34be482a99dd67e513d4d0e189</anchor>
      <arglist>(const CpModelProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ad4f8e50f3dbc53f66500166566a25322</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>aef12d3f93b57b1e454b5133479043f3f</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a8c291169971c79711a156b73747d13e3</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a5a05243a19689d990534a2f09ca22898</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a98978db1c3b796c8849bfe0e7ffb159d</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a6e32a52282d87eb1a2e5bc21bfd60180</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a83c440eb955944077880bf5eb881c763</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a391a9b50628ddd3e3c7ab3bdd76ca21c</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>variables_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>aabdfc884176585b79f65cb603c2171ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a481b1c7de97cede6106505b57b934d2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerVariableProto *</type>
      <name>mutable_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a16b8cc58fa3e670712e9cfe342e61be9</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedPtrField&lt; ::operations_research::sat::IntegerVariableProto &gt; *</type>
      <name>mutable_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>aff4a670eb1ff293d739a513b02cc9fc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::IntegerVariableProto &amp;</type>
      <name>variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ab0dda4e799f065179f785ede9a0a2540</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerVariableProto *</type>
      <name>add_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ae13cc27e3f950e477d93af7243678eed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::operations_research::sat::IntegerVariableProto &gt; &amp;</type>
      <name>variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ae89b32d1155e884b833edf049b201fc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>constraints_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a6c07b425cf6992974fd2fea324a09018</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_constraints</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a64d13d61b9464ac98aad9659c7772a7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::ConstraintProto *</type>
      <name>mutable_constraints</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ad81813da437a67ae5f1a28b8fe290614</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedPtrField&lt; ::operations_research::sat::ConstraintProto &gt; *</type>
      <name>mutable_constraints</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a70fe8587686d1a4f37077be394689a5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::ConstraintProto &amp;</type>
      <name>constraints</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>aef37b42d42f179a384a7cf514c58ba5f</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::ConstraintProto *</type>
      <name>add_constraints</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a78bf9851b0383163d8c329d5e2e49d29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::operations_research::sat::ConstraintProto &gt; &amp;</type>
      <name>constraints</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ac1ff55db77b00aaf4544c150d117fc93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>search_strategy_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a7664d357b05809f85f8fc57b8f392f27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_search_strategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a1309970796fa7f2700ee1c65ea3e95e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::DecisionStrategyProto *</type>
      <name>mutable_search_strategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a1ce4cbc7e9e322f32f6506857df5eb2b</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedPtrField&lt; ::operations_research::sat::DecisionStrategyProto &gt; *</type>
      <name>mutable_search_strategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a089063f63c2e05389038cf4b5013047f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::DecisionStrategyProto &amp;</type>
      <name>search_strategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>aed202906f50cae994afe3b22ee127188</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::DecisionStrategyProto *</type>
      <name>add_search_strategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a7dd859d4f12c6eb072d4bde18c079eb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::operations_research::sat::DecisionStrategyProto &gt; &amp;</type>
      <name>search_strategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a29ac54c8b2662ac8d6b0fe482bf8c7e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>aea06a33306cfcc59a3883605eae88ae1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a3ea206928327e817ef207fd22d5eb51d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ac90647359d886780a3479b14929277fa</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a0e2f76fec48748171562c5487befd14c</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a9f6a25a2e5c97ddc8249e75c3e8304fc</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>mutable_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ad57481a60fda7d4d85bad549b7ce97ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>release_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>af43f89c8f28f6162f97c906bf51925aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a0a2acf3624890052ba0776f4cb24e636</anchor>
      <arglist>(::std::string *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_objective</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a4b14df8e53579aa0d04cd3afa1deac65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_objective</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a549d3a431dc7805c24113a73c247b589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::CpObjectiveProto &amp;</type>
      <name>objective</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>aefef9641465bac65a80ebc7bae6fca42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CpObjectiveProto *</type>
      <name>release_objective</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a53b2d50c3c5bb97bb699fd1104cce289</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CpObjectiveProto *</type>
      <name>mutable_objective</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a0433e54c873c86a851045f285094d862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_objective</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ac8c9efd6c1c1c1277169e1b6825c128f</anchor>
      <arglist>(::operations_research::sat::CpObjectiveProto *objective)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_solution_hint</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a239b08538bb8d00a5ad6be06352e4b9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solution_hint</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a33550fc75c4e81b2b07b57257e281442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::PartialVariableAssignment &amp;</type>
      <name>solution_hint</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a55742aeabceb438456622936acfdcf5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::PartialVariableAssignment *</type>
      <name>release_solution_hint</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a587344b4588cbf94ced74470484e7f1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::PartialVariableAssignment *</type>
      <name>mutable_solution_hint</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ad017198cb8da599254e1b567089a579b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_solution_hint</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>ac5c8adcf1815ef6e824f5aeee16be357</anchor>
      <arglist>(::operations_research::sat::PartialVariableAssignment *solution_hint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>abeb0e6462cc596404e3c23684fb76ce6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CpModelProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a2a76d26e21db4f7dbabf47ce56e14cff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a460c24450ee234ed7107612bba219874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CpModelProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>aaaff450069b51136ac66c47da10e4150</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a841b288514817e8b69334f464abba834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVariablesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a2d76e6041716e8bec03abff55da7898d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kConstraintsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a4c1a14de2fadf9805b396eb35b3cc8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSearchStrategyFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>af73a70abb66aae35b70e1cfd9bd0cd86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNameFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a60bffa6248898aefddf2f219e1de5603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kObjectiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a2f5cc41ad6ec0a688bd0c1b26f887c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolutionHintFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a016501c8207a07bdb7ae1f63e7b58b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpModelProto.html</anchorfile>
      <anchor>a934d9868f4bfcada979a310ea97ce987</anchor>
      <arglist>(CpModelProto &amp;a, CpModelProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::CpObjectiveProto</name>
    <filename>classoperations__research_1_1sat_1_1CpObjectiveProto.html</filename>
    <member kind="function">
      <type></type>
      <name>CpObjectiveProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a620838bd6b5a457ad34413779c887ebd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CpObjectiveProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a6bea91804357f9ea297ca7103e62e7d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CpObjectiveProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a986e1db3d16a938a79de066bf2267676</anchor>
      <arglist>(const CpObjectiveProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>CpObjectiveProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a94eb71df33b1b12bd25c19840e09ec61</anchor>
      <arglist>(const CpObjectiveProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a41d50989e1178b8a17a3b81da6ae87f5</anchor>
      <arglist>(CpObjectiveProto *other)</arglist>
    </member>
    <member kind="function">
      <type>CpObjectiveProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a30a53cda9025d2dcb13b0e3829c8f683</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>CpObjectiveProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a59fdb7aeb16e0749952ad2d2894c7dc5</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a1a3b2a49a3a3f3dc2a8a467d8bb000da</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a16b3d70ac402e8bbb9b712c9ba4f7931</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a10fc26ec15976625937085e3391b22b2</anchor>
      <arglist>(const CpObjectiveProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>acf6e32b5f5fa3a80631511213cab224e</anchor>
      <arglist>(const CpObjectiveProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>ab03e7e5ae7254f1801eab53f7fad0fea</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a12d7f812453d90f0817ff8b813b3c1eb</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>aac875b2a52a25f603afe00f1e7fbc85e</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>adb93a3069513773e4ae2d5a2ab4fe1d9</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a80a3dd769e2954937a625714253c0816</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a185e720a7608443d599e574ecb16c212</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a36064aad65cc24fed204f87490770ec3</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>ac3c8fbf32858b2eccbb47b7e08d927d4</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vars_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a6953d6ac4f587760b73093bc042ead8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a1b8300110c8ebc0ba49b79862f0bdcaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>ae0767a5ed87b48013cca110686f95a0d</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a90c549e8764b32f322f51f2ac3df7090</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a3bfff65947efdceb3cb71aee6277321a</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a8d6228eb6697463c62782dbdd59e61ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a81713efe54f8e325fcef24608c95aa2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coeffs_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>aacf4c11bd3601c752879650eeb7a23fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_coeffs</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>aaec1809299acb1c9d00804e4cbb0d7ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>coeffs</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>aaf63bf3b72009f6ad8fb868286e1d7aa</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_coeffs</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a7d87ecea77ff3f1e0e95b90b43c0537e</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_coeffs</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>ac0a8b1e3648120495074c53a53c7f853</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>coeffs</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a5aeea6f884c8f8ef34dc65aa6d6fb045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_coeffs</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a98a338c74125708ff0e1f5d7e13176e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>domain_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a95eba9b14144bafff777d9e8d6fba5c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a882f85c944fd411cb8790486077d2b92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a882a3c06be3bfcccc52fc729e31aae71</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a3a256036c6d0f35a390b0301ad53272d</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>af22e8e07cea0ee83e347e83ad4afcc91</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>ac768393d3f03b5b37a9fc17a84cc6fb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a6c04700d32629f2d84f164013d142100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_offset</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a8df90ca9dd35a6487eebecb2912867bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>offset</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a0b597569cbc9b6ffe67e4ea305f5502f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_offset</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>ac22b63c8b32dee15c16f7641455def50</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_scaling_factor</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>abc64f08187fb49197f1532e5472f17ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaling_factor</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a5f5cfd59f86f5639add0563573fb4272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_scaling_factor</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a08859db702c2230862ee64643ac2359a</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a7f902003a1bc9cfb75c39770fe0f724c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CpObjectiveProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a5ae43f92a69bcb77da0482a7d06b6816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a89c0e86e4ed6005898f613b7063d7efd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CpObjectiveProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a3c6fdf99559c082a388918e9ae1331a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>af1bffd868afdf3a4fd307ff87cb0c175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>acd178030a57356735a90ca13790e18e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCoeffsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a9ed8cd2c7baa42d2adf867e67b261373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kDomainFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>ae977c190764af3d6b8bf909d668051ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kOffsetFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a44dc31204c1bcb76742ed5b19cb0ffca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kScalingFactorFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a8b940c45613b3d3e54249c54ad1a3b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpObjectiveProto.html</anchorfile>
      <anchor>a87cd08dbce056654f4fda7da1018240f</anchor>
      <arglist>(CpObjectiveProto &amp;a, CpObjectiveProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::CpSolverResponse</name>
    <filename>classoperations__research_1_1sat_1_1CpSolverResponse.html</filename>
    <member kind="function">
      <type></type>
      <name>CpSolverResponse</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a7533dc6bf9b4cd31c3831f05fd96e32f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CpSolverResponse</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ad10a69d040a520925b7b8cf2483a18fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CpSolverResponse</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a5463f3cb40b155256f8b70e137831053</anchor>
      <arglist>(const CpSolverResponse &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>CpSolverResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a2440c897e10a4669c114233b20c83572</anchor>
      <arglist>(const CpSolverResponse &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a13fbcccd93fe1aa45ef24fc24ac5eec8</anchor>
      <arglist>(CpSolverResponse *other)</arglist>
    </member>
    <member kind="function">
      <type>CpSolverResponse *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a0ae8141b90f2eb0dc9b2c1a7335e657a</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>CpSolverResponse *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a2d52be86282bcfc6f32c450f238151db</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a52398ec87a8eef51792a6d1d5ccac222</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aedc8a90df52dc4fa12df7d45837158e6</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ac958eb487e6a724b253b6a0b1bbcd04a</anchor>
      <arglist>(const CpSolverResponse &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>adb42e4e72d9cafe3b0f678b7ae8912a5</anchor>
      <arglist>(const CpSolverResponse &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a20f3134be24b60cc89f859f0e786f9bd</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ad627400c97bda3f8d3f239db636d7984</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a92b9a9292a30d28b7255189c660751a9</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ad11a23afc428cf6f15b37ea6058b1148</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a6beb02f0e89a3f8c14c6d8c4c0c65510</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a7faaf04ada1ae344cb1961adbce17557</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aed6a825b81a8bf2fbbd2f16f23d48491</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a06943f9db338eb2d8e9ec0bb59568a38</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solution_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ac80fa3122294b5afd18d690dc4f8da01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aada3b809e04f9bfb9b8c8edcfbb63052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ad2aea702a7bb2f89b141dd215889b303</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a3bed20993a23e4289e1cc4e8040df19e</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a146a48ba2588d930b60a2322b25cb941</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ae81a5faff5f0737e33313a2014a910a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a6a98194fe4ecb943c42253f50d4927b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solution_lower_bounds_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aa27ed063d0d32735aaee639b63bde40d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solution_lower_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aec7e29b71d3cb1be95372d0cc31e6605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>solution_lower_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ad9b271303d6457fd16e3734c200a1896</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solution_lower_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a111fb1a1152fd9253ee989cf37dc3cf6</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_solution_lower_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a7530e4b6478cda7692ba9abed5bd83da</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>solution_lower_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ac1603ca53ec276b56fad7cd49f4c514d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_solution_lower_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a642e0f917b425929feee0718975db212</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solution_upper_bounds_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aa7b1273e37e36b92856801a2002f8fb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solution_upper_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ac56da3a2a222fd777380deacdb62181e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>solution_upper_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a7847cb3bf67c9d6cb3d529f0bd13f4e0</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solution_upper_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a5a3bfa474c45f6b439114f6dc99859ef</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_solution_upper_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>afd43c080ad197f5f2b56c6e02b7892e9</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>solution_upper_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a06d1a1b86b070012e2d3daf535e575fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_solution_upper_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a9f4b8686f5aa21a686284bdd555400d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tightened_variables_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a10957df3ad171812c136f5ec2ee6133e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_tightened_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a3fa217fe7e8527d8aa10c1a48ceed791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerVariableProto *</type>
      <name>mutable_tightened_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a5498e1deb65e13696947219c6dc4929b</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedPtrField&lt; ::operations_research::sat::IntegerVariableProto &gt; *</type>
      <name>mutable_tightened_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aec506bbb3cf249e382ae7dd934b3bb73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::IntegerVariableProto &amp;</type>
      <name>tightened_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a04eaf4fec82c981aefd7193c4ad27136</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerVariableProto *</type>
      <name>add_tightened_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ae3a8d933bc96bc411aa283b0a5ae53a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::operations_research::sat::IntegerVariableProto &gt; &amp;</type>
      <name>tightened_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a96a43fb3e1cadb8cbd38a1d6d39cc07e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solution_info</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a300de1d1026383c58ecbe3c51be7febd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>solution_info</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a08f559112ba62830cc2bc71853e874c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solution_info</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aadc89ed59fea8a3f2a683215df897325</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solution_info</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a672ca3aaf1c1edb4a6394dfff847fcfe</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solution_info</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ab00253b2bbbd54e718584fb72c55c7b1</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>mutable_solution_info</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a7007d548e08343070631d76e8608150c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>release_solution_info</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aac94fa47e35567ed306c239b87d4b542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_solution_info</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a92261c5bd393b986560be9dcfbed8f5b</anchor>
      <arglist>(::std::string *solution_info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_objective_value</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a88b05cc454e570e869cd06a46cf9b649</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>objective_value</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ad7227954cb9e6d46f71a0c86aef23c5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_objective_value</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a98e40b4e96dc27df6b48519c51f4386a</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_status</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>af3d6089fc8b5fcae996639b09fb799cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CpSolverStatus</type>
      <name>status</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a62b908faa95a5d39a98a4d25362fa92f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_status</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a62a6114efcebe1f88e8a48c311ea2b2c</anchor>
      <arglist>(::operations_research::sat::CpSolverStatus value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_all_solutions_were_found</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>afd2e2976721753a7ee1c5b95e09b59e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all_solutions_were_found</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ace1da02cda722b2f39096e496dccd8ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_all_solutions_were_found</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a5579227d76199aefaa7caf12d1f6038b</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_best_objective_bound</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a67b4a954f2e109df30270b4d93597e81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>best_objective_bound</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a6dcad9fae32425632ccabec70215c66d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_best_objective_bound</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a870f65a87b364046814585200ae9aa3c</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_num_booleans</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a3bb99f57f6a3f7b8685324307e406bb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>num_booleans</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ae28cd938c13b82c21b8a7db8c2d1ea1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_booleans</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a620dd7f4c6098bd16fb6350fc05b712e</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_num_conflicts</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a818361f6305c54210b3e41051ed822be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>num_conflicts</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ab46b0c684717e6beb1f70422ff1370b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_conflicts</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a8ea2cdb806e113bcc07df0f4743a9e55</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_num_branches</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>afb45b3e52697edae151112d72d357052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>num_branches</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a0230bf1cb96e8cb86e43df75ec77dafa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_branches</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>adab0c2dac568e1252fafa57675f6b454</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_num_binary_propagations</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ae674cc8d35deb0b290dbefc52be06026</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>num_binary_propagations</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>adfee8503447839921133b90d36113c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_binary_propagations</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a90d5547f0b9438c6e39be3c7c12d6c3a</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_num_integer_propagations</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a22ab55fb4c3769bb5d9b30830c8cb2b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>num_integer_propagations</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aacb7bbf40a532dac20ec63bddccaf31e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_integer_propagations</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a1d245a3aa20f475e5f6ad19b8268649b</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_wall_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aed4b19f1cd10eab401e57e987e8badc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wall_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ab2511bc344b6ba7aaf8099e36e8278e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_wall_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a8436b4625b35f50d14d801b5d015159c</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_user_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a53b303773fee1a228d3d7a6f6c99c437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>user_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aed41c39ab4a816b8fad7cd76018edcf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_user_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a65348dbb198c0177ce5c1b1947b5b916</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_deterministic_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a65699715fa9e478e31a5bf12f6154913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deterministic_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a354d9e195cc5ab0335cb17568552e6a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_deterministic_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a01144ebd72e69016e7695793feba23c7</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a3869369049ac1e6f4d9707054002d95c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CpSolverResponse &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>af3803f6ba5a19de049f31362452725d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a2394145469ceb6f9ef7fa0d505ae98a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CpSolverResponse *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a85332793da5848376a8b777b1c64e5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ade7cb13b9b5c928f68104af4e10500bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolutionFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a9ae3661185729b78f14faa1527c78983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolutionLowerBoundsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aa281d07caeeefd770935f86f6596c0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolutionUpperBoundsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aa6cb4b1c2314086e150b39c72521ef3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTightenedVariablesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a60ade5cc3ad900dd6cf9daf2a191e727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolutionInfoFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>aa7972cf2565b480664b3944af5803ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kObjectiveValueFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a19038bdb37547f17672c3dd99c4d0342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kStatusFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a7e1aba2bd7b3dc22290e42c5c04be024</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kAllSolutionsWereFoundFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a950bcdf35e2ca769fa0dc44f6f183b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kBestObjectiveBoundFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ab02ebb794c8dde5c4dc9ce9d3ac5b464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNumBooleansFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ad98245f572ddeb2e90738dccd1de4d4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNumConflictsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>afb27711b2d082d1c467a42e1ee05d6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNumBranchesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a4cd01ad4c27b9497df040454df90d1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNumBinaryPropagationsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a8909a22b5f35b39f96f48ce23f2e706d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNumIntegerPropagationsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>ad919e41605d21cc83b7dcdf7c5029115</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kWallTimeFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a15ce7d0fe6b337270735f9cce14d94b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUserTimeFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a6a22c2a70b1e1e8d808347a82e6ab1b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kDeterministicTimeFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a6dc68531ed444656ec912a0ad1053b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CpSolverResponse.html</anchorfile>
      <anchor>a18137eef7618a47d519524eaca7eb565</anchor>
      <arglist>(CpSolverResponse &amp;a, CpSolverResponse &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::CumulativeConstraint</name>
    <filename>classoperations__research_1_1sat_1_1CumulativeConstraint.html</filename>
    <base>operations_research::sat::Constraint</base>
    <member kind="function">
      <type>void</type>
      <name>AddDemand</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraint.html</anchorfile>
      <anchor>aded0689c7c92b1a7739758150131b531</anchor>
      <arglist>(IntervalVar interval, IntVar demand)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9052e9e1dd8248433909b5542f314add</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; literals)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>ab6457905c9a8cd1c5f92738d57e6f298</anchor>
      <arglist>(BoolVar literal)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>WithName</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9401ab195650160402df5b61f8ac9bda</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aeaf30f4ee7d141e68905f1ac2432b937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintProto &amp;</type>
      <name>Proto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aa0b277df64333f670b66c8d5295b8250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstraintProto *</type>
      <name>MutableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>acaa17b2fbfd62f6845329ae944835654</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstraintProto *</type>
      <name>proto_</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9d74c3d77f601020ab87700745f830ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CpModelBuilder</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraint.html</anchorfile>
      <anchor>ae04c85577cf33a05fb50bb361877fb42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::CumulativeConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>CumulativeConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>ae070c3b60fe5a6a05ffbb0e34d559589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CumulativeConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a5411745888efd9a79aa1a68d4c491915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CumulativeConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>ae1ffebcaaf80d97ec2bdbe569a9feb3a</anchor>
      <arglist>(const CumulativeConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>CumulativeConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a83c1d1b1cb5722859bcaaea1887c2f22</anchor>
      <arglist>(const CumulativeConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a44a9f88b285af258ad1177dbadfd2443</anchor>
      <arglist>(CumulativeConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>CumulativeConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>acbbd61c32d285a810ce257cf6e7a77e7</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>CumulativeConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a2a673fd709e990dfa57cb0e599d693c9</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>ab6fe2ba4ee8caf4ed7dc4e11714a5190</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>ac40424f16725018ee78242edb99ad15a</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a3878a0590161c52b18314e838b3b89a5</anchor>
      <arglist>(const CumulativeConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a4368c9e1fa379b09d2a873d4d17130e4</anchor>
      <arglist>(const CumulativeConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a64423562c98904b9d423176a4519b51a</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a09c8a74b7bd8d2c523e1d2aa0d5b40c1</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>ac4b579174094eea57176676f38503720</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a8d43f75020ba77c89e2d73f9c1eeceee</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a23b74fe5f2eb24d6c252d7e04c9e083c</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a237821ec81d4b61da4eec3a3e467c853</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>ac6a5586e329674017f92c35e6be5e2f8</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a64a1e9dc003e6e2ae0f96c80b0a6258f</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>intervals_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a5a2883283b3b03cda7ad8975d70aae5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>ada52406c692d73c66ac6069095cafff9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>aa9afcc60fd9b45fb8f54b7f8a2afda90</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a15c1e77f058b40205c1452742b71be25</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>ac77f7363de61db1fcbe7386938da6dfc</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>acc120c3c6c78d57b5cbed290d7a4bc80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a8f68267bcc49c542d3ce63bf6300970b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>demands_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a5fd084c2ffff13383a2006406e2f86e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>af59b3fc1afa7e4184ddf0aaf9d1d56e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a03b79ce802caab3b536150f1726d38b8</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a5fc5084550aefacd79ed6b68fd8f859e</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a646544a220adb95bc37ff6bad40b533f</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a3f1ae271a5938c29d4b5116104c45a1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>aad3d5d2a6dd5a7d3c811c267689836ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_capacity</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a446329def5e87893a31218536fdbebc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>capacity</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a5f1d6d16c39512f4373b99aca911c14e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_capacity</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a26b5a8f47eed479a97b3378cbaa3c2b5</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a3a26ed131e1cf6738b365721eb6c3a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CumulativeConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>affd5016d492791b7c4e3b3cc7fa331c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>ac008ee34e8f3597c831e1b4635bd6a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CumulativeConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>abdfc05846fc09eba657ac359cc3c056c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a5c11d9fcd1b9a18ae690aa71c34269cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIntervalsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>ac6e04da45dcc667e610878f782ec3f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kDemandsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a6895649388baddf2a97b60a3294be82f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCapacityFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a037378ee39d381e18d6380ad7311e95e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1CumulativeConstraintProto.html</anchorfile>
      <anchor>a6a4b23a149db96745f82f89624196f9c</anchor>
      <arglist>(CumulativeConstraintProto &amp;a, CumulativeConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ForwardStaticGraph::CycleHandlerForAnnotatedArcs</name>
    <filename>classoperations__research_1_1ForwardStaticGraph_1_1CycleHandlerForAnnotatedArcs.html</filename>
    <member kind="function">
      <type></type>
      <name>CycleHandlerForAnnotatedArcs</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph_1_1CycleHandlerForAnnotatedArcs.html</anchorfile>
      <anchor>a1fbbf60ee265ec17759b7a27d86cf749</anchor>
      <arglist>(PermutationCycleHandler&lt; ArcIndexType &gt; *annotation_handler, NodeIndexType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTempFromIndex</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph_1_1CycleHandlerForAnnotatedArcs.html</anchorfile>
      <anchor>a0e12d2bc93981bad96347e900ee9f536</anchor>
      <arglist>(ArcIndexType source) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIndexFromIndex</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph_1_1CycleHandlerForAnnotatedArcs.html</anchorfile>
      <anchor>aecc58d70f5a9416d066ec56e74565aa7</anchor>
      <arglist>(ArcIndexType source, ArcIndexType destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIndexFromTemp</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph_1_1CycleHandlerForAnnotatedArcs.html</anchorfile>
      <anchor>a9f8a444244738d0f1379b1fbd08169a5</anchor>
      <arglist>(ArcIndexType destination) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::EbertGraphBase::CycleHandlerForAnnotatedArcs</name>
    <filename>classoperations__research_1_1EbertGraphBase_1_1CycleHandlerForAnnotatedArcs.html</filename>
    <member kind="function">
      <type></type>
      <name>CycleHandlerForAnnotatedArcs</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase_1_1CycleHandlerForAnnotatedArcs.html</anchorfile>
      <anchor>a17c2563a5b10c0744e7fd702f418ce78</anchor>
      <arglist>(PermutationCycleHandler&lt; ArcIndexType &gt; *annotation_handler, DerivedGraph *graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTempFromIndex</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase_1_1CycleHandlerForAnnotatedArcs.html</anchorfile>
      <anchor>a621cffffa2e91040eeefc7dd034b0403</anchor>
      <arglist>(ArcIndexType source) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIndexFromIndex</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase_1_1CycleHandlerForAnnotatedArcs.html</anchorfile>
      <anchor>ab28e8ad8099ea2c4ec297746b45d85fc</anchor>
      <arglist>(ArcIndexType source, ArcIndexType destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIndexFromTemp</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase_1_1CycleHandlerForAnnotatedArcs.html</anchorfile>
      <anchor>a8e71b73cab8df6ee38da5dd53331729a</anchor>
      <arglist>(ArcIndexType destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSeen</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase_1_1CycleHandlerForAnnotatedArcs.html</anchorfile>
      <anchor>a298ac0673adae718024b7d7e31b8f108</anchor>
      <arglist>(ArcIndexType *permutation_element) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Unseen</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase_1_1CycleHandlerForAnnotatedArcs.html</anchorfile>
      <anchor>ad36ba8c0d7c1d9d8ebed31a6feec3d3d</anchor>
      <arglist>(ArcIndexType permutation_element) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CycleHandlerForAnnotatedArcs</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase_1_1CycleHandlerForAnnotatedArcs.html</anchorfile>
      <anchor>ad8904ac1fe6697a4009428b18c36f333</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Decision</name>
    <filename>classoperations__research_1_1Decision.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>Decision</name>
      <anchorfile>classoperations__research_1_1Decision.html</anchorfile>
      <anchor>a20a827cbc3c6cf9ecbef85bc3ba85cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Decision</name>
      <anchorfile>classoperations__research_1_1Decision.html</anchorfile>
      <anchor>a35ecb2123d8d852154e65847096b3f69</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Apply</name>
      <anchorfile>classoperations__research_1_1Decision.html</anchorfile>
      <anchor>a88aea04b24727f86d465479464437b2e</anchor>
      <arglist>(Solver *const s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Refute</name>
      <anchorfile>classoperations__research_1_1Decision.html</anchorfile>
      <anchor>a04e7498b68e7bfc7caeacad7c4272c1f</anchor>
      <arglist>(Solver *const s)=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Decision.html</anchorfile>
      <anchor>a8c30db3cf86cc406442a05f5361fe4b9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Decision.html</anchorfile>
      <anchor>a5ac1f45476e2b62e48de4798adf8b911</anchor>
      <arglist>(DecisionVisitor *const visitor) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DecisionBuilder</name>
    <filename>classoperations__research_1_1DecisionBuilder.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>DecisionBuilder</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>adcbdca02b7495a6f2ffcff7f77e32b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DecisionBuilder</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>ae49a9c888745786d48556303451d219d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a3bcaa4dd991e8ddb4d0e48cfbca58592</anchor>
      <arglist>(Solver *const s)=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aca201d99227a6116c62418d28761aa9b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::DecisionStrategyProto</name>
    <filename>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</filename>
    <member kind="typedef">
      <type>DecisionStrategyProto_AffineTransformation</type>
      <name>AffineTransformation</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a86c0cd58b5bd2ab789e6bfaf4e97bce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DecisionStrategyProto_VariableSelectionStrategy</type>
      <name>VariableSelectionStrategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a4c64edc035542ff6aef6f47211cbf550</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DecisionStrategyProto_DomainReductionStrategy</type>
      <name>DomainReductionStrategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a5cde9528d5186d24091f5da459f9bdd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionStrategyProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a32bf9edadbe7857b200bc8edddfe84a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionStrategyProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a8f62a1b4120a911232366ac0f39770e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionStrategyProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>abf44f1ced4d67ea2cb91f2fdf566d273</anchor>
      <arglist>(const DecisionStrategyProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>DecisionStrategyProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a76e3c16a78d21b34412985b57171ac38</anchor>
      <arglist>(const DecisionStrategyProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a710d0e4ff26908331f916642b1ef4b02</anchor>
      <arglist>(DecisionStrategyProto *other)</arglist>
    </member>
    <member kind="function">
      <type>DecisionStrategyProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a993f96447601f9cbbebb6b8851c697ca</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>DecisionStrategyProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a3b494bc9dfb5ad3ff5fcad476a3ef382</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a41c27f71953534889372f99ce47a56e3</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>ac4844c71a78ba1389aee54e8b39ae4b2</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>abcc80090ea541a942f49c31f56c704f4</anchor>
      <arglist>(const DecisionStrategyProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a6c2dbfc80c17d77443844a77801221f7</anchor>
      <arglist>(const DecisionStrategyProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a0d0f9c94f3cd539dc66c97f5bbcb3233</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>afa66852bab4ff2bd2f291925791fcb86</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>affe7a238666024e771ccfaf84e19fd38</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>ae5de369220b5bb023198fcc4b3aafc92</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a9911042a6619cdc224ed08785939f1f2</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>ab5a1e5067aab871c7cc6fd7f0aa2d9bd</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a94e44281175e85257bdc857f9eb69524</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a9369d733971f70e9173d08d70ae5b1a9</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>variables_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a1f64a7778ecb7422eab78f668443894f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>aa52a5aeeae0f396d22a94f8acfbb05d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a4aaaa5d8695a9d0e013299a5d521df00</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>ab833ea02af51e8dfc759d8139cda9c6b</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a0be21f9fe3ee6280fb456838bb99d6a0</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a70c8eb816c8d6fb1306d907a99733d16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a36a148fe7b6102c9bb1418bcc8d775a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>transformations_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a41aff7631befd63e889128d950bb3d5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_transformations</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>ad983c89c32202349e759154d2ace687a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::DecisionStrategyProto_AffineTransformation *</type>
      <name>mutable_transformations</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a2f5cf96ec368babcddf2126305546920</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedPtrField&lt; ::operations_research::sat::DecisionStrategyProto_AffineTransformation &gt; *</type>
      <name>mutable_transformations</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a8a8b7602404b2bb2d19759579e2db903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::sat::DecisionStrategyProto_AffineTransformation &amp;</type>
      <name>transformations</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a498d9dabe4708b44f525195d3380bfb6</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::DecisionStrategyProto_AffineTransformation *</type>
      <name>add_transformations</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a0c7fb75bffeee9198040855658bb140d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::operations_research::sat::DecisionStrategyProto_AffineTransformation &gt; &amp;</type>
      <name>transformations</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a4e81fcf3a0d2688d7f75ef6e1b4ecbe9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_variable_selection_strategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a5af585c946040df63cbdf1e4a1886e61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy</type>
      <name>variable_selection_strategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a2785e12ded72da3b8e531a30814b5f07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_selection_strategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a2d4a1299e0bd08a10ebf0366917f73c8</anchor>
      <arglist>(::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_domain_reduction_strategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>af14a6633ff76fa169c68e5920561a67f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy</type>
      <name>domain_reduction_strategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a68c96f139f4f0d2817932c4eac5996a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_domain_reduction_strategy</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a6a8e209f0514b67a37cb187d528a42fe</anchor>
      <arglist>(::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a330a653504fd83b1f854347437ea1e74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DecisionStrategyProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>adbf7220f215c0e12215891da8ba121b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>af082c198c7b1c76d754e059f9ebae543</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DecisionStrategyProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>ae54cf7d2c00a226de3ffa0d0a53525f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>VariableSelectionStrategy_IsValid</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>af74aa29a56afd5bb4039d5b82d221ae6</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>VariableSelectionStrategy_descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a06ea5e492ddac4f52085bb1671a8afc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>VariableSelectionStrategy_Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a21aecb659761e692c96a4ea4adc5e32f</anchor>
      <arglist>(VariableSelectionStrategy value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>VariableSelectionStrategy_Parse</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>afd73728c190663a8f436f331e603fc9b</anchor>
      <arglist>(const ::std::string &amp;name, VariableSelectionStrategy *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DomainReductionStrategy_IsValid</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a3272dfe841f631b8498e4415bdee7370</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>DomainReductionStrategy_descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a4e46902d1b2467d16056547d1de55a9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>DomainReductionStrategy_Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a15d31a74ad4c60a52b3a7dee91392e56</anchor>
      <arglist>(DomainReductionStrategy value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DomainReductionStrategy_Parse</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>ac960a4909cff78b3e5d35da220d0db00</anchor>
      <arglist>(const ::std::string &amp;name, DomainReductionStrategy *value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>af6aba7f7dbe7d04ac19fc9d50daa2ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VariableSelectionStrategy</type>
      <name>CHOOSE_FIRST</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a7afb92d202ee0e1953c122f0a9443926</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VariableSelectionStrategy</type>
      <name>CHOOSE_LOWEST_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>ac997cb60c8654c076f7865725778b477</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VariableSelectionStrategy</type>
      <name>CHOOSE_HIGHEST_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a95a33611fb2c05051d2c4f3e07e28970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VariableSelectionStrategy</type>
      <name>CHOOSE_MIN_DOMAIN_SIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a143556cc1a403e35fe2a07da641c25af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VariableSelectionStrategy</type>
      <name>CHOOSE_MAX_DOMAIN_SIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a642b56c3730fda6a8143f39f5edea6cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VariableSelectionStrategy</type>
      <name>VariableSelectionStrategy_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>ab31a7b2dd8658deb5b249a1f455144df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VariableSelectionStrategy</type>
      <name>VariableSelectionStrategy_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a553727aa97199f0258705fe53a0238bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>VariableSelectionStrategy_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>ac2f16b0f2e786318452bc0e2b3bab41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DomainReductionStrategy</type>
      <name>SELECT_MIN_VALUE</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a4e09ce3aa9616c482f74699eaf5eb2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DomainReductionStrategy</type>
      <name>SELECT_MAX_VALUE</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a1edc6f84a39ce65a0bdf357987f36b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DomainReductionStrategy</type>
      <name>SELECT_LOWER_HALF</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a2315bf69248382bc6f39afc16c5b8824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DomainReductionStrategy</type>
      <name>SELECT_UPPER_HALF</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a9767c6dbc86303846faef44dd8b9bf29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DomainReductionStrategy</type>
      <name>DomainReductionStrategy_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>addad991a7c937a33b1fd0e2598c35ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DomainReductionStrategy</type>
      <name>DomainReductionStrategy_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>af13b04b95701563d5725e5579ab825b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DomainReductionStrategy_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a421bebdebe01b0a17c66273c34a4a17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVariablesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a004b55bcc264a61c1a2edc2241278518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTransformationsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a346331ff5f36c6f480f58a9a01592f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVariableSelectionStrategyFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a44cbb05a441e224a013dd3c1357eb522</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kDomainReductionStrategyFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>a58047bbf6614804d5d5fa952196fcc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto.html</anchorfile>
      <anchor>af6178b9dcf983043f520ec8bd077b29a</anchor>
      <arglist>(DecisionStrategyProto &amp;a, DecisionStrategyProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::DecisionStrategyProto_AffineTransformation</name>
    <filename>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</filename>
    <member kind="function">
      <type></type>
      <name>DecisionStrategyProto_AffineTransformation</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a7fa49e7b014c702cf48c90d462be9da8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionStrategyProto_AffineTransformation</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a5984cb216d72d0cc0f6a78a84fca61fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionStrategyProto_AffineTransformation</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>aab5b1acef154cd65bc4fa6a5ea4d0506</anchor>
      <arglist>(const DecisionStrategyProto_AffineTransformation &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>DecisionStrategyProto_AffineTransformation &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>aea5d25cccdfdf1d280f98e086aad7fad</anchor>
      <arglist>(const DecisionStrategyProto_AffineTransformation &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a78d05592fce785a852a25642c8e442ca</anchor>
      <arglist>(DecisionStrategyProto_AffineTransformation *other)</arglist>
    </member>
    <member kind="function">
      <type>DecisionStrategyProto_AffineTransformation *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>af5e5d038691db7c89ef2ceaff91a2603</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>DecisionStrategyProto_AffineTransformation *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>adb550ca0135fd189e16f618f37a85042</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a223dc130d3965201a75209ab012f6640</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a68b9639649903c49911bd85ce7c96590</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a23b43cb20ba95d738932cb6f1e107a97</anchor>
      <arglist>(const DecisionStrategyProto_AffineTransformation &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a44b928d7b1ac65827e93a42f450a267f</anchor>
      <arglist>(const DecisionStrategyProto_AffineTransformation &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>ac0aff07aa5dea3578be94a1675a3921a</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a1849e711681cbbc217c9d5b65c04fe50</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>ac4084ce9174cb821bd2c754856833042</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a07ca39cab35d0ead52ece73779d40559</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a469e3c984d966012c16cf94bea9b317a</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>aa66e3480e592e48ce6e8dd02314e68dd</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a9dd505f4987383d0a6e07b4062c7b7ea</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a04def99dc038571ef4c0e25ff3322be4</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_offset</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>adb8272b32d7d9c4af52ddbf4a1e20669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>offset</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>ae39aacc07452153596ef17d32184e8b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_offset</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>ab03976ef449a0b3d80d9cb38c138b6fe</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_positive_coeff</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>ad66affdb829c9b143457e2226f26a587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>positive_coeff</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>ae95ba4b997bdaa600e038d5dcbaf4646</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_positive_coeff</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a029ae67aeb4b793a334e1760f13130e6</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_var</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>abc55c23a2546a5a045fcce0ea702e9a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>var</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a63190c693edd4b147374e56bd924a6a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_var</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a9946da51d64e13193a4ba2db1dae47f9</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a8abc988bbeb85c0493c429e62ee7351a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DecisionStrategyProto_AffineTransformation &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>aedf80eda26adac66a1f9226933eadf1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a0f55734005dc5dfcaab338b782de350f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DecisionStrategyProto_AffineTransformation *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a6250874e5d24e03482b39b3d4c47d28e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a9ba3ed4b809aba64d7da0a176f6d7756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kOffsetFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a3163b9050e719af1b4a3dea6b1ee429b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPositiveCoeffFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>ab50ea38055b3f291e7a8376248cc0086</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>a97613b1cd1584f0e10a88b1461db2881</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1DecisionStrategyProto__AffineTransformation.html</anchorfile>
      <anchor>aa06405236ef94f8f4ebdc39946746a13</anchor>
      <arglist>(DecisionStrategyProto_AffineTransformation &amp;a, DecisionStrategyProto_AffineTransformation &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DecisionVisitor</name>
    <filename>classoperations__research_1_1DecisionVisitor.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>DecisionVisitor</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a67b3034ec90261e392c5a1c4c35303c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DecisionVisitor</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a82aadbb02576d33c46f8c2851f455cde</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSetVariableValue</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>ac6e7b0464cdfb0caaac7661366295e65</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSplitVariableDomain</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a8faebc249d15a171102fd56fbe725216</anchor>
      <arglist>(IntVar *const var, int64 value, bool start_with_lower_half)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitScheduleOrPostpone</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>af48323740d18f4059ff01271b50eb9f2</anchor>
      <arglist>(IntervalVar *const var, int64 est)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitScheduleOrExpedite</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a7003dd5f4ff2cf139801866b35d02960</anchor>
      <arglist>(IntervalVar *const var, int64 est)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitRankFirstInterval</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a00084fcd22fc7f269b23dbfd5aa1032f</anchor>
      <arglist>(SequenceVar *const sequence, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitRankLastInterval</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a771d64a88d1eecc6fcce4a5b39349be8</anchor>
      <arglist>(SequenceVar *const sequence, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitUnknownDecision</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>af93d0ecd1a2cf63364ce9f8e554979cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::DefaultPhaseParameters</name>
    <filename>structoperations__research_1_1DefaultPhaseParameters.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>VariableSelection</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_SUM_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1a7498691aa1fa94308453cbd0c3233e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_AVERAGE_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1afa625d3c663f3bd0d081170ecf446f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_VALUE_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1af2a047b8f99a5e3d2dcfff41b7575242</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ValueSelection</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a6938c08fc955872a3b8da845c8ad4e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SELECT_MIN_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a6938c08fc955872a3b8da845c8ad4e16abdea23afb50539f635029f8424f40237</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SELECT_MAX_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a6938c08fc955872a3b8da845c8ad4e16a9b07a23261ca51a42ecd8d28387495da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DisplayLevel</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1dab1a4c17b2c342104297c4d23db4c6936</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1da31fef74cca87cb00faf89405448bf546</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERBOSE</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1daa7dc5065949f517176193ad86c4e6368</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_SUM_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1a7498691aa1fa94308453cbd0c3233e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_AVERAGE_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1afa625d3c663f3bd0d081170ecf446f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_VALUE_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1af2a047b8f99a5e3d2dcfff41b7575242</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SELECT_MIN_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a6938c08fc955872a3b8da845c8ad4e16abdea23afb50539f635029f8424f40237</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SELECT_MAX_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a6938c08fc955872a3b8da845c8ad4e16a9b07a23261ca51a42ecd8d28387495da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1dab1a4c17b2c342104297c4d23db4c6936</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1da31fef74cca87cb00faf89405448bf546</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERBOSE</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1daa7dc5065949f517176193ad86c4e6368</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultPhaseParameters</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a76d1de2961308e35a45663d9af88c78c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>VariableSelection</type>
      <name>var_selection_schema</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>ae1903959bc4ab1ec6e92aabd9465dc90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueSelection</type>
      <name>value_selection_schema</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>ab0fe50ca88d7e5f45ae9db09d2bd2fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>initialization_splits</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a6e1093d6bf5e0301b6a7372b2a5fa119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>run_all_heuristics</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a052e4d8daedbab3afea9d53868b00161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>heuristic_period</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a5599253b090dbe9b50cfa40fe05ecce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>heuristic_num_failures_limit</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a70d7630b38e05e7284641e04416fd570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>persistent_impact</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a3d609270cd755aabacde8c738d49c1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>random_seed</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>adbccfb764ad843006381e772c828ae8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DisplayLevel</type>
      <name>display_level</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a7a3fddb880fc793ebe5fc960d31ab3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_last_conflict</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a28c6636498f47abc60feabd264ebb0bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DecisionBuilder *</type>
      <name>decision_builder</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a4e60526379b527b91e6e271aac905bc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DelayedCallMethod0</name>
    <filename>classoperations__research_1_1DelayedCallMethod0.html</filename>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>DelayedCallMethod0</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod0.html</anchorfile>
      <anchor>aac1986eed7783a50711d96712de47735</anchor>
      <arglist>(T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DelayedCallMethod0</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod0.html</anchorfile>
      <anchor>a99f8a9311023d3fe700778d992e045d4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod0.html</anchorfile>
      <anchor>a6f38b90112dcf92130efa8b5a9cdd4a9</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod0.html</anchorfile>
      <anchor>adfd9001b4514cf914865ff234f189775</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod0.html</anchorfile>
      <anchor>ade95ef80273cff25d8e6ad96930484b6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DelayedCallMethod1</name>
    <filename>classoperations__research_1_1DelayedCallMethod1.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>DelayedCallMethod1</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod1.html</anchorfile>
      <anchor>a5e3bcd608fe966a5b8c5876d34ff43e5</anchor>
      <arglist>(T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DelayedCallMethod1</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod1.html</anchorfile>
      <anchor>a314176880ecc300c8b22aad3903ad93a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod1.html</anchorfile>
      <anchor>a38be5eed447d7abf18d51f9fac7663a7</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod1.html</anchorfile>
      <anchor>a7ef6fa85722c1d3da524468a6f3a6347</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod1.html</anchorfile>
      <anchor>ac7acfb8e911fb85df5208f96f5e44adf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DelayedCallMethod2</name>
    <filename>classoperations__research_1_1DelayedCallMethod2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>DelayedCallMethod2</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod2.html</anchorfile>
      <anchor>aa0c821f8fe7496e6f5e398bc0fc178fc</anchor>
      <arglist>(T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DelayedCallMethod2</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod2.html</anchorfile>
      <anchor>ae609d741a76e6b1a2f919b6f282989fd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod2.html</anchorfile>
      <anchor>a7be9d4dc86d9807ce080b67a91b0bfb7</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod2.html</anchorfile>
      <anchor>a9fd8b3e6b2008cc95f7d562659f63e12</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod2.html</anchorfile>
      <anchor>a58c60413c247ee5d5fb627dda5aa20f9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Demon</name>
    <filename>classoperations__research_1_1Demon.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>Demon</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ab1cf435bf9f422682783c255027e0570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Demon</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a6e4c51a92b24c256d889227667175e52</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a7d3876bb3b369f0ae115e08ce9a6dc72</anchor>
      <arglist>(Solver *const s)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a7ec8db0f9eacea36b80bfacfb1b5af8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a906a1bd16d33b9b841e68b2a06bbbfd2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Queue</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a47dfc6f2bc0d50a6e7c92eb00d97b064</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DenseConnectedComponentsFinder</name>
    <filename>classDenseConnectedComponentsFinder.html</filename>
    <member kind="function">
      <type></type>
      <name>DenseConnectedComponentsFinder</name>
      <anchorfile>classDenseConnectedComponentsFinder.html</anchorfile>
      <anchor>a33639c91528c2a525e1591df24ff2cc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseConnectedComponentsFinder</name>
      <anchorfile>classDenseConnectedComponentsFinder.html</anchorfile>
      <anchor>a0026050f607ccbad98a3ec2b7dcae3c8</anchor>
      <arglist>(const DenseConnectedComponentsFinder &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>DenseConnectedComponentsFinder &amp;</type>
      <name>operator=</name>
      <anchorfile>classDenseConnectedComponentsFinder.html</anchorfile>
      <anchor>a20f2a5d6bb7631a0dcdd678387a1b61a</anchor>
      <arglist>(const DenseConnectedComponentsFinder &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddEdge</name>
      <anchorfile>classDenseConnectedComponentsFinder.html</anchorfile>
      <anchor>aba450cf3f16d9386d043c4354a19a4aa</anchor>
      <arglist>(int node1, int node2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Connected</name>
      <anchorfile>classDenseConnectedComponentsFinder.html</anchorfile>
      <anchor>a071f52956431e211e14ed7f3894c1d0b</anchor>
      <arglist>(int node1, int node2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSize</name>
      <anchorfile>classDenseConnectedComponentsFinder.html</anchorfile>
      <anchor>a0a639b64de57bc14f04f0f238e0092d1</anchor>
      <arglist>(int node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfComponents</name>
      <anchorfile>classDenseConnectedComponentsFinder.html</anchorfile>
      <anchor>a5090a0bdc205d23778d2b8a742f5c5fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfNodes</name>
      <anchorfile>classDenseConnectedComponentsFinder.html</anchorfile>
      <anchor>a317fb43e59ef01ebe3d0d492b4ab33dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNumberOfNodes</name>
      <anchorfile>classDenseConnectedComponentsFinder.html</anchorfile>
      <anchor>a46780e194c525fa9853fa899d69b4340</anchor>
      <arglist>(int num_nodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindRoot</name>
      <anchorfile>classDenseConnectedComponentsFinder.html</anchorfile>
      <anchor>afdcff89dd2374ce33c05934d328e64ec</anchor>
      <arglist>(int node)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>GetComponentIds</name>
      <anchorfile>classDenseConnectedComponentsFinder.html</anchorfile>
      <anchor>aee7f0057f42256a520b5ef32bae58b36</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DimensionCumulOptimizerCore</name>
    <filename>classoperations__research_1_1DimensionCumulOptimizerCore.html</filename>
    <member kind="function">
      <type></type>
      <name>DimensionCumulOptimizerCore</name>
      <anchorfile>classoperations__research_1_1DimensionCumulOptimizerCore.html</anchorfile>
      <anchor>a36e89016a79a172ccf35fd2cd91496df</anchor>
      <arglist>(const RoutingDimension *dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OptimizeSingleRoute</name>
      <anchorfile>classoperations__research_1_1DimensionCumulOptimizerCore.html</anchorfile>
      <anchor>a4a7c9b3881b45490cb56078fa661f4a9</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor, glop::LinearProgram *linear_program, glop::LPSolver *lp_solver, std::vector&lt; int64 &gt; *cumul_values, int64 *cost, int64 *transit_cost, bool clear_lp=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Optimize</name>
      <anchorfile>classoperations__research_1_1DimensionCumulOptimizerCore.html</anchorfile>
      <anchor>a0e128419cfa4b416e1b13f780f2e2477</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;next_accessor, glop::LinearProgram *linear_program, glop::LPSolver *lp_solver, std::vector&lt; int64 &gt; *cumul_values, int64 *cost, int64 *transit_cost, bool clear_lp=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OptimizeAndPack</name>
      <anchorfile>classoperations__research_1_1DimensionCumulOptimizerCore.html</anchorfile>
      <anchor>a0817496a096c399614e3e95780d82087</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;next_accessor, glop::LinearProgram *linear_program, glop::LPSolver *lp_solver, std::vector&lt; int64 &gt; *cumul_values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OptimizeAndPackSingleRoute</name>
      <anchorfile>classoperations__research_1_1DimensionCumulOptimizerCore.html</anchorfile>
      <anchor>a83da37cfbbf38554e2e59089df384e7c</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor, glop::LinearProgram *linear_program, glop::LPSolver *lp_solver, std::vector&lt; int64 &gt; *cumul_values)</arglist>
    </member>
    <member kind="function">
      <type>const RoutingDimension *</type>
      <name>dimension</name>
      <anchorfile>classoperations__research_1_1DimensionCumulOptimizerCore.html</anchorfile>
      <anchor>a0e80b6dfc017f25d413603e7aeda52ea</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DisjunctiveConstraint</name>
    <filename>classoperations__research_1_1DisjunctiveConstraint.html</filename>
    <base>operations_research::Constraint</base>
    <member kind="function">
      <type></type>
      <name>DisjunctiveConstraint</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>a204df98d042e4eb2954aea4563a950e9</anchor>
      <arglist>(Solver *const s, const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DisjunctiveConstraint</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>adc7d8ad50b0d9c98c59f7f9c3f6bda6c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SequenceVar *</type>
      <name>MakeSequenceVar</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>a4b4ead77ac71b5c23fc1dc2871407d8d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransitionTime</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>af80d78dab69e2420e5df2acd13be698e</anchor>
      <arglist>(Solver::IndexEvaluator2 transition_time)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>TransitionTime</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>a8fa126c7081c99d91c347cb82ab16326</anchor>
      <arglist>(int before_index, int after_index)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>nexts</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>aacb295c42edd50d5fc0dc3f009fb0a81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>actives</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>ae2b4ffa19747b4205f3dff8e91424e1c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>time_cumuls</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>a487094cee9f08d7d6d7f4e8642d0579d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>time_slacks</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>a125375a3e7f2593d1934d1b2f1a928e9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Post</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>aaa882d58b5fc0f2e3df6eff957ad4a0d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InitialPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a64ab23714e57db311ba5b9fe1e742979</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a443bf6da3f8db15c240cb92d20e37466</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PostAndPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a92c3bfe86238b5c95448d4a0384a327f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a6e3070956af148d6fa0491de1d3cf289</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCastConstraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a834edc2ae995b866a6aa63e44c242570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a5606cc31756a1708615d492ab75ba886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::vector&lt; IntervalVar * &gt;</type>
      <name>intervals_</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>ac51ca0d886882db6afc2814bb91d4f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Solver::IndexEvaluator2</type>
      <name>transition_time_</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>a9b6d60ebdbacdb0e3910b3c9ccd4d1fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Domain</name>
    <filename>classoperations__research_1_1Domain.html</filename>
    <member kind="function">
      <type></type>
      <name>Domain</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a8026c98d5255e56fc3f224be687a07c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Domain</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a4604d54b843d603bde4f76ef853464e6</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Domain</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a8c763d670dcbb2656b8b708bf50d7262</anchor>
      <arglist>(int64 left, int64 right)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int64 &gt;</type>
      <name>FlattenedIntervals</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a2de0f6b61253050ad242107ce42ba825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEmpty</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a7f13c8b45290e4cf8889c4e677b0cd85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>afc9e0537e74ddbb050a001b96f4ca05c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a9ed997be60938397604bc2761b0c6775</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a23a06dbf9d08cc91d8de1fe86b8bccc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>aca55d3d10ee99aeab77e457d216d8c02</anchor>
      <arglist>(int64 value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncludedIn</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a770758f5d9d0569a04c3e203cb2ce216</anchor>
      <arglist>(const Domain &amp;domain) const</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>Complement</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>ac6beb8d0bb66ee165d94623d5a704abd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>Negation</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a4b24ac9e300406590558a82ae378db1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>IntersectionWith</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a4bf09b90ae38afd5bd3aa87ed5e0dc04</anchor>
      <arglist>(const Domain &amp;domain) const</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>UnionWith</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>ac33030581b21c1e9fc6ec13a0486c28e</anchor>
      <arglist>(const Domain &amp;domain) const</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>AdditionWith</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a714a1473bb78dab3195bd5cd5e90af42</anchor>
      <arglist>(const Domain &amp;domain) const</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>MultiplicationBy</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a0d8ff8a937591b31265b86db6353fa34</anchor>
      <arglist>(int64 coeff, bool *exact=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>RelaxIfTooComplex</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>ab06560137156458393e8f44acfd01712</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>ContinuousMultiplicationBy</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a5fa203b31737f4c452a0b04779ce45a8</anchor>
      <arglist>(int64 coeff) const</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>ContinuousMultiplicationBy</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a4c1fd36870e1dbf2029c462d3fb3d517</anchor>
      <arglist>(const Domain &amp;domain) const</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>DivisionBy</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a9f653103edc20fa77ecdd7708c76d037</anchor>
      <arglist>(int64 coeff) const</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>InverseMultiplicationBy</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a3b6727dfefc8413b855926e1c4d27da6</anchor>
      <arglist>(const int64 coeff) const</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>SimplifyUsingImpliedDomain</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a0217b50fb7a5dc20f697ef3d0b14ec41</anchor>
      <arglist>(const Domain &amp;implied_domain) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ToString</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a94b8d91180431ec7bf1073c2a8538f70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a27c69d2928356d00ee0624323e116fc8</anchor>
      <arglist>(const Domain &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>acf15b6795a380eeb7521e1a8e15ee5d9</anchor>
      <arglist>(const Domain &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>afc2fcedb7011ed72d191ca8be79e2ec7</anchor>
      <arglist>(const Domain &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumIntervals</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a7c440e0dfafdb9c1299576f17a52b34e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ClosedInterval</type>
      <name>front</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>aede4d7f8e8486355c2eb4d9604ed20db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ClosedInterval</type>
      <name>back</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>ac61a6df7b21becb7105b149b35992fbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ClosedInterval</type>
      <name>operator[]</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>ad3bfaa1ea6a1fce5a0c5a8ee61bfca3f</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>absl::InlinedVector&lt; ClosedInterval, 1 &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>abae404f5f46ad1b7cd495000aec19639</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>absl::InlinedVector&lt; ClosedInterval, 1 &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a5c5e5505773dda5ca11ff5fddd70ae9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ClosedInterval &gt;</type>
      <name>intervals</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a153837b45a0e9ddf5620679f243baa96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Domain</type>
      <name>AllValues</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a5d6343e6f8f0356f0270b25e76aa03b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Domain</type>
      <name>FromValues</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>afb43df1420e70ff6feda3557a1142dfc</anchor>
      <arglist>(std::vector&lt; int64 &gt; values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Domain</type>
      <name>FromIntervals</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a3f44e38ea10baff35e9d8f210e5900ed</anchor>
      <arglist>(absl::Span&lt; const ClosedInterval &gt; intervals)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Domain</type>
      <name>FromVectorIntervals</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a5840372e81d2500f8aeb77d880d22bc6</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; int64 &gt; &gt; &amp;intervals)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Domain</type>
      <name>FromFlatIntervals</name>
      <anchorfile>classoperations__research_1_1Domain.html</anchorfile>
      <anchor>a130878d13a4dd79365b1ecfa171b4714</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;flat_intervals)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::EbertGraph</name>
    <filename>classoperations__research_1_1EbertGraph.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>operations_research::EbertGraphBase</base>
    <class kind="class">operations_research::EbertGraph::IncomingArcIterator</class>
    <class kind="class">operations_research::EbertGraph::OutgoingOrOppositeIncomingArcIterator</class>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>af1720ff38e249834efb67023e4393fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a63a3ceac3b9c14b81d517117914a7010</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EbertGraph</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>adbd8962e4234a144e016479cf3fc7357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EbertGraph</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a485bd7f0bcfb0aa0b4906f06c895b5fd</anchor>
      <arglist>(NodeIndexType max_num_nodes, ArcIndexType max_num_arcs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EbertGraph</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a85b7aa85a264fcc445bdbce6befc8c78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckArcBounds</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a70424e6ef2e1bb8ac923679b32527f41</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckArcValidity</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a93e854b7d8f6448efa30629052c1b835</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Tail</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a8f4a674ce54ae70d858381ba3622c487</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>DirectArcTail</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a9a55d0ed76944c652d73c1247db82996</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>DirectArcHead</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a0f9cd34115afbe06ea269ee5bcc74ac5</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>DirectArc</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a964f5e0f6ead404b708f2113a5cdd67d</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>ReverseArc</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>ab6c2a8f285309e1325aa1a8b690d8011</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Opposite</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a02cadbddb2eabfe3a26a3af5f96cc6a5</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDirect</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a9d0409b2867beb2739b7ae20c10395e1</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsReverse</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a6b983fc03d4366ac2a697c45a0ba30fc</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutgoingOrOppositeIncoming</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a1672b2b1d01190e5b9f44a55dd48d2d9</anchor>
      <arglist>(ArcIndexType arc, NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncoming</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>aa0c2a078e397860fe425fba54cb5adae</anchor>
      <arglist>(ArcIndexType arc, NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutgoing</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>ae34257a5477fbac4642416580f237494</anchor>
      <arglist>(ArcIndexType arc, NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildRepresentation</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a95976397d32c3be512b959314745d176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>af943e2518d92aae9de9e682b2a3dbdd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>aac64d5e43f89177ab46f7ef763bb3c64</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Reserve</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2b9709a996fb28b5572783b40e1067c5</anchor>
      <arglist>(NodeIndexType new_max_num_nodes, ArcIndexType new_max_num_arcs)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>AddArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a96bf1fdcbfa88edabb7843b6142cb3bd</anchor>
      <arglist>(NodeIndexType tail, NodeIndexType head)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a7adcbbf1af098a96abf7a3397246304d</anchor>
      <arglist>(const ArcIndexTypeStrictWeakOrderingFunctor &amp;compare, PermutationCycleHandler&lt; ArcIndexType &gt; *annotation_handler)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa8a10d242f7088bfdee282e1246e00b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac0ae30f08a54ea67bf295b446157aed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a03cebcf1fdf356a8217ae2879100d324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a51a5033049b63ee5ce35b531b8474f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8aad937029f57b70efe059b908241685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a6aecaff5cd6eea0a7c93de644b8defc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7e2435063a7df2859f5b589852a8d4d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>LookUpArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad24fe35c2e3798137b42e1bc1c35e587</anchor>
      <arglist>(const NodeIndexType tail, const NodeIndexType head) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aac64d5e43f89177ab46f7ef763bb3c64</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NodeDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a5d2e4d934a8eb290a6298480d48faa52</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ArcDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30a3055f6669fd7739fd7acea16c4571</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kFirstArc</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a3693e89df768c2f25a31d4b4ee64ee3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kFirstNode</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a2c2ac42ee1d86e253e0a85f3f1321824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a7174acc6507b365096d7122ef430b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a2c3f7aa31326efb573187d321679cba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kMaxNumArcs</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a043c924d609639e1cc5bea7d4a5a7fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kMaxNumNodes</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aebc1c53cc0d7242f47f0cf971a105e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aeda4906d548f46b28df2c0577e42b2c8</anchor>
      <arglist>(NodeIndexType max_num_nodes, ArcIndexType max_num_arcs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingOrOppositeIncomingArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a68f767cda734319cc4f28e6a4d56b6d4</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextAdjacentArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a8ba11aca6997abd6ed8327ea9ea0e7b7</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextOutgoingArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a40da052b528623a6e0f5404547693edf</anchor>
      <arglist>(const NodeIndexType unused_node, const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7cf8fa1e0a3abc8179da6309a86097f5</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>StartArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa58e05a2a30eb0b2b38cc366bba1d1ae</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>NextNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8038f289c7e5558d1b4d264677c0f4be</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30864ddfe33af3fe52a64d35bf298503</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ae83c0a0706d7c6bf85e08719e818c813</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>next_adjacent_arc_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a26e62c6c3621ffd6cf953bb8e585a064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>representation_clean_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a82e436348dd462d71b362963129d4f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>EbertGraphBase&lt; NodeIndexType, ArcIndexType, EbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a73dbd9f38775b3bd2727594c935502c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StarGraphBase&lt; NodeIndexType, ArcIndexType, EbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</name>
      <anchorfile>classoperations__research_1_1EbertGraph.html</anchorfile>
      <anchor>a8b785fb3f60a942b9d82c48073f2d03b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::EbertGraphBase</name>
    <filename>classoperations__research_1_1EbertGraphBase.html</filename>
    <templarg>NodeIndexType</templarg>
    <templarg>ArcIndexType</templarg>
    <templarg>DerivedGraph</templarg>
    <base>operations_research::StarGraphBase</base>
    <class kind="class">operations_research::EbertGraphBase::CycleHandlerForAnnotatedArcs</class>
    <member kind="function">
      <type>bool</type>
      <name>Reserve</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2b9709a996fb28b5572783b40e1067c5</anchor>
      <arglist>(NodeIndexType new_max_num_nodes, ArcIndexType new_max_num_arcs)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>AddArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a96bf1fdcbfa88edabb7843b6142cb3bd</anchor>
      <arglist>(NodeIndexType tail, NodeIndexType head)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a7adcbbf1af098a96abf7a3397246304d</anchor>
      <arglist>(const ArcIndexTypeStrictWeakOrderingFunctor &amp;compare, PermutationCycleHandler&lt; ArcIndexType &gt; *annotation_handler)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa8a10d242f7088bfdee282e1246e00b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac0ae30f08a54ea67bf295b446157aed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a03cebcf1fdf356a8217ae2879100d324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a51a5033049b63ee5ce35b531b8474f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8aad937029f57b70efe059b908241685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a6aecaff5cd6eea0a7c93de644b8defc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7e2435063a7df2859f5b589852a8d4d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>LookUpArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad24fe35c2e3798137b42e1bc1c35e587</anchor>
      <arglist>(const NodeIndexType tail, const NodeIndexType head) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aac64d5e43f89177ab46f7ef763bb3c64</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NodeDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a5d2e4d934a8eb290a6298480d48faa52</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ArcDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30a3055f6669fd7739fd7acea16c4571</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kFirstArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a3693e89df768c2f25a31d4b4ee64ee3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kFirstNode</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2c2ac42ee1d86e253e0a85f3f1321824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kMaxNumArcs</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a043c924d609639e1cc5bea7d4a5a7fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kMaxNumNodes</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aebc1c53cc0d7242f47f0cf971a105e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a7174acc6507b365096d7122ef430b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2c3f7aa31326efb573187d321679cba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EbertGraphBase</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aef662883e2f42f46cf31255c12169c3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~EbertGraphBase</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>adb189f1f683a66f4fa283204a5db05e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aeda4906d548f46b28df2c0577e42b2c8</anchor>
      <arglist>(NodeIndexType max_num_nodes, ArcIndexType max_num_arcs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingOrOppositeIncomingArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a68f767cda734319cc4f28e6a4d56b6d4</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextAdjacentArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a8ba11aca6997abd6ed8327ea9ea0e7b7</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextOutgoingArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a40da052b528623a6e0f5404547693edf</anchor>
      <arglist>(const NodeIndexType unused_node, const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7cf8fa1e0a3abc8179da6309a86097f5</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>StartArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa58e05a2a30eb0b2b38cc366bba1d1ae</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>NextNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8038f289c7e5558d1b4d264677c0f4be</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30864ddfe33af3fe52a64d35bf298503</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ae83c0a0706d7c6bf85e08719e818c813</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>next_adjacent_arc_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a26e62c6c3621ffd6cf953bb8e585a064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>representation_clean_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a82e436348dd462d71b362963129d4f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>first_incident_arc_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>af1a0166faa8ccde14511e9fc547febac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; NodeIndexType &gt;</type>
      <name>head_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a1d032dcb17aa589d9a386fe04499654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>max_num_arcs_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aa219b1703090300ed69dc9f5f6f54ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>max_num_nodes_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a539adfb6a1003d4270e0f2c8fe6705b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a76da9f41f6215acb4ec4dd8da00c0e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>ad9877f4f6b0822e2cb6aa9c4fe60ceb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StarGraphBase&lt; NodeIndexType, ArcIndexType, DerivedGraph &gt;</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a89aa87fdbc5337e9edcd79499d24fc1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EbertGraphBase&lt; NodeIndexType, ArcIndexType, EbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</name>
    <filename>classoperations__research_1_1EbertGraphBase.html</filename>
    <base>StarGraphBase&lt; NodeIndexType, ArcIndexType, EbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>Reserve</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2b9709a996fb28b5572783b40e1067c5</anchor>
      <arglist>(NodeIndexType new_max_num_nodes, ArcIndexType new_max_num_arcs)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>AddArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a96bf1fdcbfa88edabb7843b6142cb3bd</anchor>
      <arglist>(NodeIndexType tail, NodeIndexType head)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a7adcbbf1af098a96abf7a3397246304d</anchor>
      <arglist>(const ArcIndexTypeStrictWeakOrderingFunctor &amp;compare, PermutationCycleHandler&lt; ArcIndexType &gt; *annotation_handler)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa8a10d242f7088bfdee282e1246e00b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac0ae30f08a54ea67bf295b446157aed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a03cebcf1fdf356a8217ae2879100d324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a51a5033049b63ee5ce35b531b8474f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8aad937029f57b70efe059b908241685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a6aecaff5cd6eea0a7c93de644b8defc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7e2435063a7df2859f5b589852a8d4d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>LookUpArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad24fe35c2e3798137b42e1bc1c35e587</anchor>
      <arglist>(const NodeIndexType tail, const NodeIndexType head) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aac64d5e43f89177ab46f7ef763bb3c64</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NodeDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a5d2e4d934a8eb290a6298480d48faa52</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ArcDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30a3055f6669fd7739fd7acea16c4571</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kFirstArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a3693e89df768c2f25a31d4b4ee64ee3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kFirstNode</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2c2ac42ee1d86e253e0a85f3f1321824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kMaxNumArcs</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a043c924d609639e1cc5bea7d4a5a7fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kMaxNumNodes</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aebc1c53cc0d7242f47f0cf971a105e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a7174acc6507b365096d7122ef430b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2c3f7aa31326efb573187d321679cba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EbertGraphBase</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aef662883e2f42f46cf31255c12169c3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~EbertGraphBase</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>adb189f1f683a66f4fa283204a5db05e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aeda4906d548f46b28df2c0577e42b2c8</anchor>
      <arglist>(NodeIndexType max_num_nodes, ArcIndexType max_num_arcs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingOrOppositeIncomingArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a68f767cda734319cc4f28e6a4d56b6d4</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextAdjacentArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a8ba11aca6997abd6ed8327ea9ea0e7b7</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextOutgoingArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a40da052b528623a6e0f5404547693edf</anchor>
      <arglist>(const NodeIndexType unused_node, const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7cf8fa1e0a3abc8179da6309a86097f5</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>StartArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa58e05a2a30eb0b2b38cc366bba1d1ae</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>NextNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8038f289c7e5558d1b4d264677c0f4be</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30864ddfe33af3fe52a64d35bf298503</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ae83c0a0706d7c6bf85e08719e818c813</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>next_adjacent_arc_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a26e62c6c3621ffd6cf953bb8e585a064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>representation_clean_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a82e436348dd462d71b362963129d4f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>first_incident_arc_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>af1a0166faa8ccde14511e9fc547febac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; NodeIndexType &gt;</type>
      <name>head_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a1d032dcb17aa589d9a386fe04499654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>max_num_arcs_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aa219b1703090300ed69dc9f5f6f54ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>max_num_nodes_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a539adfb6a1003d4270e0f2c8fe6705b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a76da9f41f6215acb4ec4dd8da00c0e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>ad9877f4f6b0822e2cb6aa9c4fe60ceb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StarGraphBase&lt; NodeIndexType, ArcIndexType, DerivedGraph &gt;</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a89aa87fdbc5337e9edcd79499d24fc1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EbertGraphBase&lt; NodeIndexType, ArcIndexType, ForwardEbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</name>
    <filename>classoperations__research_1_1EbertGraphBase.html</filename>
    <base>StarGraphBase&lt; NodeIndexType, ArcIndexType, ForwardEbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>Reserve</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2b9709a996fb28b5572783b40e1067c5</anchor>
      <arglist>(NodeIndexType new_max_num_nodes, ArcIndexType new_max_num_arcs)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>AddArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a96bf1fdcbfa88edabb7843b6142cb3bd</anchor>
      <arglist>(NodeIndexType tail, NodeIndexType head)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a7adcbbf1af098a96abf7a3397246304d</anchor>
      <arglist>(const ArcIndexTypeStrictWeakOrderingFunctor &amp;compare, PermutationCycleHandler&lt; ArcIndexType &gt; *annotation_handler)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa8a10d242f7088bfdee282e1246e00b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac0ae30f08a54ea67bf295b446157aed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a03cebcf1fdf356a8217ae2879100d324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a51a5033049b63ee5ce35b531b8474f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8aad937029f57b70efe059b908241685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a6aecaff5cd6eea0a7c93de644b8defc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7e2435063a7df2859f5b589852a8d4d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>LookUpArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad24fe35c2e3798137b42e1bc1c35e587</anchor>
      <arglist>(const NodeIndexType tail, const NodeIndexType head) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aac64d5e43f89177ab46f7ef763bb3c64</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NodeDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a5d2e4d934a8eb290a6298480d48faa52</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ArcDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30a3055f6669fd7739fd7acea16c4571</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kFirstArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a3693e89df768c2f25a31d4b4ee64ee3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kFirstNode</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2c2ac42ee1d86e253e0a85f3f1321824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kMaxNumArcs</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a043c924d609639e1cc5bea7d4a5a7fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kMaxNumNodes</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aebc1c53cc0d7242f47f0cf971a105e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a7174acc6507b365096d7122ef430b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2c3f7aa31326efb573187d321679cba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EbertGraphBase</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aef662883e2f42f46cf31255c12169c3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~EbertGraphBase</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>adb189f1f683a66f4fa283204a5db05e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aeda4906d548f46b28df2c0577e42b2c8</anchor>
      <arglist>(NodeIndexType max_num_nodes, ArcIndexType max_num_arcs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingOrOppositeIncomingArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a68f767cda734319cc4f28e6a4d56b6d4</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextAdjacentArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a8ba11aca6997abd6ed8327ea9ea0e7b7</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextOutgoingArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a40da052b528623a6e0f5404547693edf</anchor>
      <arglist>(const NodeIndexType unused_node, const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7cf8fa1e0a3abc8179da6309a86097f5</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>StartArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa58e05a2a30eb0b2b38cc366bba1d1ae</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>NextNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8038f289c7e5558d1b4d264677c0f4be</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30864ddfe33af3fe52a64d35bf298503</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ae83c0a0706d7c6bf85e08719e818c813</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>next_adjacent_arc_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a26e62c6c3621ffd6cf953bb8e585a064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>representation_clean_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a82e436348dd462d71b362963129d4f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>first_incident_arc_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>af1a0166faa8ccde14511e9fc547febac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; NodeIndexType &gt;</type>
      <name>head_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a1d032dcb17aa589d9a386fe04499654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>max_num_arcs_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aa219b1703090300ed69dc9f5f6f54ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>max_num_nodes_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a539adfb6a1003d4270e0f2c8fe6705b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a76da9f41f6215acb4ec4dd8da00c0e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>ad9877f4f6b0822e2cb6aa9c4fe60ceb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StarGraphBase&lt; NodeIndexType, ArcIndexType, DerivedGraph &gt;</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a89aa87fdbc5337e9edcd79499d24fc1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::ElementConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1ElementConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>ElementConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a631cec815893f790c6753ba674a06239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ElementConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a2e17b6142b53eee4772b947208d04c9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a55ff85a05735674a84182418dd7abd7a</anchor>
      <arglist>(const ElementConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>ElementConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>aa2ca4dac3acc0a8ef884dff558557a29</anchor>
      <arglist>(const ElementConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a546c40d2e499ceb7955feeaf990ef90e</anchor>
      <arglist>(ElementConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>ElementConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a3deca8acab0095581d819368aae04248</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>ElementConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a759a3f69b0754034975105a16063e047</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a9c014184068264a1c55be99de09d4651</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a4169d794ab045ff25ddb1147e7812b79</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a813fe93764e7687cad537ffe00b90138</anchor>
      <arglist>(const ElementConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a24bdeb0801d2591b9283351e2784acaa</anchor>
      <arglist>(const ElementConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a4bd069fa505e10e875625677d372f0b5</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a3e6e7788addc352b1018c7c2713f5e5a</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a45e86c58ebe5c6628f0e2bbdc8c34ddc</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a6c26da3253d27069a6ba5c07aac7cee2</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a5ab887f8e95475e4f3e8275c3e126ebe</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>af51600c6d50a29b7001015858f0d0a16</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a56d8fc24f19c4d6d8e6a0dc99284c5e4</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>adfb1e1f941c82e3550fc43d72e9c1216</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vars_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a21632504d4c2b5c87237ce3c6590b609</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a269eff06a9821a1f44338f3f2b80f842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>abe4127e35dfcd544b7dcc931e4e88660</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a876c375489c917850b5e76e23e373c7b</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a46c2fea6c935fd20d8a2f3d9de11a6e7</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>ae39f0d776d112940fdaf596b30bd3b34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a53e4c4c9b7495247955bcbab46eb873c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_index</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>ae9e8d14347bf8c2a5a7b9d0b2c66504b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>index</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>aca1a47927851ab518313e1a6072760eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_index</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a77b626d7f7d907976c99d28a74285af7</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_target</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a6a7c4c7bf8c071597ed13c253233fee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>target</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a5c79758d73f37756e372d564111ae4cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_target</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>aa9ee8af8d0dfb4299f94b7a62a8100c1</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>add9d068973de2c1bf6b3708ec39e55ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ElementConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>af6c3039b69da2798b17dd5f1968f62c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a933c1e24a90eea57e5bd29fe4edaaaa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ElementConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>ad41dc02d5aeab347ca57e32caed5d7c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a110fccac183697993275cd7ab2816888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a8febb9ad1c6a5cc5f1d0119fba3a4114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIndexFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>ab4013f0edc3b9fe2c941a622b632b97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTargetFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a7cd85d7ba41be706936fd7a4884703ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ElementConstraintProto.html</anchorfile>
      <anchor>a6925dbe53f54f70dce4ee62ab187e907</anchor>
      <arglist>(ElementConstraintProto &amp;a, ElementConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ElementIterator</name>
    <filename>classoperations__research_1_1ElementIterator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ElementIterator</name>
      <anchorfile>classoperations__research_1_1ElementIterator.html</anchorfile>
      <anchor>a6d122c3ffab9e07e631ac9bb37847bbd</anchor>
      <arglist>(Set set)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1ElementIterator.html</anchorfile>
      <anchor>a423bc77da7c559bad4f7da6275a1ed3b</anchor>
      <arglist>(const ElementIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator *</name>
      <anchorfile>classoperations__research_1_1ElementIterator.html</anchorfile>
      <anchor>a9028f0663e576b3eb972983df3967b6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ElementIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classoperations__research_1_1ElementIterator.html</anchorfile>
      <anchor>aac756fa71bfc5938f266bf1abeb76ffe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ExchangeSubtrip</name>
    <filename>classoperations__research_1_1ExchangeSubtrip.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>ExchangeSubtrip</name>
      <anchorfile>classoperations__research_1_1ExchangeSubtrip.html</anchorfile>
      <anchor>aa24b9ac35f954edf920ba0ff049ce31d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;pairs)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1ExchangeSubtrip.html</anchorfile>
      <anchor>a66dd3883a571b730fec9c047711e9635</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1ExchangeSubtrip.html</anchorfile>
      <anchor>a4f48364ef4d882276af33968d534fc4a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::FirstSolutionStrategy</name>
    <filename>classoperations__research_1_1FirstSolutionStrategy.html</filename>
    <member kind="typedef">
      <type>FirstSolutionStrategy_Value</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>abe2a56ed3c47bfc45ee4ef4303de4429</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FirstSolutionStrategy</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ab618f6a838711a7a8af9c6bf8dbb7d75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FirstSolutionStrategy</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a018fb433e961f3e00719af48f867623d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FirstSolutionStrategy</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ae595f03a4b811e022abfced5b2037469</anchor>
      <arglist>(const FirstSolutionStrategy &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>FirstSolutionStrategy &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a2a67478ad16aea717eb397622f72e31f</anchor>
      <arglist>(const FirstSolutionStrategy &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>aefbbafa3e99028a31e08fd5d3a494fec</anchor>
      <arglist>(FirstSolutionStrategy *other)</arglist>
    </member>
    <member kind="function">
      <type>FirstSolutionStrategy *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a914db9e5b7cfe19f49e2fb32316a028d</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>FirstSolutionStrategy *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ade39862495509a98b15dc833cbc40af2</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a536b8219f5b5f086c329db19a2212dd6</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a4da0a3bd22b64594cf7b3bc93550fe38</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a72c04e8248c815ea89b8203d0999117a</anchor>
      <arglist>(const FirstSolutionStrategy &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a10b773b40ede34691e200cf01c0fb62e</anchor>
      <arglist>(const FirstSolutionStrategy &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a1d608f3ed09a86064f76d7c3d247df30</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a21c86e64b742a650565126087abe1d96</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a282abd9d82c831d9d34bac8cdc76f9b0</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ae1f5196d4f1a60007cc6d14d4fa9926f</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a5c91c7a35a520ef5cdd95c2d59eb9b58</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>acfecc7658eef181ebcdcf55e36630861</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>af0ef09ba2a23cb38accf4d6873d444b1</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a4c5fdda0a80c6f1da516ab29c3803662</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a907bb218b153372a938a6cf735890c83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const FirstSolutionStrategy &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a7735c7c04a8475800484e83ca5ef64d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>af6c474491ed5f187d781f197d6877334</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const FirstSolutionStrategy *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>adbeae77c2a71e73a5b38cc92994722db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Value_IsValid</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>af79999e7536052ddcef47815d5e27e9f</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>Value_descriptor</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ad0e903dd5aea1e0b95e1e3917244823f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>Value_Name</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a289f4040f3bb084ecaadb8332e4cde24</anchor>
      <arglist>(Value value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Value_Parse</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a86bda42d4289d44d5a38e8b91e9ecef3</anchor>
      <arglist>(const ::std::string &amp;name, Value *value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a16c6dfc86c75ac63032a6422060a267f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>UNSET</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a26de3c667e847e85cda8e44c868d307f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>AUTOMATIC</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a116e74d7b5d2c850321b0e214c2dd517</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>PATH_CHEAPEST_ARC</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a1c65231053c401c53204cc20dfa7fcb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>PATH_MOST_CONSTRAINED_ARC</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a3a23f59c5476d060e89d9f90c249f52b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>EVALUATOR_STRATEGY</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>aff88d6db6feffc9d26de6a43c0265985</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>SAVINGS</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a2b16394b0b606ae6d1cf996ad45563fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>SWEEP</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>aa1edc23e8d9fce224df66bfaf869211c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>CHRISTOFIDES</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>afe943bc7f706719ecc82197e62f430c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>ALL_UNPERFORMED</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a9d03b8ff9f77de1ee440d38ee97dd3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>BEST_INSERTION</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a82e631b145c5703c5298f1ed7f6e070b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>PARALLEL_CHEAPEST_INSERTION</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ade7535db6b7462aa69e72e15f008ad22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>SEQUENTIAL_CHEAPEST_INSERTION</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a40890d931e3e1b4fff6cc5a4089a4536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>LOCAL_CHEAPEST_INSERTION</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a8e70c933401ded7d988f6da46bf4bb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>GLOBAL_CHEAPEST_ARC</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a467c982ee44404517ce3f8395702db22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>LOCAL_CHEAPEST_ARC</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a54449efe5ace20e165234a62d9c9909c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>FIRST_UNBOUND_MIN_VALUE</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a7204a269ea553ab38930d8558607dcba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>Value_MIN</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a5e51d1b4bdd44df570113d253a92aee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>Value_MAX</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ad7d1e7b8bd3427da7e6a50ac0af92771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>Value_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a75ac1035d44eeca56ea0e7aea7903161</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ada67e3eb964f85aa7e57c01e29ea271a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ab09287832344e79e83b447f9524c6136</anchor>
      <arglist>(FirstSolutionStrategy &amp;a, FirstSolutionStrategy &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ForwardEbertGraph</name>
    <filename>classoperations__research_1_1ForwardEbertGraph.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>EbertGraphBase&lt; NodeIndexType, ArcIndexType, ForwardEbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</base>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>abe6bf9da3d9867dfb88d65d99ce657ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>abd24e74c9c077d01704ea898863e35e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForwardEbertGraph</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>acd1b48d245b0892f4427a90011976e6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForwardEbertGraph</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>a40c24da8c720bc8b18274f53c62b24b9</anchor>
      <arglist>(NodeIndexType max_num_nodes, ArcIndexType max_num_arcs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ForwardEbertGraph</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>a6c8c4982af7ce7f58794956f3267d488</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckArcBounds</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>ab457a2818b4a5163977eb7547ff718ae</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckArcValidity</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>a2bf3cfd1f85aa0ff86d1094b34a1301e</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckTailIndexValidity</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>a519e28b63106845b55ceb18c5011c4d7</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Tail</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>a4d193a58da3c21d1cb21bc6c46d53dfc</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncoming</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>a285687129f5108116d7cc1da74e8b83b</anchor>
      <arglist>(ArcIndexType arc, NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildRepresentation</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>a1d533b7e0f3527495348492c87f7b16a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildTailArray</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>a9c2f42b8fc8a879755cb5c0f9a2bbfb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReleaseTailArray</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>abe6ad10691df5e73fce5c0cae0570c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TailArrayComplete</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>aa3d8b56d047ccfa87eb083046fac40c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>a10201023ae78b259beadb129e3aa85f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Reserve</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2b9709a996fb28b5572783b40e1067c5</anchor>
      <arglist>(NodeIndexType new_max_num_nodes, ArcIndexType new_max_num_arcs)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>AddArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a96bf1fdcbfa88edabb7843b6142cb3bd</anchor>
      <arglist>(NodeIndexType tail, NodeIndexType head)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a7adcbbf1af098a96abf7a3397246304d</anchor>
      <arglist>(const ArcIndexTypeStrictWeakOrderingFunctor &amp;compare, PermutationCycleHandler&lt; ArcIndexType &gt; *annotation_handler)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa8a10d242f7088bfdee282e1246e00b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac0ae30f08a54ea67bf295b446157aed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a03cebcf1fdf356a8217ae2879100d324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a51a5033049b63ee5ce35b531b8474f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8aad937029f57b70efe059b908241685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a6aecaff5cd6eea0a7c93de644b8defc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7e2435063a7df2859f5b589852a8d4d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>LookUpArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad24fe35c2e3798137b42e1bc1c35e587</anchor>
      <arglist>(const NodeIndexType tail, const NodeIndexType head) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aac64d5e43f89177ab46f7ef763bb3c64</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NodeDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a5d2e4d934a8eb290a6298480d48faa52</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ArcDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30a3055f6669fd7739fd7acea16c4571</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kFirstArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a3693e89df768c2f25a31d4b4ee64ee3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kFirstNode</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2c2ac42ee1d86e253e0a85f3f1321824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kMaxNumArcs</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a043c924d609639e1cc5bea7d4a5a7fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kMaxNumNodes</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aebc1c53cc0d7242f47f0cf971a105e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a7174acc6507b365096d7122ef430b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a2c3f7aa31326efb573187d321679cba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aeda4906d548f46b28df2c0577e42b2c8</anchor>
      <arglist>(NodeIndexType max_num_nodes, ArcIndexType max_num_arcs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingOrOppositeIncomingArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a68f767cda734319cc4f28e6a4d56b6d4</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextAdjacentArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a8ba11aca6997abd6ed8327ea9ea0e7b7</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextOutgoingArc</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a40da052b528623a6e0f5404547693edf</anchor>
      <arglist>(const NodeIndexType unused_node, const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7cf8fa1e0a3abc8179da6309a86097f5</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>StartArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa58e05a2a30eb0b2b38cc366bba1d1ae</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>NextNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8038f289c7e5558d1b4d264677c0f4be</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30864ddfe33af3fe52a64d35bf298503</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ae83c0a0706d7c6bf85e08719e818c813</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>next_adjacent_arc_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a26e62c6c3621ffd6cf953bb8e585a064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>representation_clean_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a82e436348dd462d71b362963129d4f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>first_incident_arc_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>af1a0166faa8ccde14511e9fc547febac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; NodeIndexType &gt;</type>
      <name>head_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a1d032dcb17aa589d9a386fe04499654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>max_num_arcs_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>aa219b1703090300ed69dc9f5f6f54ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>max_num_nodes_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a539adfb6a1003d4270e0f2c8fe6705b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>a76da9f41f6215acb4ec4dd8da00c0e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classoperations__research_1_1EbertGraphBase.html</anchorfile>
      <anchor>ad9877f4f6b0822e2cb6aa9c4fe60ceb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>EbertGraphBase&lt; NodeIndexType, ArcIndexType, ForwardEbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>a8fdd2d0396c7ec0609a4351f716aef5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StarGraphBase&lt; NodeIndexType, ArcIndexType, ForwardEbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</name>
      <anchorfile>classoperations__research_1_1ForwardEbertGraph.html</anchorfile>
      <anchor>a693f3f74a8aa4a10dbc5a040fd6c31eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ForwardStaticGraph</name>
    <filename>classoperations__research_1_1ForwardStaticGraph.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>operations_research::StarGraphBase</base>
    <class kind="class">operations_research::ForwardStaticGraph::CycleHandlerForAnnotatedArcs</class>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>add943be8b26c7537cf53b9dbfc32fd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>adb472ecf630f43f292ce28d0de542ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForwardStaticGraph</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>a299d30373ebbfcb70fc84ecc66d95b92</anchor>
      <arglist>(const NodeIndexType num_nodes, const ArcIndexType num_arcs, const bool sort_arcs_by_head, std::vector&lt; std::pair&lt; NodeIndexType, NodeIndexType &gt; &gt; *client_input_arcs, operations_research::PermutationCycleHandler&lt; ArcIndexType &gt; *const client_cycle_handler)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Tail</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>ac2d2363b40be6da86e1dffe794ab9eba</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncoming</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>acb00f0b91f228903023d4417a98caf54</anchor>
      <arglist>(ArcIndexType arc, NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckArcBounds</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>a325685db5b8c282db5b30a78206edd30</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckArcValidity</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>a27d6c9477d9c5474c08286c890aad441</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckTailIndexValidity</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>a4b7af21d9283d9ef77c21646e0c999b9</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>NextOutgoingArc</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>ab3af0a7025ae41572475ca9942d1db45</anchor>
      <arglist>(const NodeIndexType node, ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>a70997849a276cf0a75513d916753161f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildTailArray</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>afff790414356268c9a40c7fa5316eebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReleaseTailArray</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>a541264ae2a3f5c83efae38bc9335372d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TailArrayComplete</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>a6f09eb68a93e2cb8fd50c90e48868b3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa8a10d242f7088bfdee282e1246e00b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac0ae30f08a54ea67bf295b446157aed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a03cebcf1fdf356a8217ae2879100d324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a51a5033049b63ee5ce35b531b8474f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8aad937029f57b70efe059b908241685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a6aecaff5cd6eea0a7c93de644b8defc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7e2435063a7df2859f5b589852a8d4d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>LookUpArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad24fe35c2e3798137b42e1bc1c35e587</anchor>
      <arglist>(const NodeIndexType tail, const NodeIndexType head) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aac64d5e43f89177ab46f7ef763bb3c64</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NodeDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a5d2e4d934a8eb290a6298480d48faa52</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ArcDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30a3055f6669fd7739fd7acea16c4571</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a2c3f7aa31326efb573187d321679cba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7174acc6507b365096d7122ef430b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kFirstNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a2c2ac42ee1d86e253e0a85f3f1321824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kFirstArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a3693e89df768c2f25a31d4b4ee64ee3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kMaxNumNodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aebc1c53cc0d7242f47f0cf971a105e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kMaxNumArcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a043c924d609639e1cc5bea7d4a5a7fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7cf8fa1e0a3abc8179da6309a86097f5</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>StartArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa58e05a2a30eb0b2b38cc366bba1d1ae</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>NextNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8038f289c7e5558d1b4d264677c0f4be</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30864ddfe33af3fe52a64d35bf298503</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ae83c0a0706d7c6bf85e08719e818c813</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>max_num_nodes_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a539adfb6a1003d4270e0f2c8fe6705b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>max_num_arcs_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa219b1703090300ed69dc9f5f6f54ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad9877f4f6b0822e2cb6aa9c4fe60ceb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a76da9f41f6215acb4ec4dd8da00c0e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; NodeIndexType &gt;</type>
      <name>head_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a1d032dcb17aa589d9a386fe04499654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>first_incident_arc_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>af1a0166faa8ccde14511e9fc547febac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StarGraphBase&lt; NodeIndexType, ArcIndexType, ForwardStaticGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</name>
      <anchorfile>classoperations__research_1_1ForwardStaticGraph.html</anchorfile>
      <anchor>ad350bf8d35134f9fe0208292360cf2a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::GenericMaxFlow</name>
    <filename>classoperations__research_1_1GenericMaxFlow.html</filename>
    <templarg>Graph</templarg>
    <base>operations_research::MaxFlowStatusClass</base>
    <member kind="typedef">
      <type>Graph::NodeIndex</type>
      <name>NodeIndex</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>af29cd6d6e7b334690d8ebe90ed0be410</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::ArcIndex</type>
      <name>ArcIndex</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>abaf68b768e58ec738030f02c288d4ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::OutgoingArcIterator</type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a41c3325e4b03cd0763ccf20aa857f7a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::OutgoingOrOppositeIncomingArcIterator</type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ab6aa151eb19acac7bcbeced26a82f355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::IncomingArcIterator</type>
      <name>IncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>abaa264696c6c702be6b4a54c5b7947b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; ArcIndex &gt;</type>
      <name>ArcIndexArray</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a11a3c0e3b614e504cbb174cf0c4a90db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeIndex</type>
      <name>NodeHeight</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a4bfa3888f90a91610caa02c8498c6f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; NodeHeight &gt;</type>
      <name>NodeHeightArray</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a93990798ae28a85494473072c95072d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfbac3c19ea88d51e9ddc44a20cc13e4fb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba521cd576d678a5c22f21b4a7ec2ff02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_OVERFLOW</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba288fa96697726e05e63cc28b56c57d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_INPUT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba9b4b284d9cef8bc7ea112971c14584df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba64972e5527eb00cc4e60ce5b2f898193</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfbac3c19ea88d51e9ddc44a20cc13e4fb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba521cd576d678a5c22f21b4a7ec2ff02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_OVERFLOW</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba288fa96697726e05e63cc28b56c57d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_INPUT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba9b4b284d9cef8bc7ea112971c14584df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba64972e5527eb00cc4e60ce5b2f898193</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericMaxFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ae78f6137700a6942cee3b8b5bd40817b</anchor>
      <arglist>(const Graph *graph, NodeIndex source, NodeIndex sink)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericMaxFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a6296328813067e9419925f40981f0867</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph *</type>
      <name>graph</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a8f83ce5b69d2e3d4cbf314ed6b3d01a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>status</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a9662fa5cf2007a62968e6c22fb8a4564</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>GetSourceNodeIndex</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aeeb216a2384f75c7a46cf54de35027d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>GetSinkNodeIndex</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a8c16f1156b2e038ca0d3f8ba96490ab5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcCapacity</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a05f2661c573eb445212f4eddd694fc2f</anchor>
      <arglist>(ArcIndex arc, FlowQuantity new_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a9a357ac0cc6e451b5b1b81a9abdeb49b</anchor>
      <arglist>(ArcIndex arc, FlowQuantity new_flow)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a1da59e63f4d617578a0dc218d7f2f3e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>GetOptimalFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a90f1c23703ab4e69d7e42549ea005464</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Flow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aef5b9fc304666691405861f4caf35f45</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Capacity</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aa094beccfd146238de41da6f8a2b2e4a</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSourceSideMinCut</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a022da70970a497438cd0304cf1c6efd9</anchor>
      <arglist>(std::vector&lt; NodeIndex &gt; *result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSinkSideMinCut</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad7892ad5aa8338015f320267fb7f298f</anchor>
      <arglist>(std::vector&lt; NodeIndex &gt; *result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckInputConsistency</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a6a160e49372bec143572964e6b19f444</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckResult</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5ceac4e6ee8eedd556f1cdec11a2b665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AugmentingPathExists</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a75c3aeba25a7c62b4e237d2b34594b0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUseGlobalUpdate</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a1055514c9f93a7ffeea0ae9e8a6a7f58</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUseTwoPhaseAlgorithm</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a0497a8b934a2aa9f7307428736f72522</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCheckInput</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a3aaa8be2e8b64b746e6b46fa6463bbde</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCheckResult</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad80ce21a3088b4798da0eae774b0bab6</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessNodeByHeight</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>acc608bd04efcbcc5b72b76795f5d49d8</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>FlowModel</type>
      <name>CreateFlowModel</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5b1cf7943417c669c41dc29547f8cd00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsAdmissible</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aecd4716fa878055b30386f0f97a0d907</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsActive</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5b535e0a581ca57102d6c495a10bc911</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetCapacityAndClearFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a0c56ff7a0c8bac88e8f6e0da3689e838</anchor>
      <arglist>(ArcIndex arc, FlowQuantity capacity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>CheckRelabelPrecondition</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a9dbc134de4c5e1d424b49f7000c713f4</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a57cf9ba195eb368ccd5856ef7de4dcca</anchor>
      <arglist>(const std::string &amp;context, ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeActiveNodeContainer</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a3b47bff3c2733b198d34aeaa0cbcfa19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndex</type>
      <name>GetAndRemoveFirstActiveNode</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad411ee050c1c6a25b5b2abc42a2f0491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushActiveNode</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a4cc032f9987eb1ae9eaa8ebb013f671b</anchor>
      <arglist>(const NodeIndex &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsEmptyActiveNodeContainer</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a3653a3df1b94e4150486b5149d8eaae7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Refine</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a1061c1ce94ccc0d379390b8542bfaa23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>RefineWithGlobalUpdate</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a91d754521a7d43dd215e5d6200ec1062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Discharge</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5a2c545458610cc9b1486ae083708574</anchor>
      <arglist>(NodeIndex node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializePreflow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a20139b839cd5764939afc8df968a2484</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushFlowExcessBackToSource</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a05eb488b184996513248b0dffca59600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GlobalUpdate</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad3925f2137b18b1555563ed149ada740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>SaturateOutgoingArcsFromSource</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a2d2ffca7a04ecd2975025cb34a3898cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a1c31c96effb1f91f800895be2339045b</anchor>
      <arglist>(FlowQuantity flow, ArcIndex arc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Relabel</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aa70e526f9be229e52bf598d9cd0e7406</anchor>
      <arglist>(NodeIndex node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndex</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad4a6ec3deadedd6c027b8c0fbbdac88d</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndex</type>
      <name>Tail</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ac28ab380716ec139afa31d485bbbd068</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndex</type>
      <name>Opposite</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a15c425face4a4d1697c7ba298a727192</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsArcDirect</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aab64a5e41b9e15ab0953a59ef9fd2f49</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ace677adc9ba14e72018a7aa78955df18</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeReachableNodes</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ade3632560edb912b1758628f327dfe3d</anchor>
      <arglist>(NodeIndex start, std::vector&lt; NodeIndex &gt; *result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Graph *</type>
      <name>graph_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a27da86de84ba65849c8aebf7aa153f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QuantityArray</type>
      <name>node_excess_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a6881e220a50b6ab95192f7f263b5eee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHeightArray</type>
      <name>node_potential_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a65afde65cda262fce8107f3a15d657c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QuantityArray</type>
      <name>residual_arc_capacity_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a4c09a4799a59a5e2947b2da44c7d0ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexArray</type>
      <name>first_admissible_arc_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5421b464b61e322c676935f312501af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; NodeIndex &gt;</type>
      <name>active_nodes_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad52713e66db4d174006e1c3cac7d9d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PriorityQueueWithRestrictedPush&lt; NodeIndex, NodeHeight &gt;</type>
      <name>active_node_by_height_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a7cc8b8045738632185c7c0f82eb9791f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndex</type>
      <name>source_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a4a6b55b37ed5a95debcd86aa40370e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndex</type>
      <name>sink_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a7f228bb0707a9ebf78dd67ee15746030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Status</type>
      <name>status_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a784643a086180b1755f704d652f564a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>node_in_bfs_queue_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aaf724f9c00dee72b9b2e510e9e88e13e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; NodeIndex &gt;</type>
      <name>bfs_queue_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ac0e27ffc0885628dfcc430197434c311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_global_update_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ab3915b57ac3d28863ad3372f1598a494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_two_phase_algorithm_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a323ba66c6b6e63c3c7165081614e2689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>process_node_by_height_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aa44b5dfa3bad855a7a7b19750b6db748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>check_input_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a643e76aab33e0ee6c13b0b336af05352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>check_result_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a92fbc9576b457ceddeb21395181b3273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StatsGroup</type>
      <name>stats_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a3aae9d11f361dfd5c98dcca64987cfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const FlowQuantity</type>
      <name>kMaxFlowQuantity</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ac4278804a3c23b3a7f340930a81ff15f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericMaxFlow&lt; StarGraph &gt;</name>
    <filename>classoperations__research_1_1GenericMaxFlow.html</filename>
    <base>operations_research::MaxFlowStatusClass</base>
    <member kind="typedef">
      <type>StarGraph ::NodeIndex</type>
      <name>NodeIndex</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>af29cd6d6e7b334690d8ebe90ed0be410</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::ArcIndex</type>
      <name>ArcIndex</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>abaf68b768e58ec738030f02c288d4ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::OutgoingArcIterator</type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a41c3325e4b03cd0763ccf20aa857f7a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::OutgoingOrOppositeIncomingArcIterator</type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ab6aa151eb19acac7bcbeced26a82f355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::IncomingArcIterator</type>
      <name>IncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>abaa264696c6c702be6b4a54c5b7947b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; ArcIndex &gt;</type>
      <name>ArcIndexArray</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a11a3c0e3b614e504cbb174cf0c4a90db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeIndex</type>
      <name>NodeHeight</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a4bfa3888f90a91610caa02c8498c6f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; NodeHeight &gt;</type>
      <name>NodeHeightArray</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a93990798ae28a85494473072c95072d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfbac3c19ea88d51e9ddc44a20cc13e4fb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba521cd576d678a5c22f21b4a7ec2ff02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_OVERFLOW</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba288fa96697726e05e63cc28b56c57d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_INPUT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba9b4b284d9cef8bc7ea112971c14584df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba64972e5527eb00cc4e60ce5b2f898193</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfbac3c19ea88d51e9ddc44a20cc13e4fb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba521cd576d678a5c22f21b4a7ec2ff02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_OVERFLOW</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba288fa96697726e05e63cc28b56c57d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_INPUT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba9b4b284d9cef8bc7ea112971c14584df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba64972e5527eb00cc4e60ce5b2f898193</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericMaxFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ae78f6137700a6942cee3b8b5bd40817b</anchor>
      <arglist>(const StarGraph *graph, NodeIndex source, NodeIndex sink)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericMaxFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a6296328813067e9419925f40981f0867</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StarGraph *</type>
      <name>graph</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a8f83ce5b69d2e3d4cbf314ed6b3d01a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>status</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a9662fa5cf2007a62968e6c22fb8a4564</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>GetSourceNodeIndex</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aeeb216a2384f75c7a46cf54de35027d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>GetSinkNodeIndex</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a8c16f1156b2e038ca0d3f8ba96490ab5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcCapacity</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a05f2661c573eb445212f4eddd694fc2f</anchor>
      <arglist>(ArcIndex arc, FlowQuantity new_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a9a357ac0cc6e451b5b1b81a9abdeb49b</anchor>
      <arglist>(ArcIndex arc, FlowQuantity new_flow)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a1da59e63f4d617578a0dc218d7f2f3e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>GetOptimalFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a90f1c23703ab4e69d7e42549ea005464</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Flow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aef5b9fc304666691405861f4caf35f45</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Capacity</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aa094beccfd146238de41da6f8a2b2e4a</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSourceSideMinCut</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a022da70970a497438cd0304cf1c6efd9</anchor>
      <arglist>(std::vector&lt; NodeIndex &gt; *result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSinkSideMinCut</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad7892ad5aa8338015f320267fb7f298f</anchor>
      <arglist>(std::vector&lt; NodeIndex &gt; *result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckInputConsistency</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a6a160e49372bec143572964e6b19f444</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckResult</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5ceac4e6ee8eedd556f1cdec11a2b665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AugmentingPathExists</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a75c3aeba25a7c62b4e237d2b34594b0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUseGlobalUpdate</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a1055514c9f93a7ffeea0ae9e8a6a7f58</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUseTwoPhaseAlgorithm</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a0497a8b934a2aa9f7307428736f72522</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCheckInput</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a3aaa8be2e8b64b746e6b46fa6463bbde</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCheckResult</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad80ce21a3088b4798da0eae774b0bab6</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessNodeByHeight</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>acc608bd04efcbcc5b72b76795f5d49d8</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>FlowModel</type>
      <name>CreateFlowModel</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5b1cf7943417c669c41dc29547f8cd00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsAdmissible</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aecd4716fa878055b30386f0f97a0d907</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsActive</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5b535e0a581ca57102d6c495a10bc911</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetCapacityAndClearFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a0c56ff7a0c8bac88e8f6e0da3689e838</anchor>
      <arglist>(ArcIndex arc, FlowQuantity capacity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>CheckRelabelPrecondition</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a9dbc134de4c5e1d424b49f7000c713f4</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a57cf9ba195eb368ccd5856ef7de4dcca</anchor>
      <arglist>(const std::string &amp;context, ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeActiveNodeContainer</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a3b47bff3c2733b198d34aeaa0cbcfa19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndex</type>
      <name>GetAndRemoveFirstActiveNode</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad411ee050c1c6a25b5b2abc42a2f0491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushActiveNode</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a4cc032f9987eb1ae9eaa8ebb013f671b</anchor>
      <arglist>(const NodeIndex &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsEmptyActiveNodeContainer</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a3653a3df1b94e4150486b5149d8eaae7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Refine</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a1061c1ce94ccc0d379390b8542bfaa23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>RefineWithGlobalUpdate</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a91d754521a7d43dd215e5d6200ec1062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Discharge</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5a2c545458610cc9b1486ae083708574</anchor>
      <arglist>(NodeIndex node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializePreflow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a20139b839cd5764939afc8df968a2484</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushFlowExcessBackToSource</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a05eb488b184996513248b0dffca59600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GlobalUpdate</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad3925f2137b18b1555563ed149ada740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>SaturateOutgoingArcsFromSource</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a2d2ffca7a04ecd2975025cb34a3898cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a1c31c96effb1f91f800895be2339045b</anchor>
      <arglist>(FlowQuantity flow, ArcIndex arc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Relabel</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aa70e526f9be229e52bf598d9cd0e7406</anchor>
      <arglist>(NodeIndex node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndex</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad4a6ec3deadedd6c027b8c0fbbdac88d</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndex</type>
      <name>Tail</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ac28ab380716ec139afa31d485bbbd068</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndex</type>
      <name>Opposite</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a15c425face4a4d1697c7ba298a727192</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsArcDirect</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aab64a5e41b9e15ab0953a59ef9fd2f49</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ace677adc9ba14e72018a7aa78955df18</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeReachableNodes</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ade3632560edb912b1758628f327dfe3d</anchor>
      <arglist>(NodeIndex start, std::vector&lt; NodeIndex &gt; *result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StarGraph *</type>
      <name>graph_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a27da86de84ba65849c8aebf7aa153f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QuantityArray</type>
      <name>node_excess_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a6881e220a50b6ab95192f7f263b5eee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHeightArray</type>
      <name>node_potential_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a65afde65cda262fce8107f3a15d657c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QuantityArray</type>
      <name>residual_arc_capacity_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a4c09a4799a59a5e2947b2da44c7d0ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexArray</type>
      <name>first_admissible_arc_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5421b464b61e322c676935f312501af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; NodeIndex &gt;</type>
      <name>active_nodes_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad52713e66db4d174006e1c3cac7d9d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PriorityQueueWithRestrictedPush&lt; NodeIndex, NodeHeight &gt;</type>
      <name>active_node_by_height_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a7cc8b8045738632185c7c0f82eb9791f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndex</type>
      <name>source_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a4a6b55b37ed5a95debcd86aa40370e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndex</type>
      <name>sink_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a7f228bb0707a9ebf78dd67ee15746030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Status</type>
      <name>status_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a784643a086180b1755f704d652f564a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>node_in_bfs_queue_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aaf724f9c00dee72b9b2e510e9e88e13e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; NodeIndex &gt;</type>
      <name>bfs_queue_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ac0e27ffc0885628dfcc430197434c311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_global_update_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ab3915b57ac3d28863ad3372f1598a494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_two_phase_algorithm_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a323ba66c6b6e63c3c7165081614e2689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>process_node_by_height_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aa44b5dfa3bad855a7a7b19750b6db748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>check_input_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a643e76aab33e0ee6c13b0b336af05352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>check_result_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a92fbc9576b457ceddeb21395181b3273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StatsGroup</type>
      <name>stats_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a3aae9d11f361dfd5c98dcca64987cfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const FlowQuantity</type>
      <name>kMaxFlowQuantity</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ac4278804a3c23b3a7f340930a81ff15f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::GenericMinCostFlow</name>
    <filename>classoperations__research_1_1GenericMinCostFlow.html</filename>
    <templarg>Graph</templarg>
    <templarg>ArcFlowType</templarg>
    <templarg>ArcScaledCostType</templarg>
    <base>operations_research::MinCostFlowBase</base>
    <member kind="typedef">
      <type>Graph::NodeIndex</type>
      <name>NodeIndex</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>aaf02e6d654d4be1a50507d9d40dd1e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::ArcIndex</type>
      <name>ArcIndex</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>ad66a0601a4f1c5f98079d333d5a465e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::OutgoingArcIterator</type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a3c6c7677fb80955e5c7386849596043e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::OutgoingOrOppositeIncomingArcIterator</type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a0aadf64af2dbb2115943c046e3d14622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; ArcIndex &gt;</type>
      <name>ArcIndexArray</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a81e1e8d405058ffdd6aa80978345fa83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a44ab1b2f3c5251267bce749661e4e6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a7ba4907297a99141ebd2bc890d5a591c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ab78b8e2734f0e777e79b8e5f93948101</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457af323941c683086f71ce1e7cae7a0a1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBALANCED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ad79843de8fcdec97ba2ce9b83d6cf3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a030d97dcea9960e3d1f127024b0e2168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_COST_RANGE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a41523b94852c3cb55c86ce0e291e3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a44ab1b2f3c5251267bce749661e4e6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a7ba4907297a99141ebd2bc890d5a591c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ab78b8e2734f0e777e79b8e5f93948101</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457af323941c683086f71ce1e7cae7a0a1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBALANCED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ad79843de8fcdec97ba2ce9b83d6cf3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a030d97dcea9960e3d1f127024b0e2168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_COST_RANGE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a41523b94852c3cb55c86ce0e291e3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericMinCostFlow</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a17aff4acf62f808db05d5c43f37efda2</anchor>
      <arglist>(const Graph *graph)</arglist>
    </member>
    <member kind="function">
      <type>const Graph *</type>
      <name>graph</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a8ea0e6e91a6965d8de090ef797bb4185</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>status</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>ace5a6df9ac9993c42cd091f6e9ebbd54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNodeSupply</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a7e4301ebf8c5f86143e390494a0a6f4f</anchor>
      <arglist>(NodeIndex node, FlowQuantity supply)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcUnitCost</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a0969b64c9993394fb1cc97a2404e12a4</anchor>
      <arglist>(ArcIndex arc, ArcScaledCostType unit_cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcCapacity</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a35f31d23e3f300f2e36aa46b2e854c00</anchor>
      <arglist>(ArcIndex arc, ArcFlowType new_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcFlow</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a60875aa935bd9594db707bfd97eab98c</anchor>
      <arglist>(ArcIndex arc, ArcFlowType new_flow)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a17e2df29d767d03fc9fc42aee71bf5da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckFeasibility</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a01f13e85a3d12e356f26d80210a6755f</anchor>
      <arglist>(std::vector&lt; NodeIndex &gt; *const infeasible_supply_node, std::vector&lt; NodeIndex &gt; *const infeasible_demand_node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeFeasible</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a60da0a24c813a9ee39f96cc36f8dd9ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CostValue</type>
      <name>GetOptimalCost</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a37cb4245bf39c34116d5466d7922f565</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Flow</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>ac5a5362a674cfb2a7589bcd77c484c17</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Capacity</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a44c22a9d4609a54cfc7034de3e541ce7</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>CostValue</type>
      <name>UnitCost</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>ae70575b0b8bbc06301778b172752958b</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Supply</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a67cea170737362bd37bc8c8f8f024555</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>InitialSupply</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a15963b8d1126b858e249c58658934305</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>FeasibleSupply</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>afa58296d5399afd27f8bed235e18309d</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUseUpdatePrices</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a816e24f3a6af98c2b3ae1854f6fc0781</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCheckFeasibility</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a9fffb489dce981de3233b1702b801eb6</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericMinCostFlow&lt; StarGraph &gt;</name>
    <filename>classoperations__research_1_1GenericMinCostFlow.html</filename>
    <base>operations_research::MinCostFlowBase</base>
    <member kind="typedef">
      <type>StarGraph ::NodeIndex</type>
      <name>NodeIndex</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>aaf02e6d654d4be1a50507d9d40dd1e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::ArcIndex</type>
      <name>ArcIndex</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>ad66a0601a4f1c5f98079d333d5a465e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::OutgoingArcIterator</type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a3c6c7677fb80955e5c7386849596043e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::OutgoingOrOppositeIncomingArcIterator</type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a0aadf64af2dbb2115943c046e3d14622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; ArcIndex &gt;</type>
      <name>ArcIndexArray</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a81e1e8d405058ffdd6aa80978345fa83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a44ab1b2f3c5251267bce749661e4e6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a7ba4907297a99141ebd2bc890d5a591c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ab78b8e2734f0e777e79b8e5f93948101</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457af323941c683086f71ce1e7cae7a0a1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBALANCED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ad79843de8fcdec97ba2ce9b83d6cf3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a030d97dcea9960e3d1f127024b0e2168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_COST_RANGE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a41523b94852c3cb55c86ce0e291e3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a44ab1b2f3c5251267bce749661e4e6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a7ba4907297a99141ebd2bc890d5a591c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ab78b8e2734f0e777e79b8e5f93948101</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457af323941c683086f71ce1e7cae7a0a1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBALANCED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ad79843de8fcdec97ba2ce9b83d6cf3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a030d97dcea9960e3d1f127024b0e2168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_COST_RANGE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a41523b94852c3cb55c86ce0e291e3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericMinCostFlow</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a17aff4acf62f808db05d5c43f37efda2</anchor>
      <arglist>(const StarGraph *graph)</arglist>
    </member>
    <member kind="function">
      <type>const StarGraph *</type>
      <name>graph</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a8ea0e6e91a6965d8de090ef797bb4185</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>status</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>ace5a6df9ac9993c42cd091f6e9ebbd54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNodeSupply</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a7e4301ebf8c5f86143e390494a0a6f4f</anchor>
      <arglist>(NodeIndex node, FlowQuantity supply)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcUnitCost</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a0969b64c9993394fb1cc97a2404e12a4</anchor>
      <arglist>(ArcIndex arc, CostValue unit_cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcCapacity</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a35f31d23e3f300f2e36aa46b2e854c00</anchor>
      <arglist>(ArcIndex arc, FlowQuantity new_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcFlow</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a60875aa935bd9594db707bfd97eab98c</anchor>
      <arglist>(ArcIndex arc, FlowQuantity new_flow)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a17e2df29d767d03fc9fc42aee71bf5da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckFeasibility</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a01f13e85a3d12e356f26d80210a6755f</anchor>
      <arglist>(std::vector&lt; NodeIndex &gt; *const infeasible_supply_node, std::vector&lt; NodeIndex &gt; *const infeasible_demand_node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeFeasible</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a60da0a24c813a9ee39f96cc36f8dd9ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CostValue</type>
      <name>GetOptimalCost</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a37cb4245bf39c34116d5466d7922f565</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Flow</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>ac5a5362a674cfb2a7589bcd77c484c17</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Capacity</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a44c22a9d4609a54cfc7034de3e541ce7</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>CostValue</type>
      <name>UnitCost</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>ae70575b0b8bbc06301778b172752958b</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Supply</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a67cea170737362bd37bc8c8f8f024555</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>InitialSupply</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a15963b8d1126b858e249c58658934305</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>FeasibleSupply</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>afa58296d5399afd27f8bed235e18309d</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUseUpdatePrices</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a816e24f3a6af98c2b3ae1854f6fc0781</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCheckFeasibility</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a9fffb489dce981de3233b1702b801eb6</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::GlobalDimensionCumulOptimizer</name>
    <filename>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalDimensionCumulOptimizer</name>
      <anchorfile>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a7aef4229a23f8e4527a1abdd40792a60</anchor>
      <arglist>(const RoutingDimension *dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeCumulCostWithoutFixedTransits</name>
      <anchorfile>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a58e57b4acd1b8657912b8cb08a52a6ba</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;next_accessor, int64 *optimal_cost_without_transits)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeCumuls</name>
      <anchorfile>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</anchorfile>
      <anchor>ae661c23f8b98bdcf659aba760638a965</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;next_accessor, std::vector&lt; int64 &gt; *optimal_cumuls)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFeasible</name>
      <anchorfile>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</anchorfile>
      <anchor>ac584fa126a3b1b582bd918a516b489f9</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;next_accessor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputePackedCumuls</name>
      <anchorfile>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a4609e630ca9d2d7340a338a957d44e61</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;next_accessor, std::vector&lt; int64 &gt; *packed_cumuls)</arglist>
    </member>
    <member kind="function">
      <type>const RoutingDimension *</type>
      <name>dimension</name>
      <anchorfile>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a64246ca0403f93006288ead58dfb0d36</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::graph_traits</name>
    <filename>structoperations__research_1_1graph__traits.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>has_reverse_arcs</name>
      <anchorfile>structoperations__research_1_1graph__traits.html</anchorfile>
      <anchor>ad10f7357fd25a9c96d148118612b3256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_dynamic</name>
      <anchorfile>structoperations__research_1_1graph__traits.html</anchorfile>
      <anchor>ad5cd1b2fa4ab46bf534094f197895989</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::graph_traits&lt; ForwardEbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</name>
    <filename>structoperations__research_1_1graph__traits_3_01ForwardEbertGraph_3_01NodeIndexType_00_01ArcIndexType_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>has_reverse_arcs</name>
      <anchorfile>structoperations__research_1_1graph__traits_3_01ForwardEbertGraph_3_01NodeIndexType_00_01ArcIndexType_01_4_01_4.html</anchorfile>
      <anchor>a64a8352a30e4dd38414813ef444236e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_dynamic</name>
      <anchorfile>structoperations__research_1_1graph__traits_3_01ForwardEbertGraph_3_01NodeIndexType_00_01ArcIndexType_01_4_01_4.html</anchorfile>
      <anchor>a013b3e9341d6c84014d7dc15ded99396</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::graph_traits&lt; ForwardStaticGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</name>
    <filename>structoperations__research_1_1graph__traits_3_01ForwardStaticGraph_3_01NodeIndexType_00_01ArcIndexType_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>has_reverse_arcs</name>
      <anchorfile>structoperations__research_1_1graph__traits_3_01ForwardStaticGraph_3_01NodeIndexType_00_01ArcIndexType_01_4_01_4.html</anchorfile>
      <anchor>ad92212c66a65a79b42f0d5b6b2693e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_dynamic</name>
      <anchorfile>structoperations__research_1_1graph__traits_3_01ForwardStaticGraph_3_01NodeIndexType_00_01ArcIndexType_01_4_01_4.html</anchorfile>
      <anchor>af0cb76b0565277bd556aa738f83534bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::or_internal::GraphBuilderFromArcs</name>
    <filename>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs.html</filename>
    <templarg>GraphType</templarg>
    <templarg>is_dynamic</templarg>
    <member kind="function">
      <type></type>
      <name>GraphBuilderFromArcs</name>
      <anchorfile>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs.html</anchorfile>
      <anchor>a50b4ce116fea3019a46e0d4d502c3d4a</anchor>
      <arglist>(typename GraphType::NodeIndex max_num_nodes, typename GraphType::ArcIndex max_num_arcs, bool sort_arcs)</arglist>
    </member>
    <member kind="function">
      <type>GraphType::ArcIndex</type>
      <name>AddArc</name>
      <anchorfile>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs.html</anchorfile>
      <anchor>ac8c490f6e4ec383c92799f17ddde40e1</anchor>
      <arglist>(typename GraphType::NodeIndex tail, typename GraphType::NodeIndex head)</arglist>
    </member>
    <member kind="function">
      <type>GraphType *</type>
      <name>Graph</name>
      <anchorfile>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs.html</anchorfile>
      <anchor>a63eda0d830f2a9f145e3aa65e7b80bae</anchor>
      <arglist>(PermutationCycleHandler&lt; typename GraphType::ArcIndex &gt; *client_cycle_handler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GraphBuilderFromArcs&lt; GraphType, graph_traits&lt; GraphType &gt;::is_dynamic &gt;</name>
    <filename>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs.html</filename>
    <member kind="function">
      <type></type>
      <name>GraphBuilderFromArcs</name>
      <anchorfile>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs.html</anchorfile>
      <anchor>a50b4ce116fea3019a46e0d4d502c3d4a</anchor>
      <arglist>(typename GraphType::NodeIndex max_num_nodes, typename GraphType::ArcIndex max_num_arcs, bool sort_arcs)</arglist>
    </member>
    <member kind="function">
      <type>GraphType::ArcIndex</type>
      <name>AddArc</name>
      <anchorfile>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs.html</anchorfile>
      <anchor>ac8c490f6e4ec383c92799f17ddde40e1</anchor>
      <arglist>(typename GraphType::NodeIndex tail, typename GraphType::NodeIndex head)</arglist>
    </member>
    <member kind="function">
      <type>GraphType *</type>
      <name>Graph</name>
      <anchorfile>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs.html</anchorfile>
      <anchor>a63eda0d830f2a9f145e3aa65e7b80bae</anchor>
      <arglist>(PermutationCycleHandler&lt; typename GraphType::ArcIndex &gt; *client_cycle_handler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::or_internal::GraphBuilderFromArcs&lt; GraphType, true &gt;</name>
    <filename>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs_3_01GraphType_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GraphBuilderFromArcs</name>
      <anchorfile>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs_3_01GraphType_00_01true_01_4.html</anchorfile>
      <anchor>a64d3d75bc8251d0ad57b871d5fe4218d</anchor>
      <arglist>(typename GraphType::NodeIndex max_num_nodes, typename GraphType::ArcIndex max_num_arcs, bool sort_arcs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Reserve</name>
      <anchorfile>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs_3_01GraphType_00_01true_01_4.html</anchorfile>
      <anchor>a5d791b7f9699217ab04fd210eb2fbc0c</anchor>
      <arglist>(const typename GraphType::NodeIndex new_max_num_nodes, const typename GraphType::ArcIndex new_max_num_arcs)</arglist>
    </member>
    <member kind="function">
      <type>GraphType::ArcIndex</type>
      <name>AddArc</name>
      <anchorfile>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs_3_01GraphType_00_01true_01_4.html</anchorfile>
      <anchor>ad46ec98800eaa24cf5938a70dd9cdec0</anchor>
      <arglist>(const typename GraphType::NodeIndex tail, const typename GraphType::NodeIndex head)</arglist>
    </member>
    <member kind="function">
      <type>GraphType *</type>
      <name>Graph</name>
      <anchorfile>classoperations__research_1_1or__internal_1_1GraphBuilderFromArcs_3_01GraphType_00_01true_01_4.html</anchorfile>
      <anchor>a0d5cb434a87d8d954377759e77439590</anchor>
      <arglist>(PermutationCycleHandler&lt; typename GraphType::ArcIndex &gt; *client_cycle_handler)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::Graphs</name>
    <filename>structoperations__research_1_1Graphs.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Graph::ArcIndex</type>
      <name>ArcIndex</name>
      <anchorfile>structoperations__research_1_1Graphs.html</anchorfile>
      <anchor>ab48fb0d55ba8e5a1f3fae0eb20c29e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::NodeIndex</type>
      <name>NodeIndex</name>
      <anchorfile>structoperations__research_1_1Graphs.html</anchorfile>
      <anchor>a41cd02c6876d39529d121b0f6102d3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArcIndex</type>
      <name>OppositeArc</name>
      <anchorfile>structoperations__research_1_1Graphs.html</anchorfile>
      <anchor>a9f1fe8a24918ad07513b5707f589e731</anchor>
      <arglist>(const Graph &amp;graph, ArcIndex arc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsArcValid</name>
      <anchorfile>structoperations__research_1_1Graphs.html</anchorfile>
      <anchor>a66b7ad7630645132130da5a258792f4d</anchor>
      <arglist>(const Graph &amp;graph, ArcIndex arc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeIndex</type>
      <name>NodeReservation</name>
      <anchorfile>structoperations__research_1_1Graphs.html</anchorfile>
      <anchor>ab2ae542c84a1a9aa685f1e6c8e2f5503</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArcIndex</type>
      <name>ArcReservation</name>
      <anchorfile>structoperations__research_1_1Graphs.html</anchorfile>
      <anchor>a3e2837ba11c076d455d71ff67c8ddc36</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Build</name>
      <anchorfile>structoperations__research_1_1Graphs.html</anchorfile>
      <anchor>a1a8c52fdd8fe2db239708cb506d647e5</anchor>
      <arglist>(Graph *graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Build</name>
      <anchorfile>structoperations__research_1_1Graphs.html</anchorfile>
      <anchor>ac47c4735096495d462403431e16f0940</anchor>
      <arglist>(Graph *graph, std::vector&lt; ArcIndex &gt; *permutation)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::Graphs&lt; operations_research::StarGraph &gt;</name>
    <filename>structoperations__research_1_1Graphs_3_01operations__research_1_1StarGraph_01_4.html</filename>
    <member kind="typedef">
      <type>operations_research::StarGraph</type>
      <name>Graph</name>
      <anchorfile>structoperations__research_1_1Graphs_3_01operations__research_1_1StarGraph_01_4.html</anchorfile>
      <anchor>ac66e0eebbeabd9a4a3b24cfb734a589b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::ArcIndex</type>
      <name>ArcIndex</name>
      <anchorfile>structoperations__research_1_1Graphs_3_01operations__research_1_1StarGraph_01_4.html</anchorfile>
      <anchor>aa6368fe9b8973e136da83e6a13825ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::NodeIndex</type>
      <name>NodeIndex</name>
      <anchorfile>structoperations__research_1_1Graphs_3_01operations__research_1_1StarGraph_01_4.html</anchorfile>
      <anchor>a77ebbaf314514d539596cf23baf1b20c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArcIndex</type>
      <name>OppositeArc</name>
      <anchorfile>structoperations__research_1_1Graphs_3_01operations__research_1_1StarGraph_01_4.html</anchorfile>
      <anchor>ad901704a8b3fb67de7a634b831ad0ff7</anchor>
      <arglist>(const Graph &amp;graph, ArcIndex arc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsArcValid</name>
      <anchorfile>structoperations__research_1_1Graphs_3_01operations__research_1_1StarGraph_01_4.html</anchorfile>
      <anchor>af7de014805e897326707e523754b4b4f</anchor>
      <arglist>(const Graph &amp;graph, ArcIndex arc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeIndex</type>
      <name>NodeReservation</name>
      <anchorfile>structoperations__research_1_1Graphs_3_01operations__research_1_1StarGraph_01_4.html</anchorfile>
      <anchor>adebf187f9e507da38f439cd291864903</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArcIndex</type>
      <name>ArcReservation</name>
      <anchorfile>structoperations__research_1_1Graphs_3_01operations__research_1_1StarGraph_01_4.html</anchorfile>
      <anchor>a92594364f4f2937129c921c372742a45</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Build</name>
      <anchorfile>structoperations__research_1_1Graphs_3_01operations__research_1_1StarGraph_01_4.html</anchorfile>
      <anchor>a1f747b6fd23eaac5feac8cb4f3f3a798</anchor>
      <arglist>(Graph *graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Build</name>
      <anchorfile>structoperations__research_1_1Graphs_3_01operations__research_1_1StarGraph_01_4.html</anchorfile>
      <anchor>ad09c8a0cdfd9a213a8d89883e794e2d1</anchor>
      <arglist>(Graph *graph, std::vector&lt; ArcIndex &gt; *permutation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::HamiltonianPathSolver</name>
    <filename>classoperations__research_1_1HamiltonianPathSolver.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>uint32</type>
      <name>Integer</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>aa5992cec63596c5d6c2ed51fc4f7c9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Set&lt; Integer &gt;</type>
      <name>NodeSet</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>afe5925b90aecb674fffc3910b93cc925</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HamiltonianPathSolver</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>a1e754bd18247e695674bbb1a3d1187f3</anchor>
      <arglist>(CostFunction cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HamiltonianPathSolver</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>adcd88e0846cbbfc84ecd93ab3cd5cb77</anchor>
      <arglist>(int num_nodes, CostFunction cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ChangeCostMatrix</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>a553d0693bed2f847684666077241647e</anchor>
      <arglist>(CostFunction cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ChangeCostMatrix</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>a89195d0a67dda5156b3559e82beb5d08</anchor>
      <arglist>(int num_nodes, CostFunction cost)</arglist>
    </member>
    <member kind="function">
      <type>CostType</type>
      <name>HamiltonianCost</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>a6415d912bcce7f3d61e502d9c0047957</anchor>
      <arglist>(int end_node)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>HamiltonianPath</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>ac6c5e2c56d2c4c7cbf18d8d6cd26f1ff</anchor>
      <arglist>(int end_node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BestHamiltonianPathEndNode</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>a6d4e7053b1ca9bb72ca86712ba83ed56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HamiltonianPath</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>ac40b37d8f310c7de3d3d8ba76f9132b8</anchor>
      <arglist>(std::vector&lt; PathNodeIndex &gt; *path)</arglist>
    </member>
    <member kind="function">
      <type>CostType</type>
      <name>TravelingSalesmanCost</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>a488b92cff7785ca75270e3480f6b3ac2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>TravelingSalesmanPath</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>ae52acd5c3aa779486356b63d3c264f8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TravelingSalesmanPath</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>a2ddabfe4e8fcf0c746ad855af62e96b7</anchor>
      <arglist>(std::vector&lt; PathNodeIndex &gt; *path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsRobust</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>a2278e850be8943c1bf2ec68e5a81d5ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>VerifiesTriangleInequality</name>
      <anchorfile>classoperations__research_1_1HamiltonianPathSolver.html</anchorfile>
      <anchor>af71c1510258301efccfc6e948ea06a82</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::EbertGraph::IncomingArcIterator</name>
    <filename>classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>IncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>aac689ec3cadc1e597847a9d33ff20469</anchor>
      <arglist>(const EbertGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>a1b679c6f96af2d55e16058cecded849e</anchor>
      <arglist>(const EbertGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>a07606fa87d8f55df7462e36f9d198b59</anchor>
      <arglist>(const IncomingArcIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>a6f95a964dc369fcb3c01844cb7ca0ae3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>ad5e8b4e952a5f84530fc9e907320c646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>a70eef6592b4132f9efbd78e2b374693e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcListGraph::IncomingArcIterator</name>
    <filename>classutil_1_1ReverseArcListGraph_1_1IncomingArcIterator.html</filename>
    <base>util::ReverseArcListGraph::OppositeIncomingArcIterator</base>
    <member kind="function">
      <type></type>
      <name>IncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>aeb78ff088b5309b3573d15bb30178212</anchor>
      <arglist>(const ReverseArcListGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>ac346c11ba0e038e8bd19ce53000ed627</anchor>
      <arglist>(const ReverseArcListGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>a70ac2dd4710f5ead124c6bcb47a32f16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>a1544d63a165d42595e1e87c553735fb4</anchor>
      <arglist>(IncomingArcIterator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>ab32e51a40e51e10e2b6bfb8bf63dbc87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>af79e306f4c5d2c04b46983e8c53fca49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a50c4f5e91bf22e413ecc7536f918cbec</anchor>
      <arglist>(OppositeIncomingArcIterator)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ReverseArcListGraph &amp;</type>
      <name>graph_</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a6cc6151c5935827350ec7b9574ad3545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>index_</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>adadde330a68f381bab2c87d8e85faebf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcStaticGraph::IncomingArcIterator</name>
    <filename>classutil_1_1ReverseArcStaticGraph_1_1IncomingArcIterator.html</filename>
    <base>util::ReverseArcStaticGraph::OppositeIncomingArcIterator</base>
    <member kind="function">
      <type></type>
      <name>IncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>a287ddcb43f060b53bceef9434834e9ed</anchor>
      <arglist>(const ReverseArcStaticGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>ae7b420ee39369471aeee86c9a6d1818a</anchor>
      <arglist>(const ReverseArcStaticGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>a3aef6ddf066be477b4acea40ef998557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>a32c77bb628b82898f954b2e1d326bda3</anchor>
      <arglist>(IncomingArcIterator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>acc521bdcf77d31c02f46130de62abbd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>af44b76c2269e81f5dfcc61825fbb1b9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a63748b2737cc861bded889ff06b03e53</anchor>
      <arglist>(OppositeIncomingArcIterator)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ReverseArcStaticGraph &amp;</type>
      <name>graph_</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a0dd89a6500a8ab3018be5cbe34ad11b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ArcIndexType</type>
      <name>limit_</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a3a1dd084ad6093422cffb58da43de685</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>index_</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a4c6d6e4b71f0237dffe7d4ed2541edf1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcMixedGraph::IncomingArcIterator</name>
    <filename>classutil_1_1ReverseArcMixedGraph_1_1IncomingArcIterator.html</filename>
    <base>util::ReverseArcMixedGraph::OppositeIncomingArcIterator</base>
    <member kind="function">
      <type></type>
      <name>IncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>a50b5c385ecfc9ebc4e13b0bc667d0cff</anchor>
      <arglist>(const ReverseArcMixedGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>aba6ef39793d4ac8a059665c6de3c1f0b</anchor>
      <arglist>(const ReverseArcMixedGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>a6946d286256386efdfab71806f2b3122</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1IncomingArcIterator.html</anchorfile>
      <anchor>a12345fdba683c8c79c86e728fd9dda2a</anchor>
      <arglist>(IncomingArcIterator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>aec415bacb2abe19796f3aadee8c81443</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a8dd74217ea5f69b6e8b9ee60d630ac44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>aa5166577a05e8f457d906071599c5046</anchor>
      <arglist>(OppositeIncomingArcIterator)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ReverseArcMixedGraph *</type>
      <name>graph_</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a53f8e0b613096680b6c1aa72b04ef02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>index_</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a3795cf3a06e595f99910b3ff9269c4b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IndexPairSwapActiveOperator</name>
    <filename>classoperations__research_1_1IndexPairSwapActiveOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>IndexPairSwapActiveOperator</name>
      <anchorfile>classoperations__research_1_1IndexPairSwapActiveOperator.html</anchorfile>
      <anchor>a871622f2ed4fb5b000554d53c4b864a8</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndexPairSwapActiveOperator</name>
      <anchorfile>classoperations__research_1_1IndexPairSwapActiveOperator.html</anchorfile>
      <anchor>a2041fde203c51b80a7bc63fea9b1d969</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IndexPairSwapActiveOperator.html</anchorfile>
      <anchor>a11a3a2e7cea2b5b5197b9a17a71dc075</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1IndexPairSwapActiveOperator.html</anchorfile>
      <anchor>a3a0df60af89ee61a1bb0a214214e5ac1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1IndexPairSwapActiveOperator.html</anchorfile>
      <anchor>ad9fef9a1ded161855e9c130bd1019b98</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::InitAndGetValues</name>
    <filename>classoperations__research_1_1InitAndGetValues.html</filename>
    <class kind="struct">operations_research::InitAndGetValues::Iterator</class>
    <member kind="function">
      <type></type>
      <name>InitAndGetValues</name>
      <anchorfile>classoperations__research_1_1InitAndGetValues.html</anchorfile>
      <anchor>abb257dd5cc47ff82a1be987c6f0614c7</anchor>
      <arglist>(IntVarIterator *it)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classoperations__research_1_1InitAndGetValues.html</anchorfile>
      <anchor>ac8c498a96d19ebb98b44b68b8f6820e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classoperations__research_1_1InitAndGetValues.html</anchorfile>
      <anchor>a56ec665aa9b3314c60e52ab26e8f9fc6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::IntegerArgumentProto</name>
    <filename>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</filename>
    <member kind="function">
      <type></type>
      <name>IntegerArgumentProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a89b5ebd8abdd0a5d981444799b03ce20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntegerArgumentProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>aeb09033c4c23063a3236115ceb62b7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegerArgumentProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a47a7dbc5bb4df16ddaa6b46e5bfc3c85</anchor>
      <arglist>(const IntegerArgumentProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>IntegerArgumentProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a229cb29935b0f965cb141e4bb8205c8d</anchor>
      <arglist>(const IntegerArgumentProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a6ddcbb7d1fee25398fea86075b788ba7</anchor>
      <arglist>(IntegerArgumentProto *other)</arglist>
    </member>
    <member kind="function">
      <type>IntegerArgumentProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a264cfb0e35fa39f399e1843008d74d24</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>IntegerArgumentProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a76ca6999090bf52a1db53d006e802507</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a74e341eb9426f7c62ebbf138ca20e6c7</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>aeef522ce8ceb7ff532b0f16d6932d9ba</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a1c03778ccd431ac4442e2b6c9d819dfa</anchor>
      <arglist>(const IntegerArgumentProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>af87ad325ba4e1482c20cf99423b73889</anchor>
      <arglist>(const IntegerArgumentProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a4a4d81402251a95ad6f245a942c67510</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>ab37c43782161cae24433530ddb6e1147</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a9e745ef33fd4232b6eb54166d238a9f1</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a85bcf08d0fe22d2958f4d8831a3d5fe7</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>ab28d2c3ae2073a1924d5c3fb73e41631</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>ac3ff8fcbe2dbfb6df7171f2b54aabc66</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a5dc3a40dc56da6219825d385d3fef126</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a2f3c1b6efd6a3be7eb83f20967e59161</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vars_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a987d3ddf0c5960bb841053f5ded1c382</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>afc94662ced7da530a66864f8cdc453dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a1a3f2e28db44d5ca4d6aafcd49d3cc23</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a682692d89dec3e3f389bd6647948bfcc</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>ac063816c65abd07aa7e4032be313e41b</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a34eede096385cba135ab1366ea33f611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a89f8a595403a84c32bf33b084e6ddbab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_target</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a0e8d6e038cab213caf8b638259dbbf43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>target</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>af319ee6e9b868be040000bc1949fae73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_target</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>ad57b8078e97eede9d3d141236c461a00</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a3011bb913f22bd13d846b669e377b5e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IntegerArgumentProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a4555bb08b03d362709c06afceecf9b72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a0f3e921010da1541aa6170f2ca1461ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IntegerArgumentProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>af673a3abb65dc5abe8b49d4bf2b83a49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a88e93551d624f3fc4eee441fe0d21883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a4411ff6c08f72fe1bce1e74ea0dd15b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTargetFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>adf1c6910e32cf68a6cd8d7a6e98ef5d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerArgumentProto.html</anchorfile>
      <anchor>a7c5414a3ac06608f669faad83493c347</anchor>
      <arglist>(IntegerArgumentProto &amp;a, IntegerArgumentProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::Solver::IntegerCastInfo</name>
    <filename>structoperations__research_1_1Solver_1_1IntegerCastInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>IntegerCastInfo</name>
      <anchorfile>structoperations__research_1_1Solver_1_1IntegerCastInfo.html</anchorfile>
      <anchor>a4829cf800cd883bd0670163ef47da7cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegerCastInfo</name>
      <anchorfile>structoperations__research_1_1Solver_1_1IntegerCastInfo.html</anchorfile>
      <anchor>acb3e9a713650dd8adf2ccd35f54f49dc</anchor>
      <arglist>(IntVar *const v, IntExpr *const e, Constraint *const c)</arglist>
    </member>
    <member kind="variable">
      <type>IntVar *</type>
      <name>variable</name>
      <anchorfile>structoperations__research_1_1Solver_1_1IntegerCastInfo.html</anchorfile>
      <anchor>a4ddfd15e19f82e34ba4a6ef321ee0cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IntExpr *</type>
      <name>expression</name>
      <anchorfile>structoperations__research_1_1Solver_1_1IntegerCastInfo.html</anchorfile>
      <anchor>a93bf7638f82b52965834ad94286161c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Constraint *</type>
      <name>maintainer</name>
      <anchorfile>structoperations__research_1_1Solver_1_1IntegerCastInfo.html</anchorfile>
      <anchor>ae16e463040462ec79e67106d639789a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::IntegerVariableProto</name>
    <filename>classoperations__research_1_1sat_1_1IntegerVariableProto.html</filename>
    <member kind="function">
      <type></type>
      <name>IntegerVariableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a1ad794b118e3d66c349a2d0eb057f138</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntegerVariableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a64bd210f6d48b604b77a262ae49b602e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegerVariableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a5d8475bb303bde7fd2460ad41d35cc1b</anchor>
      <arglist>(const IntegerVariableProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>IntegerVariableProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>ab076d7e334e142ce3357cedc15798eaf</anchor>
      <arglist>(const IntegerVariableProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>ac8d061362d12b56ff220e9d9fc57295b</anchor>
      <arglist>(IntegerVariableProto *other)</arglist>
    </member>
    <member kind="function">
      <type>IntegerVariableProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a336b5d0fd409eec9f72b7947c8d5b1cd</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>IntegerVariableProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>acdc5f2ad592f40617d2f84ceb5be569f</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>afcf6300004357f465c6e6315d01967f7</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a7ca0cf1946f0f1dcf6b1517aad039799</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>ae2fd71480599fac8358a31fb651ee5ee</anchor>
      <arglist>(const IntegerVariableProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a3b3baee36a5027ba27b2b569b29b7143</anchor>
      <arglist>(const IntegerVariableProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a6172284f67e8a51e31226f50069e5d69</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a9a4b14264828c2fb51573d8763a62638</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a0c6e241e79bee882467b080f997ad0b7</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a2d8ae61a69b08ce0186846047d975b43</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a0a5581f80e905856028fc85b2c0cbd5e</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a123e9f5b2d3cf3ece40031783258db6d</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a45443494264347c5930f0b39c86dbdc0</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a561f827883d918424566ce05bcf2d5ca</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>domain_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a40b4a0b7f404f81300a8352b8695df3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a58a35012b1533d941280131768911de3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>ac203aeb218d4d5a6d2026ab68a790c54</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>ad79f95d0310e4137558b94dcb1741df2</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a6a5111609ed5868ec8e9e94ea3b97112</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a6d81b77d35652f06d0472ef4528c41e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>af26837227cf0258ec2a5870f2601972d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a8b9b59675a969b5bb475a2d5a40941e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>abd07f5dd77698e902a520047a90a0492</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a81fc369d0e0fcc136fb25e7be2e4ee01</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>aba387597c11c8baf616378e0262c40e5</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a0f22a1fe9d4f8faa79aa655370e3f683</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>mutable_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a5e5e4fd6b4fbf6677cbc2005166ce610</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>release_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>ac78972e516dc09a05ff3e418f19cc9bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_name</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a5f683aaca013088f86b74be3880f71cb</anchor>
      <arglist>(::std::string *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a0e1b5f12ed881beafa471d7005c6beb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IntegerVariableProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a50345f852d51f94122e19bb93c4d6b89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>aa78c65ab03a4a2d67d5ee1f2314dec3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IntegerVariableProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a4df628b8bc0660695c13d6941de61332</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a8499966ee2513b45d9679c755acaa922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kDomainFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>ae00b4b317c18cb2cf4a01f93af7791e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNameFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a1f7faafa7f13e865c8f4d3e8a230d4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntegerVariableProto.html</anchorfile>
      <anchor>a9d8670e9216e8e15b77c504761de6af4</anchor>
      <arglist>(IntegerVariableProto &amp;a, IntegerVariableProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::SortedDisjointIntervalList::IntervalComparator</name>
    <filename>structoperations__research_1_1SortedDisjointIntervalList_1_1IntervalComparator.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structoperations__research_1_1SortedDisjointIntervalList_1_1IntervalComparator.html</anchorfile>
      <anchor>ab348be2102e6d84cf3d994dac9afd657</anchor>
      <arglist>(const ClosedInterval &amp;a, const ClosedInterval &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::IntervalConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>IntervalConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a82bbafa809815efaddf785284939f01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntervalConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a3860d2a92b34f75e8ca10f754b0e400b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntervalConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>aaa7e2916614116deeee0a4b5556a02cf</anchor>
      <arglist>(const IntervalConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>IntervalConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a512114cdcc8ed5ad5b2c92c06feacca8</anchor>
      <arglist>(const IntervalConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a2dd3021930c090e887def9771011f477</anchor>
      <arglist>(IntervalConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>IntervalConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>aa4d83dc7e7995cd257f54c738a243ef3</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>IntervalConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>acbd8dcd7118281c66a7f94df85fde083</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a3f218b44b69f869446c3465b3b78ef0c</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>aba2137e936d77191e3283e936baebeb5</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a94dad3797ac5c9bc499523d1a4f8986e</anchor>
      <arglist>(const IntervalConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a5b063e411e7507db953f59667ae63c56</anchor>
      <arglist>(const IntervalConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>ad4e8ccf02542a24d5c33ecd249068d72</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a851e04b3a19c42de40f5a89a6a678c16</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>aa8ccb5585943e262339c737809abc4f1</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a4675a33cac1bc4fe78a251a284630862</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>ab8290a970a9967efaa5ec2797c70a40b</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a2900e8b555936ca6a05c4e37e2a9215b</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>aa454d8b5e115eae06da9654f2e21fff7</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a1c916ba369039e6c78d13ab14c5772d9</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_start</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a40d7a74197dedf7af11d23b63d711590</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>start</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a78d1b1dc724b19f85af0bc314c711a9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_start</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a5ae68d04d4dbce1475944b1578be3519</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_end</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a78d30b34b538515e18369d5e0a1d268a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>end</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>ae7a98f61a1c3ff325ef0372076cf0143</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_end</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>ab34c04000082a5f0c8cff30dd95494f6</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>ab47d61370dcce69cc0cbeb1609410165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>size</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a90a8e4c6bec3046aa21724629b82b143</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>af7e414b30614b4b3dff461e4c58ffa1a</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a6035b88733f83c4218a8e355cb85d8eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IntervalConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a3dce18fbb3d5444e3dd3c50b53e55224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>ada8a58157226d27d22a2da2996e0a398</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IntervalConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a8cc94d9f884f97a13c1d2a3cc51795e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a10acf28f717f46698db8c61f6a067468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kStartFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a7e943695dcb37a762241567cd4eb74d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kEndFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>a20142e7cf494b41ddba5c9625bb7a08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSizeFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>ad4ce0a19246e4f29943ece3ca17d69a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalConstraintProto.html</anchorfile>
      <anchor>ae70e4641ca0bdfade09b12fb784dccff</anchor>
      <arglist>(IntervalConstraintProto &amp;a, IntervalConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::IntervalVar</name>
    <filename>classoperations__research_1_1sat_1_1IntervalVar.html</filename>
    <member kind="function">
      <type></type>
      <name>IntervalVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>a106c293c6b0cac8589bc6b5b4ff0446c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar</type>
      <name>WithName</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>a1b7333dffeb56f1cffe35973cab19dd1</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>a48f98ff3c12aecf540170647a72ce860</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar</type>
      <name>StartVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>a6228ce653636516ab2b2f760aa61a57e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar</type>
      <name>SizeVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>a9decc39f3f2079f78cdebd974972bc0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar</type>
      <name>EndVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>ac86513192443e57e505b8e8c9ffb77f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BoolVar</type>
      <name>PresenceBoolVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>aa5cc77b54d51bda6a6c8e30907b9a917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>a34a66e31983270cb695c271d0b869ab3</anchor>
      <arglist>(const IntervalVar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>a6816a7260a80aa691b7cc1e748323d21</anchor>
      <arglist>(const IntervalVar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>af90bf96ccc72778be5ebd9668e10d842</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IntervalConstraintProto &amp;</type>
      <name>Proto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>a34c3fc0d93697326a7e398cd45b1374d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntervalConstraintProto *</type>
      <name>MutableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>a4d10907c6da83ee20c29312f1064361f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>ac591e644d995d2520e859ee639695754</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CpModelBuilder</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>ae04c85577cf33a05fb50bb361877fb42</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CumulativeConstraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>a9d31ad87d4edee55fc3cb5e239077720</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>NoOverlap2DConstraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>abdbbe5d06195ef1dc4c30ad25b9017ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntervalVar.html</anchorfile>
      <anchor>ad73e372cd9d1def69624f85777393123</anchor>
      <arglist>(std::ostream &amp;os, const IntervalVar &amp;var)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntervalVar</name>
    <filename>classoperations__research_1_1IntervalVar.html</filename>
    <base>operations_research::PropagationBaseObject</base>
    <member kind="function">
      <type></type>
      <name>IntervalVar</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aeb43b24cad9ab5cae8741d69e1c6c9e0</anchor>
      <arglist>(Solver *const solver, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntervalVar</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a5416b468bd7fa583482aa3a5affe906c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>StartMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>acf6f5c6a44c14d6197701c450457d5bf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>StartMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a627e898b1125c5dd6a2fb41551d2af5f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetStartMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aee80fc5cd33bc3ea9d99ec892ad9d610</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetStartMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a9b5eb53cf394f0ba2c29332b7f9d60d4</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetStartRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aa4372845801e7c83acbdfc7fa59d2fb2</anchor>
      <arglist>(int64 mi, int64 ma)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldStartMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a2774c028f0464596c6767565cee80ff0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldStartMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aaca17b1e75c4e46f2efb5973e470561e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenStartRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aa109772cea3713098a40a645509f7566</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenStartRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a7e7c95e3ec16dc6bcb54997bde754620</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenStartRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>abaebc975bdd1226b8cca61b566d19fb3</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenStartBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ab5842069b663df27c9b6b86dd2033025</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenStartBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aa979715aea2878211bcf0b1db4c62793</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenStartBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a12f7a9d665836a2f5b0c1ae5ea6bfde0</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>DurationMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a23709f68a0b309e7ba3329c0e4775d07</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>DurationMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a11247af5621b85588f22a7948ad25ed0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDurationMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ac074bf0a3f7086df10faa9bca6a42004</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDurationMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a34c44801edcbe3195f161f7769d1cb0a</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDurationRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a9bfcdbd186adf792ef57bac57a3809b0</anchor>
      <arglist>(int64 mi, int64 ma)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldDurationMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a5d83388a399fb4f4e44e4054d1fda341</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldDurationMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a097e1714e012247ef87ba3cb18297609</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenDurationRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>af95b1b5fb7a1ff5818d7eabaafdf8408</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDurationRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ad5216b1374b28aefa97ec71dd2938d91</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDurationRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a2579d6d4646bfa4b5125283fcc03414a</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenDurationBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a6f2f9c44d5e8efa05a0c142310fbcd71</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDurationBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ad2a1dd4393008af0667d4101826f61b7</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDurationBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ab3b3530eb945e58d94d203f2b0d5a79c</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>EndMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a337babca836e2eff4e67adb0e141f82d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>EndMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>af5257fef12cc50e0551dfcddf1ce1b67</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aab465f88252c7db74615834bfe9c95fb</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>add69e5d253a42a328478f6797711abda</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a0020fd38cc76fc9c2ad20ef40e2ab182</anchor>
      <arglist>(int64 mi, int64 ma)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldEndMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>afeff6d108db59ec38fad9a2fa144a6a8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldEndMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>af78a648a227858b30ec2a379c0d67fbf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenEndRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a46f1c758e6201e2606cb3561c16c9e3d</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenEndRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a7151316c7367456c2bccac197ac78e07</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenEndRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a9bee30b653a37961c313f8bcb3ffd930</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenEndBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a51aa4ca92209f593a3b458247642987d</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenEndBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>af244626a5557c4f0addd20548d76fadc</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenEndBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a11d562e27b9c5af69d8425a84ca46af3</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MustBePerformed</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aef9101d29cf50c67521b105947f8fdcd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MayBePerformed</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a8e2f5e7fed94b846d1f53c1ca8e9fa9f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CannotBePerformed</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a7240f2caf6bf198514219a78d6dd11f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPerformedBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a1785a9adf70ca36c826a2039f8fb998e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetPerformed</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a4c1f66539cdb6258a67e4543a08d8a76</anchor>
      <arglist>(bool val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>WasPerformedBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a1deb0c244aeb417d3746d0b12fc17914</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenPerformedBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a216609be9e8d0b595ce401ca5c2d86b0</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenPerformedBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ad226ec1e7d6474e9ceab1048be743eb5</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenPerformedBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aeecdccd02e6618a869a968daaf919d10</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenAnything</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a031d97f0c0940a75d32debe1e7c16c43</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenAnything</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a71e1a2d992370030d20b6d7324b9ca43</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenAnything</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ae606415b9cb84abf4b2a5da2e74e2ec3</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>StartExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ad6271b4de12918697520817944165462</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>DurationExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a147203cf742a1daac8b1af0be03b1b92</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>EndExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a0a81be75dfa5f8c28ff444864d255fb1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>PerformedExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a2cd12d6edf03cb5b85cc14536e77a4a5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>SafeStartExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ac14b8b5751c3b224067530d0a82ed56f</anchor>
      <arglist>(int64 unperformed_value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>SafeDurationExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a70158d7ac7a7d59a1ca07f3e8656b67c</anchor>
      <arglist>(int64 unperformed_value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>SafeEndExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ad27a5fbdd24135dd54498db87feee98e</anchor>
      <arglist>(int64 unperformed_value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a4a625f0d15b94c92546d05bee7c8b554</anchor>
      <arglist>(ModelVisitor *const visitor) const =0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ae5b6f8cb73c1b76da152ad612f91c4ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int64</type>
      <name>kMinValidValue</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a052180d41b28201b81b1c1695f65bcca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int64</type>
      <name>kMaxValidValue</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a081aea5d03ea8531476f5e51174b3d55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntervalVarElement</name>
    <filename>classoperations__research_1_1IntervalVarElement.html</filename>
    <base>operations_research::AssignmentElement</base>
    <member kind="function">
      <type></type>
      <name>IntervalVarElement</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a9d7357754c1a7c8bfa9cc1af03a3909d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntervalVarElement</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a8ba0b1ec02e7c147d68ebeedd6adff5b</anchor>
      <arglist>(IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a3bfef48731f4ef14fead2f6c34f26aa0</anchor>
      <arglist>(IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>Clone</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>afe3dbddb20591c19ba69dcaad778f0f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a85c8f2f11b9c5c13eefcc20778340555</anchor>
      <arglist>(const IntervalVarElement &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a9f3bd3b96c814e46db080a7870e441be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>aba7b84e96bed12bb02d0c69e702d65f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>ae749b38bd428fb00435ada66bd0b13de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadFromProto</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>ac7e5aa5ca9abcfa7d8ab76fa081d9d09</anchor>
      <arglist>(const IntervalVarAssignment &amp;interval_var_assignment_proto)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteToProto</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a66b960e2914e177ee0be5c4c9b62f933</anchor>
      <arglist>(IntervalVarAssignment *interval_var_assignment_proto) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>acef5ab6c453ebd47d42f76e326c15290</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>ac7f4610bf9ddd8a02c4df0e389fda3ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a2894c06ec30527c1810666cb9a47bc76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a7d9e6870b3d7d594cbcef37f57b088e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a107e6b7d51fa279dcd5516aff5cd05ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>acd30ddafdc9f5f26a950470d1f3edeed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a036f95ee32fc4ea98e986d6f866cb524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a57a113de1e0491feccba9b08b905a968</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a9b3e359361ec1c033611c5ae5252e9f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a2a559271f39b8afbd1c292ffa94880ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a0a085373190322c6e03e1a07fe26634f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>ad161fede703fc4b4ebb688b2198a2108</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a8133ba700bcd64e1f180a01cc9664bc3</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>aad27176c06a3aa80de553a72014346d4</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartRange</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a9b887d862bb4540be60a9f4c726854b7</anchor>
      <arglist>(int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>afb060e70086680308813304d51bd2160</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a0b9ab438454cb14dcaf13085d853a8a6</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a2b51c61059210e6b8a6f3bbde76b53b1</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationRange</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a5cf2a7affce14a52c72a234f9623ca2b</anchor>
      <arglist>(int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a0a5d158cc83a4b454daad3d2925d4d38</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a63fec77c7b642a175000409de73b6374</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a14813a4a823ce91c390aff2477cbb435</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndRange</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a8fadec579649e0012765f94d99eaf598</anchor>
      <arglist>(int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a9faf5408c656a03df7409463db6e97a3</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a65d8115573c692d5ff5afc12748ea592</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a4972b271ad222d388f9bf89ad5db017e</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedRange</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a31c0e8c0739a67e401a41b93ce0cf055</anchor>
      <arglist>(int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>af46311d9a91a9c985ed30bb560c5353b</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a20ff4a7e8f872abc11d9c0a619f8c671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a4aa969469e93c0b17054adb0072afae1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>aaccf9ecedf3ef182e9d293c7561b9ff8</anchor>
      <arglist>(const IntervalVarElement &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a80614d155acba1d61ff322283c4ce2ca</anchor>
      <arglist>(const IntervalVarElement &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a065f45865ec10318174fad87f6b00075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a878af7bb76cdf04d84eb523d6deeb696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>aaa91977feff42f876d7cd00556ab94f7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntExpr</name>
    <filename>classoperations__research_1_1IntExpr.html</filename>
    <base>operations_research::PropagationBaseObject</base>
    <member kind="function">
      <type></type>
      <name>IntExpr</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>ad8abff4968e302f6a8576a4bdce52a8b</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntExpr</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a6efc4d555955044d64aca04be757e367</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a58d589131cbea30d4826248a2fa06aba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>afec5a6eea8ee64fbc7fa34d7d28f8d8f</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1fb9e08cff06a9a5b5739de4acba587c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>adee9a082160df545671781df47f2b985</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Range</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a07b522d73ebcc17ebc1b480d181627f1</anchor>
      <arglist>(int64 *l, int64 *u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a153843dc05670b540a8e83dba2043eb0</anchor>
      <arglist>(int64 l, int64 u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a8889930ed76665b0f24f12df2ed4e05c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a13e126985026936fe8da212d2e377236</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsVar</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a4bb288e8b397020398b1184047587f01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a751d151bfe120bc6d378c4570505cbd4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>VarWithName</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1de04a321f16e9cdc50bbec78e1adbf7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a845a3c3c71323504f6b59f9c0ea46b08</anchor>
      <arglist>(Demon *d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a4b35ce14dbdbd3df0d20af5b708288f8</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a6d21b7e60b50a18a1591de348da6563e</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>aa573e0d34def6539f939b4b81d506164</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ae5b6f8cb73c1b76da152ad612f91c4ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVar</name>
    <filename>classoperations__research_1_1IntVar.html</filename>
    <base>operations_research::IntExpr</base>
    <member kind="function">
      <type></type>
      <name>IntVar</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a119cae716dbbdaa31b476ef904c99776</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVar</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a3800e8fb44e2b416b52a770d2bc74f31</anchor>
      <arglist>(Solver *const s, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntVar</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ab6acebb20eb1a885ca1313d759db0bdb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsVar</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a1e8732e1343228cbe86db9c986aa48d4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ac65d53711c52b0988b7e8fb81e79aeb9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ab84b786a2128f72fc720ae611e880499</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RemoveValue</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>afa4460e0dd9745ad24b99d08d853f3a4</anchor>
      <arglist>(int64 v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RemoveInterval</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a3316193a23988b72bd52ada02859efb0</anchor>
      <arglist>(int64 l, int64 u)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RemoveValues</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ade36b093f22913a40c24d37575c28f38</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetValues</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a9b3717393d801dc1ca5ce32e55a73622</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenBound</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a1501b060a0ae4f2ae77d8008479944ca</anchor>
      <arglist>(Demon *d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenBound</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a7b77bca97b9e8c80757ce1f8d3f985a6</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenBound</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a5ed044357d490a6a2fd91b6bc180039e</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenDomain</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a16770c4e77b7c3bae7f706661aae94fb</anchor>
      <arglist>(Demon *d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDomain</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a8540cc984d3c888633b4a741e052260d</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDomain</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a549ce691c8ea0477891f7caf86d8ab37</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint64</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a26efd8a51314b318dc14641e90af5c3a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a6e297b67956343bed8a4aece6a2c88a3</anchor>
      <arglist>(int64 v) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVarIterator *</type>
      <name>MakeHoleIterator</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a68e475702b2e14bf968256ec36cccad7</anchor>
      <arglist>(bool reversible) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVarIterator *</type>
      <name>MakeDomainIterator</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ad371f5411c3f0aa0424181fc9936a2fb</anchor>
      <arglist>(bool reversible) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldMin</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a894ecb1c102fa7fca59661a215f14d50</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldMax</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a619ac58213bbff56398934e76dd1079f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>VarType</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a53bfcce0b60a6c491992811a8453aa86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a6d8841341ab21ef119c0b7df02785a48</anchor>
      <arglist>(ModelVisitor *const visitor) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVar *</type>
      <name>IsEqual</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>adf461eaaf6bcf01239e77fa8ed407ff0</anchor>
      <arglist>(int64 constant)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVar *</type>
      <name>IsDifferent</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a791449c48c24075f82b47848038b5ffd</anchor>
      <arglist>(int64 constant)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVar *</type>
      <name>IsGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a4566c3b4fe20baa14354525be9b31bca</anchor>
      <arglist>(int64 constant)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVar *</type>
      <name>IsLessOrEqual</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>af5197b4635e1581a9bdecdfba44d2428</anchor>
      <arglist>(int64 constant)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a49fb18ac443f329969336d1d685269ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a58d589131cbea30d4826248a2fa06aba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>afec5a6eea8ee64fbc7fa34d7d28f8d8f</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1fb9e08cff06a9a5b5739de4acba587c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>adee9a082160df545671781df47f2b985</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Range</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a07b522d73ebcc17ebc1b480d181627f1</anchor>
      <arglist>(int64 *l, int64 *u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a153843dc05670b540a8e83dba2043eb0</anchor>
      <arglist>(int64 l, int64 u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a8889930ed76665b0f24f12df2ed4e05c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a13e126985026936fe8da212d2e377236</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>VarWithName</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1de04a321f16e9cdc50bbec78e1adbf7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a845a3c3c71323504f6b59f9c0ea46b08</anchor>
      <arglist>(Demon *d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a4b35ce14dbdbd3df0d20af5b708288f8</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a6d21b7e60b50a18a1591de348da6563e</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ae5b6f8cb73c1b76da152ad612f91c4ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::IntVar</name>
    <filename>classoperations__research_1_1sat_1_1IntVar.html</filename>
    <member kind="function">
      <type></type>
      <name>IntVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>a47cdd55b99ca5d29b194f54b14889819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>a2fdcfe89481f7f3e4cce763459764d78</anchor>
      <arglist>(const BoolVar &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>IntVar</type>
      <name>WithName</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>a5f1761c6d2c5f7908f5f92bb16b91de9</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>aa8460c813c17ec5b7a137739c448bb98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>a23d836e740ab297549905c5fa8539ba5</anchor>
      <arglist>(const IntVar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>a824aadc0688ab57929ae744b1f1a7a26</anchor>
      <arglist>(const IntVar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>aac78f1c00b73fbad7bd6577181f537fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IntegerVariableProto &amp;</type>
      <name>Proto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>a426492195e6cdd88354def292ffa112f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerVariableProto *</type>
      <name>MutableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>a68349a30f6936d8f5a3d00d342ec5f3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>ade91cda36a02fffbd115f1ec65746af1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CpModelBuilder</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>ae04c85577cf33a05fb50bb361877fb42</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CumulativeConstraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>a9d31ad87d4edee55fc3cb5e239077720</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LinearExpr</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>a7678a938bf60a5c17fb47cf58995db0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IntervalVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>afc7f9983234a41167299a74f07ec6622</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ReservoirConstraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>ae0ff478f6506cb705bbc1737598276f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend int64</type>
      <name>SolutionIntegerValue</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>a64bd6fadf44a9840c837cc701b2b9043</anchor>
      <arglist>(const CpSolverResponse &amp;r, const LinearExpr &amp;expr)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend int64</type>
      <name>SolutionIntegerMin</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>a8ec929aea42c9e50e2f1daf56525e379</anchor>
      <arglist>(const CpSolverResponse &amp;r, IntVar x)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend int64</type>
      <name>SolutionIntegerMax</name>
      <anchorfile>classoperations__research_1_1sat_1_1IntVar.html</anchorfile>
      <anchor>a79061f94ca7a97d0616f8b270358c771</anchor>
      <arglist>(const CpSolverResponse &amp;r, IntVar x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVarElement</name>
    <filename>classoperations__research_1_1IntVarElement.html</filename>
    <base>operations_research::AssignmentElement</base>
    <member kind="function">
      <type></type>
      <name>IntVarElement</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a7c4b5dea7c81f6ffeeab2d8144a1c7db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVarElement</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a2371c903204dc30259c9d4ba1fe728dc</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>aee7b64f549193b551ca2cdcc5230e37d</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>Clone</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a86c83c81ce35a6100adf1790419977ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>ab75541e5c6fe6f193f5cf94d8b12f5a4</anchor>
      <arglist>(const IntVarElement &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a42e51fe336885a70673cbd4f473790b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a8e83db9b01afab0172f195f110406008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a11ad56c03b156e52ac092191a81d278e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadFromProto</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>aea590b57d46c0ca3aca92adc3ce82b3a</anchor>
      <arglist>(const IntVarAssignment &amp;int_var_assignment_proto)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteToProto</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>abdc5b135e3b0c58d93a2beeb6c46791b</anchor>
      <arglist>(IntVarAssignment *int_var_assignment_proto) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a1295db3bf37f2183eb7a466f6b1207fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a5377e53fa0dc99d944ecc88e20e5f130</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>aea2fc7d2679592fdd9e07b2ae8fb58f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>adee444dbad18f8db71cbe93e54678f85</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a015a145792a6224c450259afe9d0b035</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a4205abd38e203b570f9ff6b49d351a06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a8d25f09aa43ef6ea5fe8dd622f6552b2</anchor>
      <arglist>(int64 l, int64 u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>ab5fde53ca39720061f5684e7d472cdd3</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a9683993188d5a63cad067a6a1891aaa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a3dd7107f6d77ddb44ebf38053b72137e</anchor>
      <arglist>(const IntVarElement &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a65504db21d71ae343eeb6371555a15fa</anchor>
      <arglist>(const IntVarElement &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a065f45865ec10318174fad87f6b00075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a878af7bb76cdf04d84eb523d6deeb696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>aaa91977feff42f876d7cd00556ab94f7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVarIterator</name>
    <filename>classoperations__research_1_1IntVarIterator.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>~IntVarIterator</name>
      <anchorfile>classoperations__research_1_1IntVarIterator.html</anchorfile>
      <anchor>a85fb1088ff1184b4cb867259ee512fc5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>classoperations__research_1_1IntVarIterator.html</anchorfile>
      <anchor>ac5e717b4d80a83e797fd6f996f040f8c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Ok</name>
      <anchorfile>classoperations__research_1_1IntVarIterator.html</anchorfile>
      <anchor>a35ab3d4e05e41e87312043b3fbb803f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarIterator.html</anchorfile>
      <anchor>a8cd71554efc9460ca2319bbe79574ffa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarIterator.html</anchorfile>
      <anchor>a7d3ca63d1636290367162ad3fb4f5157</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1IntVarIterator.html</anchorfile>
      <anchor>afcbc1c1ac6f9230d7037807d3dbd46dc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVarLocalSearchFilter</name>
    <filename>classoperations__research_1_1IntVarLocalSearchFilter.html</filename>
    <base>operations_research::LocalSearchFilter</base>
    <member kind="function">
      <type></type>
      <name>IntVarLocalSearchFilter</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a33d3db6e4d679ffd068c6b2e1db24d2b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, Solver::ObjectiveWatcher objective_callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVarLocalSearchFilter</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a018a1764ca1b31a76a7afdb26a6d7d83</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntVarLocalSearchFilter</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>afb8bb79f08d6e1ebf866a635c5306fed</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Synchronize</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>af551c2cc4bd9dc8eca5c1aba2ea0cf1a</anchor>
      <arglist>(const Assignment *assignment, const Assignment *delta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindIndex</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a4ff8f64bad58d06ddf1e1fa16b52fefc</anchor>
      <arglist>(IntVar *const var, int64 *index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>InjectObjectiveValue</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>abeca74f43d73826093a3e288a633d7a2</anchor>
      <arglist>(int64 objective_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a78c80d2accf5a4506e3436081d365a34</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a29acf74cf99f603af9c73f5a994b48f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a5c85a90b191d5aae9ab29cf1e28ff878</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>afd72fb787ed7167fc9d959deb1286931</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsVarSynced</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>add26b0145e2f0ba25dcda0e1565164db</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>aa5af8381f70af857a1a7927e3f6e695f</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>a58392212e951aafc3a6ba400d8816790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetSynchronizedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>aa3934bba1ec84e9c9b401693b43c662a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetAcceptedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>a7a34da518a80fbaeccb2fde10f2fbd78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OnSynchronize</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a4cb6f372e557b64b09764d17c3006f86</anchor>
      <arglist>(const Assignment *delta)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SynchronizeOnAssignment</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a6371c48182d86ebf963536f1600ed058</anchor>
      <arglist>(const Assignment *assignment)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>CanPropagateObjectiveValue</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>ab18158620c5618ea05b55ebd92817e8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PropagateObjectiveValue</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a90700139ec246bb2afe40edd0afb5dd9</anchor>
      <arglist>(int64 objective_value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>injected_objective_value_</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a7b9afa3c307211ca15b6ea364f01e2a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVarLocalSearchHandler</name>
    <filename>classoperations__research_1_1IntVarLocalSearchHandler.html</filename>
    <member kind="function">
      <type>void</type>
      <name>AddToAssignment</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchHandler.html</anchorfile>
      <anchor>a391779603709ca85766ac2b5b657135c</anchor>
      <arglist>(IntVar *var, int64 value, bool active, std::vector&lt; int &gt; *assignment_indices, int64 index, Assignment *assignment) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValueFromAssignent</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchHandler.html</anchorfile>
      <anchor>ade33ac8f982908c4a8bd12a5915566fd</anchor>
      <arglist>(const Assignment &amp;assignment, IntVar *var, int64 index, int64 *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnRevertChanges</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchHandler.html</anchorfile>
      <anchor>ad22f3b6825860cb91f8e7d06500dce0e</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnAddVars</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchHandler.html</anchorfile>
      <anchor>afa971621f2fd9abc62706d2c7abb362e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVarLocalSearchOperator</name>
    <filename>classoperations__research_1_1IntVarLocalSearchOperator.html</filename>
    <base>VarLocalSearchOperator&lt; IntVar, int64, IntVarLocalSearchHandler &gt;</base>
    <member kind="function">
      <type></type>
      <name>IntVarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a1981dffba9e0458f5bd4669a5f1c15e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a350fc4d7f2ce8b649d6d2a51333614b2</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntVarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>aeb4e7fbf8ef821b20e481ae46fc5b5ac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnStart</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acea2a4d4db296445315d66aaec85ee81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a821c7457813d5411b11e6bbfce63f47a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::InverseConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1InverseConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>InverseConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>ab7d828a78e4d21daf17fcf6e98d824e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InverseConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a6ed47b0136919d6b8f0ccc6db0662b88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a0a02bcb13639cdedc21734ddce306721</anchor>
      <arglist>(const InverseConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>InverseConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a3c836696a5468e2fae84c8e227997719</anchor>
      <arglist>(const InverseConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a421f809860ebd2e28f2e864b2951e06a</anchor>
      <arglist>(InverseConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>InverseConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>aeaa8d077b7635d3823fbfda86e6e57b0</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>InverseConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a3d286c359ae5f9d363525347b696264f</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a4ae985803f8ec8e2d3413f1929811d09</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>ae2aa02fea74fade45bf32abc7b90e534</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a6f55549ebc9adcdc5e0dd763662aa4db</anchor>
      <arglist>(const InverseConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a71a6601a61d293034da8195f8e93814c</anchor>
      <arglist>(const InverseConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>aed01494d682b2b1d3015cc852d172e12</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>abbc1edcee82145402d9e10911b478d13</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a4ac325430c499d2cf1953ea464f79c07</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a836b638b2f4ae43a5039081357f79106</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a18b0a1eb0dfa05523c4cd7630a36094b</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a3fe245041d484a22a8e9fde8b1815667</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>ad8afc40bf050a234c043de0ca8b286a3</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>afb33eb21ec05e18d35cc7c9e06cb6278</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>f_direct_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a1823ca067b7bfce79a9e6e66d8e27360</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_f_direct</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a0fcf67dc19f8818ad8527cbe68018258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>f_direct</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a17851fed0bc9677d5ae52d4988fa4e0b</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_f_direct</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>af130f4b550988b7dfd18635bc57e8b6e</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_f_direct</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>aab56f0400d82e12b68f0b7a2551a5b94</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>f_direct</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>ac130e23a053a7d45bb8f12c5eac51f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_f_direct</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a03ff372c76c76ea3ac043bc6151fdfdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>f_inverse_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a65e0def917909eb24602b82e39576994</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_f_inverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a78af06f99ada7de6b94e79f975ec0577</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>f_inverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>aa243449e607387892fa83f1eed645aab</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_f_inverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a87c52075d7dc27ae402f71bc97117460</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_f_inverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a26393486a91d83ad6d2c167cd027b139</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>f_inverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>ae37f0c34a86cf741682454fc88d6d1d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_f_inverse</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a0b57a04347b29e484f1064ee2c7e9a67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a001b76a0d0bde4d748267318c4e9cf3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InverseConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a0cbe721c733514011934b36993967a4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a342fc48632f11772ecca5729c485286b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InverseConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a324502773047121717185ff1c366e45e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a391763debdbec5e02fd3453ab0069082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kFDirectFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a5741e971804b802a8066ba77a33f2c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kFInverseFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>ab0597e9cffe28f5bbda69518082774c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1InverseConstraintProto.html</anchorfile>
      <anchor>a3d2e4c9a5495ee646ed491c114f81529</anchor>
      <arglist>(InverseConstraintProto &amp;a, InverseConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::FirstSolutionStrategy_Value &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1FirstSolutionStrategy__Value_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::LocalSearchMetaheuristic_Value &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1LocalSearchMetaheuristic__Value_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::MPModelRequest_SolverType &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1MPModelRequest__SolverType_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::MPSolverCommonParameters_LPAlgorithmValues &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1MPSolverCommonParameters__LPAlgorithmValues_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::MPSolverResponseStatus &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1MPSolverResponseStatus_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::CpSolverStatus &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1CpSolverStatus_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1DecisionStrat411f5031253253c57f3c5f378dfc1bf0.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1DecisionStrat9163b6fc058f1feefc5796666205cadb.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_BinaryMinizationAlgorithm &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1SatParametersb465c243b8d7fa2fa0ca5cc28bee453c.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_ClauseOrdering &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1SatParameters__ClauseOrdering_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_ClauseProtection &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1SatParameters__ClauseProtection_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1SatParameters18e480b3e82e25979893dc86f9997a3d.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_MaxSatAssumptionOrder &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1SatParameters__MaxSatAssumptionOrder_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1SatParameters66ef3c834a5336a1d6bbbf0bf3479a8a.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_Polarity &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1SatParameters__Polarity_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_RestartAlgorithm &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1SatParameters__RestartAlgorithm_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_SearchBranching &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1SatParameters__SearchBranching_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_VariableOrder &gt;</name>
    <filename>structgoogle_1_1protobuf_1_1is__proto__enum_3_01_1_1operations__research_1_1sat_1_1SatParameters__VariableOrder_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>operations_research::SimpleRevFIFO::Iterator</name>
    <filename>classoperations__research_1_1SimpleRevFIFO_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO_1_1Iterator.html</anchorfile>
      <anchor>a542b5ed50647b660b9d87debcfaf5380</anchor>
      <arglist>(const SimpleRevFIFO&lt; T &gt; *l)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO_1_1Iterator.html</anchorfile>
      <anchor>a5879787922a77847c50b3772435439d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator *</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO_1_1Iterator.html</anchorfile>
      <anchor>af82c38a0630f56ccc4888212bd0dd2f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO_1_1Iterator.html</anchorfile>
      <anchor>a39b457178436af1a0baf7bdda6c75c10</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::InitAndGetValues::Iterator</name>
    <filename>structoperations__research_1_1InitAndGetValues_1_1Iterator.html</filename>
    <member kind="function">
      <type>int64</type>
      <name>operator *</name>
      <anchorfile>structoperations__research_1_1InitAndGetValues_1_1Iterator.html</anchorfile>
      <anchor>ad89645a8a6fb3eeb636b0ae211ae0ba9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>structoperations__research_1_1InitAndGetValues_1_1Iterator.html</anchorfile>
      <anchor>a6e4d3225cd724e3e121cdd74dd845d3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structoperations__research_1_1InitAndGetValues_1_1Iterator.html</anchorfile>
      <anchor>a3122703d46de6eace75a3de40c92aba5</anchor>
      <arglist>(const Iterator &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Iterator</type>
      <name>Begin</name>
      <anchorfile>structoperations__research_1_1InitAndGetValues_1_1Iterator.html</anchorfile>
      <anchor>a62a83485399dc0c4539d8791eb22673b</anchor>
      <arglist>(IntVarIterator *it)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Iterator</type>
      <name>End</name>
      <anchorfile>structoperations__research_1_1InitAndGetValues_1_1Iterator.html</anchorfile>
      <anchor>a0b89b39be2a5dbfe5f830521cff2e4bf</anchor>
      <arglist>(IntVarIterator *it)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MutableVectorIteration::Iterator</name>
    <filename>structMutableVectorIteration_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>structMutableVectorIteration_1_1Iterator.html</anchorfile>
      <anchor>a89176363ea78bbe3e9ea5c0d1542d0dd</anchor>
      <arglist>(typename std::vector&lt; T &gt;::iterator it)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator *</name>
      <anchorfile>structMutableVectorIteration_1_1Iterator.html</anchorfile>
      <anchor>a3c0dc6759b61b21af1e6c8e76d5ff6b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>structMutableVectorIteration_1_1Iterator.html</anchorfile>
      <anchor>a1e71d8d1b6089d432b3cfcf8a910986b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structMutableVectorIteration_1_1Iterator.html</anchorfile>
      <anchor>a9d75c806795d253b1dabbecb84ddcaf6</anchor>
      <arglist>(const Iterator &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LatticeMemoryManager</name>
    <filename>classoperations__research_1_1LatticeMemoryManager.html</filename>
    <templarg>Set</templarg>
    <templarg>CostType</templarg>
    <member kind="function">
      <type></type>
      <name>LatticeMemoryManager</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>a4f81eab503a836cab0e35f7cffdf9331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>ab5f0b45dfc80e6bddba92ea7dc8c018e</anchor>
      <arglist>(int max_card)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Offset</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>ac5d506873d40f552209caa36e734990d</anchor>
      <arglist>(Set s, int node) const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>BaseOffset</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>a5369cd69622c4264ffcf11a2d5006ecd</anchor>
      <arglist>(int card, Set s) const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>OffsetDelta</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>a143a5937788ddcaa33e732f98cd26b3f</anchor>
      <arglist>(int card, int added_node, int removed_node, int rank) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>a59f3668d8fc5dfe2b60d96892c080229</anchor>
      <arglist>(Set s, int node, CostType value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValueAtOffset</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>a7c8e0f6e664b391264f519adfeb7eae2</anchor>
      <arglist>(uint64 offset, CostType value)</arglist>
    </member>
    <member kind="function">
      <type>CostType</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>a084e48121cdd1ab05c9d60f8f45114e5</anchor>
      <arglist>(Set s, int node) const</arglist>
    </member>
    <member kind="function">
      <type>CostType</type>
      <name>ValueAtOffset</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>ad91d511dbe7e638fd8a46171f906f7e6</anchor>
      <arglist>(uint64 offset) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LatticeMemoryManager&lt; operations_research::Set, CostType &gt;</name>
    <filename>classoperations__research_1_1LatticeMemoryManager.html</filename>
    <member kind="function">
      <type></type>
      <name>LatticeMemoryManager</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>a4f81eab503a836cab0e35f7cffdf9331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>ab5f0b45dfc80e6bddba92ea7dc8c018e</anchor>
      <arglist>(int max_card)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Offset</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>ac5d506873d40f552209caa36e734990d</anchor>
      <arglist>(operations_research::Set s, int node) const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>BaseOffset</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>a5369cd69622c4264ffcf11a2d5006ecd</anchor>
      <arglist>(int card, operations_research::Set s) const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>OffsetDelta</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>a143a5937788ddcaa33e732f98cd26b3f</anchor>
      <arglist>(int card, int added_node, int removed_node, int rank) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>a59f3668d8fc5dfe2b60d96892c080229</anchor>
      <arglist>(operations_research::Set s, int node, CostType value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValueAtOffset</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>a7c8e0f6e664b391264f519adfeb7eae2</anchor>
      <arglist>(uint64 offset, CostType value)</arglist>
    </member>
    <member kind="function">
      <type>CostType</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>a084e48121cdd1ab05c9d60f8f45114e5</anchor>
      <arglist>(operations_research::Set s, int node) const</arglist>
    </member>
    <member kind="function">
      <type>CostType</type>
      <name>ValueAtOffset</name>
      <anchorfile>classoperations__research_1_1LatticeMemoryManager.html</anchorfile>
      <anchor>ad91d511dbe7e638fd8a46171f906f7e6</anchor>
      <arglist>(uint64 offset) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LightPairRelocateOperator</name>
    <filename>classoperations__research_1_1LightPairRelocateOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>LightPairRelocateOperator</name>
      <anchorfile>classoperations__research_1_1LightPairRelocateOperator.html</anchorfile>
      <anchor>ac3616bf4f782e616f0db3cf17db413c9</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LightPairRelocateOperator</name>
      <anchorfile>classoperations__research_1_1LightPairRelocateOperator.html</anchorfile>
      <anchor>afb5dbb221368af95c0d0c5db3e21e4ea</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1LightPairRelocateOperator.html</anchorfile>
      <anchor>ab5a8f9eadcc60ebb142f301ad0206f45</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1LightPairRelocateOperator.html</anchorfile>
      <anchor>a748f7ffb28521cbf984314b0976ea88e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::LinearConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1LinearConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>LinearConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a6aa278f389f1ff7352951759cb35e9f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a8f372b8f76be749f79febb9c3efe2e9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>af0ba80b16019522fc72df842bf793486</anchor>
      <arglist>(const LinearConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>LinearConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a9c8f76e5cbd2626626c02fc2cc95ee93</anchor>
      <arglist>(const LinearConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a542f5e8ae5d4f6497dae61eec6526a83</anchor>
      <arglist>(LinearConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>LinearConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>aabb7e6500c398c4768d3bdbf72fdaf78</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>LinearConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>ab41b4e7d447883313ad3cf79a7bf1333</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>ae902ec0b85ad20e45f1d1aca587154af</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a04d16ca877e9d32d2b308535ab194ad4</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a9b6b120d04037212c10d65f1c165eac2</anchor>
      <arglist>(const LinearConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>afb1c98d55bcdeed480ec0890b5f30946</anchor>
      <arglist>(const LinearConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a7a1a23133926471a14e931fbe81e3433</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>ab0572f27f07a8e6fc86e1e0e17736e27</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a99f98832afd422c959bdc222a0ed1c4d</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a59345ee7a0f4fb46cfea81f5706a44c9</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a26d94e1077abb1d225dc1cff79115828</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a1f72815b3f0c64cdeacf2b6588de27ca</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a0d290df52c40d482c2d0f9aa84761980</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a9dd65cbbc0e23fe45e0b56b07ba41a97</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vars_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a68b05913498bab89ba6e13474c71901b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a6a416958361de15588476ed10b875e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>ad5a96be4b085b8079f88acc078c1206e</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a48153b0908ab52ef751af444a8bb21f2</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>aa32001e1d34909075d470e6c340f23f9</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a9b89a74a9285096815daaae3cb88cef1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a0cd04adfd0040fd66dad694659a5e8e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coeffs_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a8feeb0891af5e423e4db0a0a600f9a30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_coeffs</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a7304f5884dd32bf6477aaa3df31db010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>coeffs</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a59420f1aa75b90ae1ebbfbece5a62cc6</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_coeffs</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>acfe7f207f1c13152768aa22c336ccafa</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_coeffs</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a16ded2172bd8e0eb24b8d6ddec8ed509</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>coeffs</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>adffffa27012872d39a6a849846c1a967</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_coeffs</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>aec1b4c510553db2ba1298b3861349a89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>domain_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>add30ee0c22588d8ae37828bf09af8f0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a55c162a3077e0af1ee778a4b052af1cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a6b59fe1edcaae5ee12ff2ad388406703</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a5ece7ea8553ce7f2ca44f2a1887a9d41</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>aea11befb2a8995c54d9f9aec3e0ddd1f</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>aac55042e1e2d3c7ba00701f7db1b5bad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_domain</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a4ece75ec9fd0878e6da9bab1d74ddaad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a10c127f451771e37f5aa0cf185d09c34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LinearConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a0aa021a204830124c46e1f7057dff2d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>ad30d392cf1e85346e00c567f5e3b3925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LinearConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a58c19ef752f3bf6d7e6808eafd958f10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>aeac61c8b2838f8f6b0ce023139d2c4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a0b620fd97b2605f6306fadefe54e5aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCoeffsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>ab1282b6f5ecf6f68d384694966264e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kDomainFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>ad5430f9ab23f7a653a862667cdafb3f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearConstraintProto.html</anchorfile>
      <anchor>a88e40540b7363ae519958485bef87b7e</anchor>
      <arglist>(LinearConstraintProto &amp;a, LinearConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::LinearExpr</name>
    <filename>classoperations__research_1_1sat_1_1LinearExpr.html</filename>
    <member kind="function">
      <type></type>
      <name>LinearExpr</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>ab33a810593c0a9f585133edcb22deb55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearExpr</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>aa9dc77d3e71adbebbebbaec9df2890e7</anchor>
      <arglist>(BoolVar var)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearExpr</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>abce3810df8307fd1d04f49b36a2e6693</anchor>
      <arglist>(IntVar var)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearExpr</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>ab2654673474a3bdd47ddf4be52892292</anchor>
      <arglist>(int64 constant)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr &amp;</type>
      <name>AddConstant</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>abed3c016b025d92058b1c29ddeef9341</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVar</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>afb9c31fb1176a9ba22d4b82fa285a5c7</anchor>
      <arglist>(IntVar var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddTerm</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>aa8bfd52517f0e1ca2a9adef474f1ff0c</anchor>
      <arglist>(IntVar var, int64 coeff)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVar &gt; &amp;</type>
      <name>variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>af5805ba35a6efa9460c5d8eab8301172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>coefficients</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>a6f0e8040bcb0ee633efd0862c660cbf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>constant</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>a050775df6d69660af8f78d577fd327cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LinearExpr</type>
      <name>Sum</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>a74026647307b38916135e8c3dad3421f</anchor>
      <arglist>(absl::Span&lt; const IntVar &gt; vars)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LinearExpr</type>
      <name>ScalProd</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>a3b49fe9924ad61a609f65f4a7bc4c861</anchor>
      <arglist>(absl::Span&lt; const IntVar &gt; vars, absl::Span&lt; const int64 &gt; coeffs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LinearExpr</type>
      <name>BooleanSum</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>a0a6ff6ac94b7e556ff06df6f8211182f</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; vars)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LinearExpr</type>
      <name>BooleanScalProd</name>
      <anchorfile>classoperations__research_1_1sat_1_1LinearExpr.html</anchorfile>
      <anchor>ae62c3c0da3b623e5e43530c08f7bf379</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; vars, absl::Span&lt; const int64 &gt; coeffs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LinearExpr</name>
    <filename>classoperations__research_1_1LinearExpr.html</filename>
    <member kind="function">
      <type></type>
      <name>LinearExpr</name>
      <anchorfile>classoperations__research_1_1LinearExpr.html</anchorfile>
      <anchor>a3245b8350f417872f1f638ecd22a832f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearExpr</name>
      <anchorfile>classoperations__research_1_1LinearExpr.html</anchorfile>
      <anchor>a1b0d711ef242dd88399cfee1b2b223f8</anchor>
      <arglist>(double constant)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearExpr</name>
      <anchorfile>classoperations__research_1_1LinearExpr.html</anchorfile>
      <anchor>a475c727fd23f4424031df23655b8412b</anchor>
      <arglist>(const MPVariable *var)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr &amp;</type>
      <name>operator+=</name>
      <anchorfile>classoperations__research_1_1LinearExpr.html</anchorfile>
      <anchor>a5f501758e469b8718b8410bb87100f51</anchor>
      <arglist>(const LinearExpr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr &amp;</type>
      <name>operator-=</name>
      <anchorfile>classoperations__research_1_1LinearExpr.html</anchorfile>
      <anchor>a359bec8d7b3221d7549c98b0825970d4</anchor>
      <arglist>(const LinearExpr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr &amp;</type>
      <name>operator *=</name>
      <anchorfile>classoperations__research_1_1LinearExpr.html</anchorfile>
      <anchor>a757085e5b10be1bde2ff049a3dbc51c7</anchor>
      <arglist>(double rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr &amp;</type>
      <name>operator/=</name>
      <anchorfile>classoperations__research_1_1LinearExpr.html</anchorfile>
      <anchor>a14e5dbbcd5618dc42a8799181490742e</anchor>
      <arglist>(double rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr</type>
      <name>operator-</name>
      <anchorfile>classoperations__research_1_1LinearExpr.html</anchorfile>
      <anchor>a3f94eb1c0b25852c0ff0910b83d363d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>offset</name>
      <anchorfile>classoperations__research_1_1LinearExpr.html</anchorfile>
      <anchor>aff2f953067d8d8854273fa973496466e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const absl::flat_hash_map&lt; const MPVariable *, double &gt; &amp;</type>
      <name>terms</name>
      <anchorfile>classoperations__research_1_1LinearExpr.html</anchorfile>
      <anchor>a37d87e22cd7125839fab636219336df8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SolutionValue</name>
      <anchorfile>classoperations__research_1_1LinearExpr.html</anchorfile>
      <anchor>a07afbba5788651a38be83e959bbbc92c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LinearExpr</type>
      <name>NotVar</name>
      <anchorfile>classoperations__research_1_1LinearExpr.html</anchorfile>
      <anchor>a46b677de8b46c72ffdff9e16bc2e3745</anchor>
      <arglist>(LinearExpr var)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LinearRange</name>
    <filename>classoperations__research_1_1LinearRange.html</filename>
    <member kind="function">
      <type></type>
      <name>LinearRange</name>
      <anchorfile>classoperations__research_1_1LinearRange.html</anchorfile>
      <anchor>a9ce7b1b40dc5135ed9ca27cfedeca64e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearRange</name>
      <anchorfile>classoperations__research_1_1LinearRange.html</anchorfile>
      <anchor>a754af83faa8744d01ecbf5091d4633a8</anchor>
      <arglist>(double lower_bound, const LinearExpr &amp;linear_expr, double upper_bound)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lower_bound</name>
      <anchorfile>classoperations__research_1_1LinearRange.html</anchorfile>
      <anchor>ac9dc29ebeaf4a37d108c0094ca89eb9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LinearExpr &amp;</type>
      <name>linear_expr</name>
      <anchorfile>classoperations__research_1_1LinearRange.html</anchorfile>
      <anchor>aa75204d544c4e4fc91c3ee8a091dd690</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upper_bound</name>
      <anchorfile>classoperations__research_1_1LinearRange.html</anchorfile>
      <anchor>a527995fddd9d1781d996ff6f50e48041</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LinearSumAssignment</name>
    <filename>classoperations__research_1_1LinearSumAssignment.html</filename>
    <templarg></templarg>
    <class kind="class">operations_research::LinearSumAssignment::BipartiteLeftNodeIterator</class>
    <member kind="typedef">
      <type>GraphType::NodeIndex</type>
      <name>NodeIndex</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a1780a52b2a406fbcd615241ab7705824</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphType::ArcIndex</type>
      <name>ArcIndex</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a0e8e2b115674cbc0c82b83a950839e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearSumAssignment</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a1eae4227ff347a3d9b66cc705118f092</anchor>
      <arglist>(const GraphType &amp;graph, NodeIndex num_left_nodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearSumAssignment</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>aeab56b5cf9d29dd479588f6ae9905df6</anchor>
      <arglist>(NodeIndex num_left_nodes, ArcIndex num_arcs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinearSumAssignment</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a92753d803a93847c06ad188d1532b99c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetGraph</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a505cde11a037301682460196f8c6b93b</anchor>
      <arglist>(const GraphType *graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCostScalingDivisor</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>ab0da9fe270ac009766835e156e88691d</anchor>
      <arglist>(CostValue factor)</arglist>
    </member>
    <member kind="function">
      <type>operations_research::PermutationCycleHandler&lt; typename GraphType::ArcIndex &gt; *</type>
      <name>ArcAnnotationCycleHandler</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>af6bc9d1acdf2224915aa2441e11e0012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OptimizeGraphLayout</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a15cfa33783e509c9ab447858abf6cdab</anchor>
      <arglist>(GraphType *graph)</arglist>
    </member>
    <member kind="function">
      <type>const GraphType &amp;</type>
      <name>Graph</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>ae3b69f5e71ec0fd7d7afa3b8f4362c60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a0ab1092db058f93c6baf0d4ea44f15a8</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>CostValue</type>
      <name>ArcCost</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>acad00acac7169537c5fa2a2c52ff9d02</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcCost</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a501362f6a94f5df6b53e401f0d179609</anchor>
      <arglist>(ArcIndex arc, CostValue cost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FinalizeSetup</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a43439fdb497f05396053b387ea880ebc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeAssignment</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a5784b0e0c525622091351e1ee4d4e73d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CostValue</type>
      <name>GetCost</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a5b4c65750d20e6a8139f56d9ec0b8110</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>NumNodes</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a16dcc92e05be8b51c348b1b3f0aac5fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>NumLeftNodes</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a0bde059a6043623c8a208dbedb44185d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndex</type>
      <name>GetAssignmentArc</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>ac2682c67a5799b2f76105159621a971a</anchor>
      <arglist>(NodeIndex left_node) const</arglist>
    </member>
    <member kind="function">
      <type>CostValue</type>
      <name>GetAssignmentCost</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>aba97b69de699d2b370cf10430f6ea49e</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>GetMate</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>ab369ec930d05edbccaef63529b852ffc</anchor>
      <arglist>(NodeIndex left_node) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>StatsString</name>
      <anchorfile>classoperations__research_1_1LinearSumAssignment.html</anchorfile>
      <anchor>a2a115d652d12c1cb1f061afa6b0a2439</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ListGraph</name>
    <filename>classutil_1_1ListGraph.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>BaseGraph&lt; NodeIndexType, ArcIndexType, false &gt;</base>
    <class kind="class">util::ListGraph::OutgoingArcIterator</class>
    <class kind="class">util::ListGraph::OutgoingHeadIterator</class>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>adb271cf4bcf2de5b5bbe300d7054af29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0eba6e5899924388644dfa2258ae8929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListGraph</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>a4b5be895dae4a52e7bd97a7ef47267a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListGraph</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>a184d6ce1a3d943810039ac9b97b860ef</anchor>
      <arglist>(NodeIndexType num_nodes, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNode</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>a6af38e88610400b54e8f28ab6f880908</anchor>
      <arglist>(NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>AddArc</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>ac1aa8c7591bb033a49bab79c21c9f496</anchor>
      <arglist>(NodeIndexType tail, NodeIndexType head)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Build</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>a777ff917f03a31da77f275d536578afa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Build</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>a55c0cd4ab76f4501d0a2b9bbdb308d00</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>OutDegree</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>ac52db792129da62b7ab25372ab90647c</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingArcIterator &gt;</type>
      <name>OutgoingArcs</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>ab63770fa993b9347586d2852b841bdc2</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingArcIterator &gt;</type>
      <name>OutgoingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>ac52a095c1ebbd1ca89902168350bbb75</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingHeadIterator &gt;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>a1565480b94bf179067e81d762916ed52</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Tail</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>aba03f198f690155bca2ab23b039cea54</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>ad7d3d076d3c154d89f1eda855a34b487</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReserveNodes</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>aefd885a0eba3ec33568137533190ba5b</anchor>
      <arglist>(NodeIndexType bound) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReserveArcs</name>
      <anchorfile>classutil_1_1ListGraph.html</anchorfile>
      <anchor>af637e16c3c7604f0354a6fa317358a15</anchor>
      <arglist>(ArcIndexType bound) override</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0f551c921fa0b5aaa334a6e36f61db4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aefb468e4d4a3128c91b3bad9f5b314c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; NodeIndex &gt;</type>
      <name>AllNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a32ba4a5ca9a4b89f750eb2dc56518b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndex &gt;</type>
      <name>AllForwardArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abcfd7c21143e5ed38573c0dd60826dd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abf853acea86e01356f53055f77661770</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a2097ccda3b1ad27e2c82166979018bda</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>node_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a463d57480c9563a7a707c5d0928c9946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>arc_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a92ffd852b2ab2e5241f9832e71a2de71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab731ca5c638e7b1b0a2c459c94a90f55</anchor>
      <arglist>(NodeIndexType node_capacity, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeCapacities</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa3bd051d1e141b09dda17aa9b5f24f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a07214b96597069d781e27b1dd17ef83e</anchor>
      <arglist>(const A &amp;a, B *b)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a346b8a5811f0e287e1ebce2de2c1ad28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab1292c82a3f43be3bd57b63a05fe0214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad5b77846f77c2771e840820812ad5521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeCumulativeSum</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ac47030fcb75a3220f8cf9ed79697056e</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BuildStartAndForwardHead</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a63fd586eed6c345866317e2f0faf377e</anchor>
      <arglist>(SVector&lt; NodeIndexType &gt; *head, std::vector&lt; ArcIndexType &gt; *start, std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a473db46afec1eabf0762411830dee30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>node_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a424bd34a9767e7edeaf3a60ecd3cb000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>af16f99d41856a7b22ae8a226ef09abff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>arc_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a895e891d1ad52ce3efcfeb7ba11194c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>const_capacities_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa980e5526b9ded17a83928fc339c71e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalDimensionCumulOptimizer</name>
    <filename>classoperations__research_1_1LocalDimensionCumulOptimizer.html</filename>
    <member kind="function">
      <type></type>
      <name>LocalDimensionCumulOptimizer</name>
      <anchorfile>classoperations__research_1_1LocalDimensionCumulOptimizer.html</anchorfile>
      <anchor>ac4fce7a68e479fab75cf1d5e161d75df</anchor>
      <arglist>(const RoutingDimension *dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeRouteCumulCost</name>
      <anchorfile>classoperations__research_1_1LocalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a61efb881f6d454c92969b636860c3ec0</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor, int64 *optimal_cost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeRouteCumulCostWithoutFixedTransits</name>
      <anchorfile>classoperations__research_1_1LocalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a17d5586b9cbc444067c85f3a664edc94</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor, int64 *optimal_cost_without_transits)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeRouteCumuls</name>
      <anchorfile>classoperations__research_1_1LocalDimensionCumulOptimizer.html</anchorfile>
      <anchor>aac604b6944a3226c09b8227cfcd95e41</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor, std::vector&lt; int64 &gt; *optimal_cumuls)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputePackedRouteCumuls</name>
      <anchorfile>classoperations__research_1_1LocalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a80bde55511799f3e2b2e3d82c92b1514</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor, std::vector&lt; int64 &gt; *packed_cumuls)</arglist>
    </member>
    <member kind="function">
      <type>const RoutingDimension *</type>
      <name>dimension</name>
      <anchorfile>classoperations__research_1_1LocalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a9771b7daec71c086f027561e905a447e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalSearchFilter</name>
    <filename>classoperations__research_1_1LocalSearchFilter.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>aa5af8381f70af857a1a7927e3f6e695f</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Synchronize</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>ac3893c2931854f86757c29ff7e143cf2</anchor>
      <arglist>(const Assignment *assignment, const Assignment *delta)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>a58392212e951aafc3a6ba400d8816790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetSynchronizedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>aa3934bba1ec84e9c9b401693b43c662a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetAcceptedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>a7a34da518a80fbaeccb2fde10f2fbd78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalSearchFilterManager</name>
    <filename>classoperations__research_1_1LocalSearchFilterManager.html</filename>
    <base>operations_research::LocalSearchFilter</base>
    <member kind="function">
      <type></type>
      <name>LocalSearchFilterManager</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>a24980b170291a5f2dff5d587ef7cd6de</anchor>
      <arglist>(Solver *const solver, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters, IntVar *objective)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>a92e302e76f3c9a4033c390cbd2be9c48</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>a15197a5499227e3f214d62689311a5c1</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Synchronize</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>a4d764b8986da01084d2a72d5647f55fa</anchor>
      <arglist>(const Assignment *assignment, const Assignment *delta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>a0654f6b8fd7014e71e8e8f2a7bc03a23</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetSynchronizedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>a863e8eb7f31ead91695680c40817e0be</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetAcceptedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>abda6fc666fdc0a5ed2c7beb64298aec8</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalSearchMetaheuristic</name>
    <filename>classoperations__research_1_1LocalSearchMetaheuristic.html</filename>
    <member kind="typedef">
      <type>LocalSearchMetaheuristic_Value</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a5d4697b27f6321581fb9c188b6030ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalSearchMetaheuristic</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a2ad92683411ff47b172dbbb2ad7990b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocalSearchMetaheuristic</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a0658d095b2b9bfc00e9b62ce3c45e006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalSearchMetaheuristic</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a4b0a436069a6a1c349af65509395c7aa</anchor>
      <arglist>(const LocalSearchMetaheuristic &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchMetaheuristic &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aaf1586b73fc2e1471ddc41c4b2b70780</anchor>
      <arglist>(const LocalSearchMetaheuristic &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>afc40375ec1c1e88c81deaf9e7be8af37</anchor>
      <arglist>(LocalSearchMetaheuristic *other)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchMetaheuristic *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aa037866b3ed4fbeffc885ee78d6d5d92</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchMetaheuristic *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a1221a688aaed6a1c0e7185b50fa915d9</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a56bc3d526564aaa73775da15761cf4a1</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aacc9c336989478c199e06d82280c6822</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a087f089c7d7ea9224b57cee0ea909ecc</anchor>
      <arglist>(const LocalSearchMetaheuristic &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>af14f701f5deb0304960fdee56766f0ac</anchor>
      <arglist>(const LocalSearchMetaheuristic &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a4250b5db76bd00a90377f3c05bae976a</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aa4b4ac3b1a0934cdcf5c8c70fcf84bc8</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aa1c430208dba52b2135f331da328c9ab</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a548bddb43cecec213ec45db15017b5d4</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>ab0ae9b7acd3526090cda46f8595433cd</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a35115856799814cd22493b328ae3eaa0</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a8fcf45d7af42f8ac098626eb728ac229</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a9fb80b53a3c4b365ec88ac4c9284df26</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aab7ad24c677d3adcdaff4dd550365846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LocalSearchMetaheuristic &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>af9408a6b07ab233da3d84f34b7637c38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a6b185ba9cc88b94a7e6b49b7ac9defd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LocalSearchMetaheuristic *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aecb02e9d1326dbcf984a413940f27e72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Value_IsValid</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a23cf343ccf97301c98821c12f7f1fc85</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>Value_descriptor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a2f918eb223844572162bcbf7d684a6c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>Value_Name</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aef4c1c27f1026c24022b1abfb7278dbb</anchor>
      <arglist>(Value value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Value_Parse</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aed0c5df053602a2e236067569060c816</anchor>
      <arglist>(const ::std::string &amp;name, Value *value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a5fa09a36f821774167496a10f3c8fa25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>UNSET</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aa1d84a66ec946950aad8771bab989f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>AUTOMATIC</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a3f4e789e3c97d6f2bb66b5aa92d606ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>GREEDY_DESCENT</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>ab86c18953547ee5edce729505378d27a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>GUIDED_LOCAL_SEARCH</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>ac9a4546877b5abb260fc20dcdd985233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>SIMULATED_ANNEALING</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aa528e65a25c752adbf71738ffe4fa5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>TABU_SEARCH</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>afa344a17e25cc613856c1dda0402711d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>GENERIC_TABU_SEARCH</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>ac1c6cf6408a1e2c73bc4395517d4b3f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>Value_MIN</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aac83642b92f97ea26ef8d1b32fb61290</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>Value_MAX</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>ad36ef2dc4e546a1b7ccdddd496936af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>Value_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aae59d3f7f8390dd9d7620b23c4dcb7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>ada67e3eb964f85aa7e57c01e29ea271a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a5ca2961ffd410bcf6d842a7aef3ea6a2</anchor>
      <arglist>(LocalSearchMetaheuristic &amp;a, LocalSearchMetaheuristic &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalSearchMonitor</name>
    <filename>classoperations__research_1_1LocalSearchMonitor.html</filename>
    <base>operations_research::SearchMonitor</base>
    <member kind="function">
      <type></type>
      <name>LocalSearchMonitor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>aa69f2ddc0e76eecc333aa6505f7d6a8e</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalSearchMonitor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a5db8616ae9665eedb10dcb10ce6398ed</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>ab47cdaf51e8a28905ab0967a65138adc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginOperatorStart</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a544e3a1c71266408a15f304184cdc179</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndOperatorStart</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a9f953f2de5609fc5cac50f5c023a60b6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginMakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a4e1a9310923c4a0f554cbd4f1474c5e7</anchor>
      <arglist>(const LocalSearchOperator *op)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndMakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>ad39aa970731c1930735482b007593229</anchor>
      <arglist>(const LocalSearchOperator *op, bool neighbor_found, const Assignment *delta, const Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginFilterNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a5914f2ac46a62c31d62a34c12204ca68</anchor>
      <arglist>(const LocalSearchOperator *op)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndFilterNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a95198a0318eb4fe4821323dc1db48301</anchor>
      <arglist>(const LocalSearchOperator *op, bool neighbor_found)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginAcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a3436dabc0ea229c479f937ecb5ec2743</anchor>
      <arglist>(const LocalSearchOperator *op)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndAcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a191dd72e25ead0ee875d41efef583a4c</anchor>
      <arglist>(const LocalSearchOperator *op, bool neighbor_found)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginFiltering</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a7bf1defae00f7c23df28ebb20bf90252</anchor>
      <arglist>(const LocalSearchFilter *filter)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndFiltering</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>af840411f140aa38f074efa704f3a94da</anchor>
      <arglist>(const LocalSearchFilter *filter, bool reject)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a6edec376019f48002aa7e57230ceae70</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a705ae4bfa396632c23d65f37793391f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab98b6cd2d173adb819adff4e1839f10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a2f3ea4577e11fad619c2d7dcad1617cd</anchor>
      <arglist>(DecisionBuilder *const b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aadfcba48c62683c6d6463a7adb9b0a28</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac4f21fe0c304fc837d903feb65fe858f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9cb45d67a60d4729f1e1fd4d0c6442db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9b300dfb35699cf80504c00f2cbe9153</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalSearchOperator</name>
    <filename>classoperations__research_1_1LocalSearchOperator.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>LocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>af23505cc80b48f7de0c2e6a8d8424c5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a82deb7603d974196eaeee831422b105c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a2951ae57e5fd3fce7d4f9b831594b460</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a832fd07f7355d16895841a4735e544c1</anchor>
      <arglist>(const Assignment *assignment)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a2288c9bfc7b3d9ad8e06c346c675b2b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MakePairActiveOperator</name>
    <filename>classoperations__research_1_1MakePairActiveOperator.html</filename>
    <base>operations_research::PathOperator</base>
    <member kind="function">
      <type></type>
      <name>MakePairActiveOperator</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>a7eb2cc10b88cc541d4354f95ed5b7f8a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MakePairActiveOperator</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>ad437f158c83867d508073095ec2a0626</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>adf56eeee1f33c11ce6f80d4a881ada31</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>a6cdf2d6cd73f281d1d0aff368e551d99</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>a0b374cf2ad00b0ae1249ae3f40748c9d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>a723d92c5b664592897a42cb2d2478e0f</anchor>
      <arglist>(int64 base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>a54d05bb6495074bd795eeece6f7466a6</anchor>
      <arglist>(int base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>a77e9aa9f4c619b386919b734d6cbda90</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MakePairInactiveOperator</name>
    <filename>classoperations__research_1_1MakePairInactiveOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>MakePairInactiveOperator</name>
      <anchorfile>classoperations__research_1_1MakePairInactiveOperator.html</anchorfile>
      <anchor>af877ae93fa7bf552fdf10703fa74f158</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1MakePairInactiveOperator.html</anchorfile>
      <anchor>a772a3dc510a540342e0e010d7fa6f7ac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1MakePairInactiveOperator.html</anchorfile>
      <anchor>aad7e91452b315d47ff25a9873f438316</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MakeRelocateNeighborsOperator</name>
    <filename>classoperations__research_1_1MakeRelocateNeighborsOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>MakeRelocateNeighborsOperator</name>
      <anchorfile>classoperations__research_1_1MakeRelocateNeighborsOperator.html</anchorfile>
      <anchor>ad6611b61f8fdb09c8c8f1b14385a667e</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, RoutingTransitCallback2 arc_evaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MakeRelocateNeighborsOperator</name>
      <anchorfile>classoperations__research_1_1MakeRelocateNeighborsOperator.html</anchorfile>
      <anchor>ae49dc60789eb70b93409c83e13f234ab</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1MakeRelocateNeighborsOperator.html</anchorfile>
      <anchor>a68fcef23cc239d8bc9f7864595a05d5e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1MakeRelocateNeighborsOperator.html</anchorfile>
      <anchor>a5e5d6f27a9a11ec5ff0d88fe0e83a003</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MaxFlow</name>
    <filename>classoperations__research_1_1MaxFlow.html</filename>
    <base>GenericMaxFlow&lt; StarGraph &gt;</base>
    <member kind="typedef">
      <type>StarGraph ::NodeIndex</type>
      <name>NodeIndex</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>af29cd6d6e7b334690d8ebe90ed0be410</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::ArcIndex</type>
      <name>ArcIndex</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>abaf68b768e58ec738030f02c288d4ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::OutgoingArcIterator</type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a41c3325e4b03cd0763ccf20aa857f7a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::OutgoingOrOppositeIncomingArcIterator</type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ab6aa151eb19acac7bcbeced26a82f355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::IncomingArcIterator</type>
      <name>IncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>abaa264696c6c702be6b4a54c5b7947b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; ArcIndex &gt;</type>
      <name>ArcIndexArray</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a11a3c0e3b614e504cbb174cf0c4a90db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeIndex</type>
      <name>NodeHeight</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a4bfa3888f90a91610caa02c8498c6f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; NodeHeight &gt;</type>
      <name>NodeHeightArray</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a93990798ae28a85494473072c95072d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfbac3c19ea88d51e9ddc44a20cc13e4fb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba521cd576d678a5c22f21b4a7ec2ff02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_OVERFLOW</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba288fa96697726e05e63cc28b56c57d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_INPUT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba9b4b284d9cef8bc7ea112971c14584df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba64972e5527eb00cc4e60ce5b2f898193</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfbac3c19ea88d51e9ddc44a20cc13e4fb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba521cd576d678a5c22f21b4a7ec2ff02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_OVERFLOW</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba288fa96697726e05e63cc28b56c57d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_INPUT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba9b4b284d9cef8bc7ea112971c14584df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba64972e5527eb00cc4e60ce5b2f898193</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxFlow</name>
      <anchorfile>classoperations__research_1_1MaxFlow.html</anchorfile>
      <anchor>a13a87ef36714bce2a634ff7b45b11e12</anchor>
      <arglist>(const StarGraph *graph, NodeIndex source, NodeIndex target)</arglist>
    </member>
    <member kind="function">
      <type>const StarGraph *</type>
      <name>graph</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a8f83ce5b69d2e3d4cbf314ed6b3d01a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>status</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a9662fa5cf2007a62968e6c22fb8a4564</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>GetSourceNodeIndex</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aeeb216a2384f75c7a46cf54de35027d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>GetSinkNodeIndex</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a8c16f1156b2e038ca0d3f8ba96490ab5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcCapacity</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a05f2661c573eb445212f4eddd694fc2f</anchor>
      <arglist>(ArcIndex arc, FlowQuantity new_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a9a357ac0cc6e451b5b1b81a9abdeb49b</anchor>
      <arglist>(ArcIndex arc, FlowQuantity new_flow)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a1da59e63f4d617578a0dc218d7f2f3e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>GetOptimalFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a90f1c23703ab4e69d7e42549ea005464</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Flow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aef5b9fc304666691405861f4caf35f45</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Capacity</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aa094beccfd146238de41da6f8a2b2e4a</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSourceSideMinCut</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a022da70970a497438cd0304cf1c6efd9</anchor>
      <arglist>(std::vector&lt; NodeIndex &gt; *result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSinkSideMinCut</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad7892ad5aa8338015f320267fb7f298f</anchor>
      <arglist>(std::vector&lt; NodeIndex &gt; *result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckInputConsistency</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a6a160e49372bec143572964e6b19f444</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckResult</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5ceac4e6ee8eedd556f1cdec11a2b665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AugmentingPathExists</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a75c3aeba25a7c62b4e237d2b34594b0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUseGlobalUpdate</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a1055514c9f93a7ffeea0ae9e8a6a7f58</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUseTwoPhaseAlgorithm</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a0497a8b934a2aa9f7307428736f72522</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCheckInput</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a3aaa8be2e8b64b746e6b46fa6463bbde</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCheckResult</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad80ce21a3088b4798da0eae774b0bab6</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessNodeByHeight</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>acc608bd04efcbcc5b72b76795f5d49d8</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>FlowModel</type>
      <name>CreateFlowModel</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5b1cf7943417c669c41dc29547f8cd00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsAdmissible</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aecd4716fa878055b30386f0f97a0d907</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsActive</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5b535e0a581ca57102d6c495a10bc911</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetCapacityAndClearFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a0c56ff7a0c8bac88e8f6e0da3689e838</anchor>
      <arglist>(ArcIndex arc, FlowQuantity capacity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>CheckRelabelPrecondition</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a9dbc134de4c5e1d424b49f7000c713f4</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a57cf9ba195eb368ccd5856ef7de4dcca</anchor>
      <arglist>(const std::string &amp;context, ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeActiveNodeContainer</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a3b47bff3c2733b198d34aeaa0cbcfa19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndex</type>
      <name>GetAndRemoveFirstActiveNode</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad411ee050c1c6a25b5b2abc42a2f0491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushActiveNode</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a4cc032f9987eb1ae9eaa8ebb013f671b</anchor>
      <arglist>(const NodeIndex &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsEmptyActiveNodeContainer</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a3653a3df1b94e4150486b5149d8eaae7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Refine</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a1061c1ce94ccc0d379390b8542bfaa23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>RefineWithGlobalUpdate</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a91d754521a7d43dd215e5d6200ec1062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Discharge</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5a2c545458610cc9b1486ae083708574</anchor>
      <arglist>(NodeIndex node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializePreflow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a20139b839cd5764939afc8df968a2484</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushFlowExcessBackToSource</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a05eb488b184996513248b0dffca59600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GlobalUpdate</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad3925f2137b18b1555563ed149ada740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>SaturateOutgoingArcsFromSource</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a2d2ffca7a04ecd2975025cb34a3898cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushFlow</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a1c31c96effb1f91f800895be2339045b</anchor>
      <arglist>(FlowQuantity flow, ArcIndex arc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Relabel</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aa70e526f9be229e52bf598d9cd0e7406</anchor>
      <arglist>(NodeIndex node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndex</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad4a6ec3deadedd6c027b8c0fbbdac88d</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndex</type>
      <name>Tail</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ac28ab380716ec139afa31d485bbbd068</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndex</type>
      <name>Opposite</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a15c425face4a4d1697c7ba298a727192</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsArcDirect</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aab64a5e41b9e15ab0953a59ef9fd2f49</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ace677adc9ba14e72018a7aa78955df18</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeReachableNodes</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ade3632560edb912b1758628f327dfe3d</anchor>
      <arglist>(NodeIndex start, std::vector&lt; NodeIndex &gt; *result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StarGraph *</type>
      <name>graph_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a27da86de84ba65849c8aebf7aa153f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QuantityArray</type>
      <name>node_excess_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a6881e220a50b6ab95192f7f263b5eee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHeightArray</type>
      <name>node_potential_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a65afde65cda262fce8107f3a15d657c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QuantityArray</type>
      <name>residual_arc_capacity_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a4c09a4799a59a5e2947b2da44c7d0ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexArray</type>
      <name>first_admissible_arc_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a5421b464b61e322c676935f312501af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; NodeIndex &gt;</type>
      <name>active_nodes_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ad52713e66db4d174006e1c3cac7d9d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PriorityQueueWithRestrictedPush&lt; NodeIndex, NodeHeight &gt;</type>
      <name>active_node_by_height_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a7cc8b8045738632185c7c0f82eb9791f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndex</type>
      <name>source_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a4a6b55b37ed5a95debcd86aa40370e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndex</type>
      <name>sink_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a7f228bb0707a9ebf78dd67ee15746030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Status</type>
      <name>status_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a784643a086180b1755f704d652f564a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>node_in_bfs_queue_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aaf724f9c00dee72b9b2e510e9e88e13e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; NodeIndex &gt;</type>
      <name>bfs_queue_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ac0e27ffc0885628dfcc430197434c311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_global_update_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ab3915b57ac3d28863ad3372f1598a494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_two_phase_algorithm_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a323ba66c6b6e63c3c7165081614e2689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>process_node_by_height_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>aa44b5dfa3bad855a7a7b19750b6db748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>check_input_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a643e76aab33e0ee6c13b0b336af05352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>check_result_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a92fbc9576b457ceddeb21395181b3273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StatsGroup</type>
      <name>stats_</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>a3aae9d11f361dfd5c98dcca64987cfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const FlowQuantity</type>
      <name>kMaxFlowQuantity</name>
      <anchorfile>classoperations__research_1_1GenericMaxFlow.html</anchorfile>
      <anchor>ac4278804a3c23b3a7f340930a81ff15f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MaxFlowStatusClass</name>
    <filename>classoperations__research_1_1MaxFlowStatusClass.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfbac3c19ea88d51e9ddc44a20cc13e4fb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba521cd576d678a5c22f21b4a7ec2ff02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_OVERFLOW</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba288fa96697726e05e63cc28b56c57d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_INPUT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba9b4b284d9cef8bc7ea112971c14584df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba64972e5527eb00cc4e60ce5b2f898193</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfbac3c19ea88d51e9ddc44a20cc13e4fb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba521cd576d678a5c22f21b4a7ec2ff02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_OVERFLOW</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba288fa96697726e05e63cc28b56c57d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_INPUT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba9b4b284d9cef8bc7ea112971c14584df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MaxFlowStatusClass.html</anchorfile>
      <anchor>aa3fbead787cfdfac0b9e7b217e06cbfba64972e5527eb00cc4e60ce5b2f898193</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MinCostFlow</name>
    <filename>classoperations__research_1_1MinCostFlow.html</filename>
    <base>GenericMinCostFlow&lt; StarGraph &gt;</base>
    <member kind="typedef">
      <type>StarGraph ::NodeIndex</type>
      <name>NodeIndex</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>aaf02e6d654d4be1a50507d9d40dd1e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::ArcIndex</type>
      <name>ArcIndex</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>ad66a0601a4f1c5f98079d333d5a465e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::OutgoingArcIterator</type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a3c6c7677fb80955e5c7386849596043e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StarGraph ::OutgoingOrOppositeIncomingArcIterator</type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a0aadf64af2dbb2115943c046e3d14622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; ArcIndex &gt;</type>
      <name>ArcIndexArray</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a81e1e8d405058ffdd6aa80978345fa83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a44ab1b2f3c5251267bce749661e4e6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a7ba4907297a99141ebd2bc890d5a591c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ab78b8e2734f0e777e79b8e5f93948101</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457af323941c683086f71ce1e7cae7a0a1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBALANCED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ad79843de8fcdec97ba2ce9b83d6cf3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a030d97dcea9960e3d1f127024b0e2168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_COST_RANGE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a41523b94852c3cb55c86ce0e291e3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a44ab1b2f3c5251267bce749661e4e6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a7ba4907297a99141ebd2bc890d5a591c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ab78b8e2734f0e777e79b8e5f93948101</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457af323941c683086f71ce1e7cae7a0a1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBALANCED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ad79843de8fcdec97ba2ce9b83d6cf3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a030d97dcea9960e3d1f127024b0e2168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_COST_RANGE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a41523b94852c3cb55c86ce0e291e3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinCostFlow</name>
      <anchorfile>classoperations__research_1_1MinCostFlow.html</anchorfile>
      <anchor>a53a9c622cd9bc61deece5070c7533519</anchor>
      <arglist>(const StarGraph *graph)</arglist>
    </member>
    <member kind="function">
      <type>const StarGraph *</type>
      <name>graph</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a8ea0e6e91a6965d8de090ef797bb4185</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>status</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>ace5a6df9ac9993c42cd091f6e9ebbd54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNodeSupply</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a7e4301ebf8c5f86143e390494a0a6f4f</anchor>
      <arglist>(NodeIndex node, FlowQuantity supply)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcUnitCost</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a0969b64c9993394fb1cc97a2404e12a4</anchor>
      <arglist>(ArcIndex arc, CostValue unit_cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcCapacity</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a35f31d23e3f300f2e36aa46b2e854c00</anchor>
      <arglist>(ArcIndex arc, FlowQuantity new_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcFlow</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a60875aa935bd9594db707bfd97eab98c</anchor>
      <arglist>(ArcIndex arc, FlowQuantity new_flow)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a17e2df29d767d03fc9fc42aee71bf5da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckFeasibility</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a01f13e85a3d12e356f26d80210a6755f</anchor>
      <arglist>(std::vector&lt; NodeIndex &gt; *const infeasible_supply_node, std::vector&lt; NodeIndex &gt; *const infeasible_demand_node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeFeasible</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a60da0a24c813a9ee39f96cc36f8dd9ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CostValue</type>
      <name>GetOptimalCost</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a37cb4245bf39c34116d5466d7922f565</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Flow</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>ac5a5362a674cfb2a7589bcd77c484c17</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Capacity</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a44c22a9d4609a54cfc7034de3e541ce7</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>CostValue</type>
      <name>UnitCost</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>ae70575b0b8bbc06301778b172752958b</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Supply</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a67cea170737362bd37bc8c8f8f024555</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>InitialSupply</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a15963b8d1126b858e249c58658934305</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>FeasibleSupply</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>afa58296d5399afd27f8bed235e18309d</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUseUpdatePrices</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a816e24f3a6af98c2b3ae1854f6fc0781</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCheckFeasibility</name>
      <anchorfile>classoperations__research_1_1GenericMinCostFlow.html</anchorfile>
      <anchor>a9fffb489dce981de3233b1702b801eb6</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MinCostFlowBase</name>
    <filename>classoperations__research_1_1MinCostFlowBase.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a44ab1b2f3c5251267bce749661e4e6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a7ba4907297a99141ebd2bc890d5a591c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ab78b8e2734f0e777e79b8e5f93948101</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457af323941c683086f71ce1e7cae7a0a1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBALANCED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ad79843de8fcdec97ba2ce9b83d6cf3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a030d97dcea9960e3d1f127024b0e2168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_COST_RANGE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a41523b94852c3cb55c86ce0e291e3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a44ab1b2f3c5251267bce749661e4e6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a7ba4907297a99141ebd2bc890d5a591c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ab78b8e2734f0e777e79b8e5f93948101</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457af323941c683086f71ce1e7cae7a0a1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBALANCED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ad79843de8fcdec97ba2ce9b83d6cf3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a030d97dcea9960e3d1f127024b0e2168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_COST_RANGE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a41523b94852c3cb55c86ce0e291e3719</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::Model</name>
    <filename>classoperations__research_1_1sat_1_1Model.html</filename>
    <member kind="function">
      <type></type>
      <name>Model</name>
      <anchorfile>classoperations__research_1_1sat_1_1Model.html</anchorfile>
      <anchor>a7d97534275c629f2917ed5a029e2e2c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1sat_1_1Model.html</anchorfile>
      <anchor>a059b9d223761f2b9cc82df4871ae36fa</anchor>
      <arglist>(std::function&lt; T(Model *)&gt; f)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Get</name>
      <anchorfile>classoperations__research_1_1sat_1_1Model.html</anchorfile>
      <anchor>a162bdd37a619fd04f9085005008951d9</anchor>
      <arglist>(std::function&lt; T(const Model &amp;)&gt; f) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>GetOrCreate</name>
      <anchorfile>classoperations__research_1_1sat_1_1Model.html</anchorfile>
      <anchor>af4eb422b7cfd963c58d65b18b4e47717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>Get</name>
      <anchorfile>classoperations__research_1_1sat_1_1Model.html</anchorfile>
      <anchor>a211cf867e9edd220616c0a8f6ba4b71d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>Mutable</name>
      <anchorfile>classoperations__research_1_1sat_1_1Model.html</anchorfile>
      <anchor>a6226de9875c58b81f461c123577d1689</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TakeOwnership</name>
      <anchorfile>classoperations__research_1_1sat_1_1Model.html</anchorfile>
      <anchor>a6411a892fd57781615c9edf80081026c</anchor>
      <arglist>(T *t)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>Create</name>
      <anchorfile>classoperations__research_1_1sat_1_1Model.html</anchorfile>
      <anchor>a08f2ee3dc9fa03be18a4c38304e068d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classoperations__research_1_1sat_1_1Model.html</anchorfile>
      <anchor>a78f476ca154e64d281ae07efd825a779</anchor>
      <arglist>(T *non_owned_class)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ModelCache</name>
    <filename>classoperations__research_1_1ModelCache.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>VoidConstraintType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID_FALSE_CONSTRAINT</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553eadb6a8e793cd360bdac363c2cc28eff3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID_TRUE_CONSTRAINT</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553ea82427a99c279490b35177f9a537031d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553eace922fdfd68186ce433188283e779260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarConstantConstraintType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a070768a658f3ff974ca3928ba74ead31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_GREATER_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a1325f8dfb1c122fad75157edf76fdd1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436af1e19fb208252121d68b5a06f1c8dde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_NON_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a2f285cddde6149d7f54bf5ceb42a1507</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a6a27c16438750d35626d77e0b2588308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarConstantConstantConstraintType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aedb48d5de6af18fc63065f7024356d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_BETWEEN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aedb48d5de6af18fc63065f7024356d45a8f03b508da54bc2d68f497c4c9d95426</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aedb48d5de6af18fc63065f7024356d45a6c0061e4b925cf5a3de722fc1b91be9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExprExprConstraintType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a3594f5372aa02134e8060cdd91c99673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_GREATER</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67aef4ab31c8207abf767182ef91663b340</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_GREATER_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a3721dc4e05093d3e1e802ddbdb101701</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_LESS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67ad76121125473074740a1e61a27aa6af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a914126bf00e791e3384e8d5813785346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_NON_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a6c623439986a9cea3e80432460c0c389</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a99f0e2e7864430b3fec6c13d53b637c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExprExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_OPPOSITE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a8cd95ada6797e62cf04511d4219385cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_ABS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a7782b9fca0d799fa5e4125772b224dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_SQUARE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a55c17e6da44e8b4a9b46e7a4b5087763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a5c9a61a1c3f6cf314eb068d200e81886</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExprExprExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_DIFFERENCE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182aac41f9bc0040a6eff73894bd82bda2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_PROD</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a6e303e884ec01ec1b84089fd41fd22a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_DIV</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182af8176ab1bd0b50ca74d9f53104e98893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182aa825ff62458a4531d5479efa4b7bfb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_MIN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a2aaf59f9f3047b1e04fc728ea5817ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_SUM</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182ae83817b1c367a57ff2cb0aa9e9ca6b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_LESS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182ad6df22a4d3d0aec5040f49af2caad49b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182ad0d903e75f8d2b7f0c292cd2c604360f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a55a9764f4b50b1ad6ace9dc27d277abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_NOT_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a7adfc7fcad074742a36a237a0e41d90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a5980bc1e0233fd4590501537964b1ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExprExprConstantExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a92950332708fd69026ae1e91bc3d86cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_CONSTANT_CONDITIONAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a92950332708fd69026ae1e91bc3d86cca59c45445a5385e9a060da304ed035c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a92950332708fd69026ae1e91bc3d86ccab04c37bc07fbd435e469b329ee258391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExprConstantExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_DIFFERENCE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97ac9aed89951381b121380fd1c0d67de2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_DIVIDE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a5b41d2961c84f20eacbdd8ad02a0c209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_PROD</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97afc2095200b81c7b5aacef633ed6b02b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a987387e656e1a5b9759eeeaa7cc6f5c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_MIN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a80274f3b6bedc48f6511ed67204d5830</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_SUM</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a132a2efb64d6fb7d9a526ccb38e604be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a8fba3e84e405547f4595961b967afa0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_NOT_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a5bd26b88fc899bf6708f408cef7ff1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_GREATER_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a8b36e6f0dee5edf71f580d7ce9a1b40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97abfbdd7755935b5fa09c1128522d71bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97af22eb71d40dde50c28f9115078ae76ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarConstantConstantExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6a17dda7bae65e0e00a13db20c40a80e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_SEMI_CONTINUOUS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6a17dda7bae65e0e00a13db20c40a80eadced5a0895a2cb90a4594fb36fe61849</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6a17dda7bae65e0e00a13db20c40a80eaa75358eb802072d41de32a9e809045ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarConstantArrayExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a477f02e25c227dc746912bc19d1156cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_ARRAY_ELEMENT</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a477f02e25c227dc746912bc19d1156cbad208c87e11c0e31e89b56d46820a3854</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_ARRAY_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a477f02e25c227dc746912bc19d1156cba07c534a9ebc42ee4cc89310f68a508dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarArrayConstantArrayExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a110dc5d522d143f90b07c31a23feb82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_ARRAY_SCAL_PROD</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a110dc5d522d143f90b07c31a23feb82ea8badb2c8850e8b40e03e6bb6603be49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_ARRAY_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a110dc5d522d143f90b07c31a23feb82ea400c369e52a35c4f713b334636fdf8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarArrayExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185da72be218b7d632156bc7d6925b98f2824</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_MIN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185da3e0c4c80f4eeb88925a067061ec8fb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_SUM</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185da670852bc71348c6af0d026914ad8f925</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185daf8fe9d386f02fb2d2f9137c6ab4d983c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarArrayConstantExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0ef8d6a215e52ddcdde251a0d640d57f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_INDEX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0ef8d6a215e52ddcdde251a0d640d57fa5d526900675fe988dd7b32b4adc8655b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0ef8d6a215e52ddcdde251a0d640d57fa9fbb20e9fd7918d2e660f014abe6521c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID_FALSE_CONSTRAINT</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553eadb6a8e793cd360bdac363c2cc28eff3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID_TRUE_CONSTRAINT</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553ea82427a99c279490b35177f9a537031d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553eace922fdfd68186ce433188283e779260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a070768a658f3ff974ca3928ba74ead31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_GREATER_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a1325f8dfb1c122fad75157edf76fdd1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436af1e19fb208252121d68b5a06f1c8dde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_NON_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a2f285cddde6149d7f54bf5ceb42a1507</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a6a27c16438750d35626d77e0b2588308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_BETWEEN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aedb48d5de6af18fc63065f7024356d45a8f03b508da54bc2d68f497c4c9d95426</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aedb48d5de6af18fc63065f7024356d45a6c0061e4b925cf5a3de722fc1b91be9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a3594f5372aa02134e8060cdd91c99673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_GREATER</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67aef4ab31c8207abf767182ef91663b340</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_GREATER_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a3721dc4e05093d3e1e802ddbdb101701</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_LESS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67ad76121125473074740a1e61a27aa6af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a914126bf00e791e3384e8d5813785346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_NON_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a6c623439986a9cea3e80432460c0c389</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a99f0e2e7864430b3fec6c13d53b637c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_OPPOSITE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a8cd95ada6797e62cf04511d4219385cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_ABS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a7782b9fca0d799fa5e4125772b224dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_SQUARE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a55c17e6da44e8b4a9b46e7a4b5087763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a5c9a61a1c3f6cf314eb068d200e81886</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_DIFFERENCE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182aac41f9bc0040a6eff73894bd82bda2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_PROD</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a6e303e884ec01ec1b84089fd41fd22a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_DIV</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182af8176ab1bd0b50ca74d9f53104e98893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182aa825ff62458a4531d5479efa4b7bfb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_MIN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a2aaf59f9f3047b1e04fc728ea5817ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_SUM</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182ae83817b1c367a57ff2cb0aa9e9ca6b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_LESS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182ad6df22a4d3d0aec5040f49af2caad49b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182ad0d903e75f8d2b7f0c292cd2c604360f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a55a9764f4b50b1ad6ace9dc27d277abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_NOT_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a7adfc7fcad074742a36a237a0e41d90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a5980bc1e0233fd4590501537964b1ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_CONSTANT_CONDITIONAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a92950332708fd69026ae1e91bc3d86cca59c45445a5385e9a060da304ed035c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a92950332708fd69026ae1e91bc3d86ccab04c37bc07fbd435e469b329ee258391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_DIFFERENCE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97ac9aed89951381b121380fd1c0d67de2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_DIVIDE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a5b41d2961c84f20eacbdd8ad02a0c209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_PROD</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97afc2095200b81c7b5aacef633ed6b02b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a987387e656e1a5b9759eeeaa7cc6f5c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_MIN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a80274f3b6bedc48f6511ed67204d5830</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_SUM</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a132a2efb64d6fb7d9a526ccb38e604be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a8fba3e84e405547f4595961b967afa0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_NOT_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a5bd26b88fc899bf6708f408cef7ff1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_GREATER_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a8b36e6f0dee5edf71f580d7ce9a1b40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97abfbdd7755935b5fa09c1128522d71bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97af22eb71d40dde50c28f9115078ae76ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_SEMI_CONTINUOUS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6a17dda7bae65e0e00a13db20c40a80eadced5a0895a2cb90a4594fb36fe61849</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6a17dda7bae65e0e00a13db20c40a80eaa75358eb802072d41de32a9e809045ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_ARRAY_ELEMENT</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a477f02e25c227dc746912bc19d1156cbad208c87e11c0e31e89b56d46820a3854</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_ARRAY_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a477f02e25c227dc746912bc19d1156cba07c534a9ebc42ee4cc89310f68a508dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_ARRAY_SCAL_PROD</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a110dc5d522d143f90b07c31a23feb82ea8badb2c8850e8b40e03e6bb6603be49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_ARRAY_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a110dc5d522d143f90b07c31a23feb82ea400c369e52a35c4f713b334636fdf8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185da72be218b7d632156bc7d6925b98f2824</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_MIN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185da3e0c4c80f4eeb88925a067061ec8fb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_SUM</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185da670852bc71348c6af0d026914ad8f925</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185daf8fe9d386f02fb2d2f9137c6ab4d983c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_INDEX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0ef8d6a215e52ddcdde251a0d640d57fa5d526900675fe988dd7b32b4adc8655b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0ef8d6a215e52ddcdde251a0d640d57fa9fbb20e9fd7918d2e660f014abe6521c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelCache</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a4399a6572d2936dc302589591be6dd9f</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ModelCache</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>afa4464928a35f8184bab2b253159d213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ad5151158c58b19d05ddcaba5cfbf109c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Constraint *</type>
      <name>FindVoidConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a2916776e5f69abac8f9637c3532d25f3</anchor>
      <arglist>(VoidConstraintType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVoidConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ad00d773f68ef4113560d76233ddbdb67</anchor>
      <arglist>(Constraint *const ct, VoidConstraintType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Constraint *</type>
      <name>FindVarConstantConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a47726b101345465f4a5909bee5bbda5d</anchor>
      <arglist>(IntVar *const var, int64 value, VarConstantConstraintType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarConstantConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6add626f74107d891672762f2813da2a</anchor>
      <arglist>(Constraint *const ct, IntVar *const var, int64 value, VarConstantConstraintType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Constraint *</type>
      <name>FindVarConstantConstantConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a59c55441490d9bf17651f638c7b00e94</anchor>
      <arglist>(IntVar *const var, int64 value1, int64 value2, VarConstantConstantConstraintType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarConstantConstantConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>abe73e77151aa268e2cc89d0ca2ba35c8</anchor>
      <arglist>(Constraint *const ct, IntVar *const var, int64 value1, int64 value2, VarConstantConstantConstraintType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Constraint *</type>
      <name>FindExprExprConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a2f7f8ae4cb4975e09629cc11d6b7ee8b</anchor>
      <arglist>(IntExpr *const expr1, IntExpr *const expr2, ExprExprConstraintType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertExprExprConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a234f506aa8a7f48655fb86599e34b8cc</anchor>
      <arglist>(Constraint *const ct, IntExpr *const expr1, IntExpr *const expr2, ExprExprConstraintType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindExprExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aff495bdda6532c4fade10ab7e49dd758</anchor>
      <arglist>(IntExpr *const expr, ExprExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertExprExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a351824b859e343a4a65848aebab95509</anchor>
      <arglist>(IntExpr *const expression, IntExpr *const expr, ExprExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindExprConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aeae05bb37ae8f31b2dbc9f16ddf2f365</anchor>
      <arglist>(IntExpr *const expr, int64 value, ExprConstantExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertExprConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a5f947ec356f999e06a3c33de73a16569</anchor>
      <arglist>(IntExpr *const expression, IntExpr *const var, int64 value, ExprConstantExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindExprExprExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a9d7f94b31195c0266ec96f8b4b846445</anchor>
      <arglist>(IntExpr *const var1, IntExpr *const var2, ExprExprExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertExprExprExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a04f7759da06c20ac161dfa2a4cc58499</anchor>
      <arglist>(IntExpr *const expression, IntExpr *const var1, IntExpr *const var2, ExprExprExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindExprExprConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ad75cf00bd67171ae8098c0fd1ed9757e</anchor>
      <arglist>(IntExpr *const var1, IntExpr *const var2, int64 constant, ExprExprConstantExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertExprExprConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ad5fd4370ec51f7bf4408c5ffbd38ea9a</anchor>
      <arglist>(IntExpr *const expression, IntExpr *const var1, IntExpr *const var2, int64 constant, ExprExprConstantExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindVarConstantConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a4b4250955e796f1941a60543a2ba346b</anchor>
      <arglist>(IntVar *const var, int64 value1, int64 value2, VarConstantConstantExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarConstantConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6cea309d14ae33d647d738770da53ebe</anchor>
      <arglist>(IntExpr *const expression, IntVar *const var, int64 value1, int64 value2, VarConstantConstantExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindVarConstantArrayExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ae4d8ca405c3b0ef30f742e24fb8bfcf6</anchor>
      <arglist>(IntVar *const var, const std::vector&lt; int64 &gt; &amp;values, VarConstantArrayExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarConstantArrayExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a72570f0cce0d75f5f4fe636347dc6f87</anchor>
      <arglist>(IntExpr *const expression, IntVar *const var, const std::vector&lt; int64 &gt; &amp;values, VarConstantArrayExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindVarArrayExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a716534b093f8c3ba99a9a4b0caca04ee</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, VarArrayExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarArrayExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6a55fc37432c0ebc0760619b072aecd5</anchor>
      <arglist>(IntExpr *const expression, const std::vector&lt; IntVar * &gt; &amp;vars, VarArrayExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindVarArrayConstantArrayExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a19fda3a7f1f61e44f72103c5263611a4</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;values, VarArrayConstantArrayExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarArrayConstantArrayExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a41a3633aed27275865ad997b3261eac8</anchor>
      <arglist>(IntExpr *const expression, const std::vector&lt; IntVar * &gt; &amp;var, const std::vector&lt; int64 &gt; &amp;values, VarArrayConstantArrayExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindVarArrayConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a175288f7b7884ce27004f3281f8dd061</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 value, VarArrayConstantExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarArrayConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a27dc76658051540fec068cfa7528da91</anchor>
      <arglist>(IntExpr *const expression, const std::vector&lt; IntVar * &gt; &amp;var, int64 value, VarArrayConstantExpressionType type)=0</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ad1bf7cb63fc1defa06c7095dbf9969e8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ModelParser</name>
    <filename>classoperations__research_1_1ModelParser.html</filename>
    <base>operations_research::ModelVisitor</base>
    <member kind="function">
      <type></type>
      <name>ModelParser</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a7007976d224900371bc188833f97dd98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModelParser</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a6d3686f475dc7b8748c5a911a4bbf7de</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginVisitModel</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a7fd9f1b45ac2f37a2855f1b7b57fc21d</anchor>
      <arglist>(const std::string &amp;solver_name) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EndVisitModel</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>aefe46d6637515c507d0228c03ab57cb8</anchor>
      <arglist>(const std::string &amp;solver_name) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginVisitConstraint</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a8669aa0e9855472f3dfc3aa55a560829</anchor>
      <arglist>(const std::string &amp;type_name, const Constraint *const constraint) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EndVisitConstraint</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>ab0cf1f07e1a232bd3c904028ba7e5fa8</anchor>
      <arglist>(const std::string &amp;type_name, const Constraint *const constraint) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginVisitIntegerExpression</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a2a92cdf4c38b9235218693f5400f25d6</anchor>
      <arglist>(const std::string &amp;type_name, const IntExpr *const expr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EndVisitIntegerExpression</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>ac4428747c64cc45d6492c7eecd7a0d28</anchor>
      <arglist>(const std::string &amp;type_name, const IntExpr *const expr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerVariable</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a9b3cadca71680a3c196e19549836bc5e</anchor>
      <arglist>(const IntVar *const variable, IntExpr *const delegate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerVariable</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a78fcd3e3c37175f7ef047d612c89fbd2</anchor>
      <arglist>(const IntVar *const variable, const std::string &amp;operation, int64 value, IntVar *const delegate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntervalVariable</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>ab500160d9ab98a7e20b9bc2c24629f43</anchor>
      <arglist>(const IntervalVar *const variable, const std::string &amp;operation, int64 value, IntervalVar *const delegate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitSequenceVariable</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a5c7081cb5b4fa649ab9a3b4ae8d9d073</anchor>
      <arglist>(const SequenceVar *const variable) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>acdfb63072d9e4b6af141207ee9c60be6</anchor>
      <arglist>(const std::string &amp;arg_name, int64 value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>af0ff42dac9badb43169d1739814ad433</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; int64 &gt; &amp;values) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerMatrixArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>acb4cbe466a8816b4f411bbaaf79bb643</anchor>
      <arglist>(const std::string &amp;arg_name, const IntTupleSet &amp;values) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerExpressionArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>af9505c6728dc3ba558313b1b03b27c99</anchor>
      <arglist>(const std::string &amp;arg_name, IntExpr *const argument) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerVariableArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a6f5236dbadb59c34fc95e823d0ee3906</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; IntVar * &gt; &amp;arguments) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntervalArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>af4c54b533b82f291475e6806f3d81e06</anchor>
      <arglist>(const std::string &amp;arg_name, IntervalVar *const argument) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntervalArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a0c5a72a96d244ab227ebc164f1a94322</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; IntervalVar * &gt; &amp;arguments) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitSequenceArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a71420b48f234f195aa73823402883ba4</anchor>
      <arglist>(const std::string &amp;arg_name, SequenceVar *const argument) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitSequenceArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a668b09caeb98d6e0bceb1793b655abf4</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; SequenceVar * &gt; &amp;arguments) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginVisitExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a0a054848f96f9043dac24dccecb2a47e</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndVisitExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a054bb0ce517052aa4d701536cce06748</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerVariableEvaluatorArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4b851543c86a8505832575e0502a3a43</anchor>
      <arglist>(const std::string &amp;arg_name, const Solver::Int64ToIntVar &amp;arguments)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitInt64ToBoolExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a526f8541539c9560e826469dc13ddfaf</anchor>
      <arglist>(Solver::IndexFilter1 filter, int64 index_min, int64 index_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitInt64ToInt64Extension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2033f7591e7809c9f3abbbe618a484c7</anchor>
      <arglist>(const Solver::IndexEvaluator1 &amp;eval, int64 index_min, int64 index_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitInt64ToInt64AsArray</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2ae5d743b7bc3e49c8b8dbc4f105a4cd</anchor>
      <arglist>(const Solver::IndexEvaluator1 &amp;eval, const std::string &amp;arg_name, int64 index_max)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAbs</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a124e348117110332cb3e5d460f455e4a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAbsEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a253eae82dd0e365d9c49f7e31d0f5f7a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAllDifferent</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac050b2f234e7b4deaa197572c1b4cc69</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAllowedAssignments</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af3f5c65aeb337203e6b0bf80ce2dd09c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAtMost</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a18f81802469559a0e7625b4061b1035b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIndexOf</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5dfe92f44918889831f51375e91ffa01</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kBetween</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a19bcba10f75045499952148742a3cf6f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kConditionalExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7353be5c838dbb88fda3b98d378269c3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCircuit</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5e627ed6e6400a344f3191a717b3efe0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kConvexPiecewise</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>afacadb82186afef92a407c4e39ca0d64</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a09fdd4ae9e13607b278e9d472b673c1e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCover</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a096d24d789eb823876f2288bf15f282e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCumulative</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a68cd7b641db22e66b78e7ff0c059e951</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDeviation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a956f49ec11b9f98f42ecbfb2c2af1224</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDifference</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2e3fd9d97bd872ae2dd5f1f9f7e45014</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDisjunctive</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad8e6fc060fea392c9ae52b3102b19bb5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDistribute</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae6c54c4443407469494ea7b5eaa7ebfc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDivide</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a68d0ff1edb8a26a4e9ecb7794313298c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDurationExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1519f3e29373c86a62a2e946cd699c49</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kElement</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1905d71fcbbce31fb70a5457049f1e5c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kElementEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a23c2fd1ac75c76dff862c8e91572df76</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a0abcf853d7688095b9280f0797bbb3d7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEquality</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa26e4339dae784c7f42929a0a7221b9e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFalseConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adb508b94e5443a1b074937377dec783e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kGlobalCardinality</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adbf679024d2686e8f5c750d13b8b58ad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kGreater</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad714215e3927f1e0f74381f51af18968</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4743a337c35039947c1058086fddf5fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntegerVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2455aa3a43fa34beadef296168d5c20e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalBinaryRelation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a740a8d0fd961f1d6999e8fff910b1cbb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalDisjunction</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7cc767e828c3681fc2ff98ba83c6919c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalUnaryRelation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1d424057a9bb254b68f4462b5ca2affe</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a42aa572d3afd9564a4b642872b672bcf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInversePermutation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4e3a54c23e49210c0bd3e0f4d99d19c6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsBetween</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abc81aee53f65168867b3fcff003fd584</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsDifferent</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5e302cc44d8ba521da50c0a320a83608</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a80075457db431f10ac45ec9d700fa763</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsGreater</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2b490050360819abe7bb697033db6561</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>accdea325f60eb495ff2ea282aa45376c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsLess</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2a7061ff47d238c40664f5501b3878b8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8a16cc4af57936ccb4aff6c3a29adcfc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsMember</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8abd1a6ee2a78ee78c5ee55faaa3d4c6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLess</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aaa8c4a089360326fa1ca2a31351f52ce</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a598796842a46e4c0e2a6d6f55ad7f999</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLexLess</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1137b3c7b1a1322229ffb6fd6b1ea24c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLinkExprVar</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a26698013ea5b05f99adfa8940c3e9652</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMapDomain</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>afeade782088a114d35356067be755a3d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMax</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4f8fbcca399411ad28b7d2130072ee77</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMaxEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9812ac2275793bcdd987daae9e0551ad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMember</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8ac9667afec105d8f4ca359160d7245c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMin</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a51c8f21edb373fbfd068b80a6786dd27</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMinEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4808668be13f3c213c5494417b5a1b3f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kModulo</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a915de6b5bab0757bd033699387a486e2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNoCycle</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a528ef45e21c77f33dc2670278f7a4615</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNonEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1db3e601f221c9db91c5b47dc9028fd5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNotBetween</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>afbe02152a0dfa9e9b5bdc60024486bec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNotMember</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5cedf602d46e984da78cb8862d9e9737</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNullIntersect</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9d0e42e2529aa2689695532c52b3c588</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kOpposite</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7b5480d7ce4e02a3d924c1c07544eb7d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPack</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adf81a3dd11195fbf357fe5c9f0f9dc2c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPathCumul</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1724ad5bbac74b4c99cfc18968debcba</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDelayedPathCumul</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa820a5c3a3f05b8a3873b752429e559a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPerformedExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae7ca6eb46e7d8d939a22aec0ee528234</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPower</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7af7d40f7324b60dae150e11aaef3b6b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kProduct</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6008fca0fdf3f753369e587d933fab59</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProd</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aad1539aca7b4ada550fd75077f060b8d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProdEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a81bf76a202ed41b7bdcb695fde2d5536</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProdGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a231e2a22e5b9902b3d659f5cc406eb13</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProdLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab9a4c7d3a86c8bf0d11448239aeb09ca</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSemiContinuous</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abf9e5fc7b45242477e71e8e69e13129a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSequenceVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad177c9835c56cfb2472c1834ce468c12</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSortingConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aab3f00f122b9cf7651d696d78fe36543</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSquare</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7d3901dd55a861cbe149a179469cbb46</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a56a60af43da7618e524355e6b7dcfa18</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSum</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6ea132b8530a5b9146a4b0ff6b478163</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab5cacd4ab0f8a7b5bbedc3eb757281fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af68303d9fbd37f5bca241917e84d1b85</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a48fe0b1746eada44912edfc24cb343ff</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTrace</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad13e04b607579ab1edded8f7bc558da4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTransition</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a3cd17736ebef01ece7f1c8acc970819b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTrueConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8cb920443f8846ec2aa7599e61864530</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVarBoundWatcher</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a56f29d4d46c50ac1dc77475c5718175b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVarValueWatcher</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1066ef518e2ca9b1c2608a86c7ea32eb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountAssignedItemsExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af1eda61c28ecb4c870c47793d708e812</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountUsedBinsExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5230c251f02f05d4f641e7f159512ae7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInt64ToBoolExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2ea28ee541988d173f0cb43eb8eed02a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInt64ToInt64Extension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6f83fe983be47faffe412c1d3ba85877</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kObjectiveExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7f5ddcad7db239c13bab38ca5f3614bc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSearchLimitExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4e8bb409ff7303de27d92e7452ff4745</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kUsageEqualVariableExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a866bf5f6b036757bcdd337ddf5c993d0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kUsageLessConstantExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adc38e544150243bf19864bfe3119d521</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVariableGroupExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a75c6576ece0c576b350705166f6268ae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVariableUsageLessConstantExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af1f609953aff475abe227d57735209ce</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kWeightedSumOfAssignedEqualVariableExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a65d5353da6e7922032fa3dbd6e4d7ba8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kActiveArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a3370251672e86a31b98bc2b4f5e483e4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAssumePathsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a584222a6b5e247a6982b99c2b4986536</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kBranchesLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1906ebb0da0bb2cb8d134e280ae5d1aa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCapacityArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac2f6eb8ce25d5e485ef02c13490a0465</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCardsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9bdd4a47b226bebc9f27469b567e0026</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCoefficientsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad7801044121f6bd969c646fa17721eef</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a74b062753c96d5652f1f0fe4faa2d3a9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCumulativeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a16d65c01260397f78e7df69dc3c2b867</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCumulsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a16f77fba967e59bc3327b4dc2a4460f4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDemandsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a36d90b47d30362df401823c21106132a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDurationMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a205a1ceec0a84172f184a0e5c09439ee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDurationMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a707803108150b1bd31cb496ac5ce42f2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEarlyCostArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8384251179632a80fdb736377043e829</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEarlyDateArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aad1113636f0ceefbf79a1c1ed0962266</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7d079adf02e0acbbe26691e8c2e2d26f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9da8bd50488b7bfaf29dafeac488c24e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abe82078ee45c0cb3976f9a648e7e8389</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kExpressionArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7e316e2c0042d52af11be86b82287718</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFailuresLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a08c349b1aa12d68304581cfea2ad1fae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFinalStatesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a62948d17defdef3995eedcf87cefe92b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFixedChargeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a59d3fe79f6b850edef2a003af69c8c1c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIndex2Argument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af05577d9a8dceaf2f97e3012ce426225</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIndexArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5d5ce8cfe4c9243c9b78d8492668b800</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInitialState</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2878986c75516e14680711d3c1e873af</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2ab1cbff58c24dc5017097b6a0a838e7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aed73378373382879db4cc4f42db38784</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLateCostArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abb90fd1d87eea297afe95bca09e9235e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLateDateArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a0f276220863e52aa5b4310e09bca80f0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLeftArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8bef2058a71de8dc9d979cdfee244613</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad0c35762f9cd7d79b51e6d9ca568f6ec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMaximizeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>acb394e7169662d9ca957a0affde6220b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a36ed7ed8253a439625cec250d3adc514</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kModuloArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aaa86204c8336f1b6dc14ae954a361b81</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNextsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a76e55486b1fb81a4860bd6a2321648d7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kOptionalArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab1f538f44b7fff25ae4761c06301cc9a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPartialArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a26ba71cb46871a942d7da294eb72df85</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPositionXArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a698bcc5222b25fdb9b3351b14fa2c94b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPositionYArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6781e6ac22e67a344416110b35252493</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRangeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a290a9b9301de6b92f2e0a1f189cf1cd7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRelationArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af255bb789297ed05a80419f46621fcf7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRightArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1c080372fc528d4951e2411c76696d3f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSequenceArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac9845229df3d0b0afc7d58f5a37432e8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSequencesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a58a13c5ddb389b3d3ad063013ce18191</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSizeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a60d008087cac0b0ed36381ffbe5bdbeb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSizeXArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae649b9555f2b5c6fdad39d5b3adbf1a7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSizeYArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac91fa31e47cb779cb431dea57017983f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSmartTimeCheckArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae4f29693e71a4fbed4ad28b041b5c18a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSolutionLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aae7b2191ec7433b273e1f825213d71a6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a079c0703e63776a4ad3e53864b486222</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7563a86f8f366a85c8f48431c9f982ee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab793c03904c4ab40135010471187577e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStepArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9b0ec9bf06a8b303a2402cd55242236d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTargetArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1606c56bdbb336ea2fe5b65ba4162d07</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTimeLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a916b0c8011c6d73e0da63c0de5811735</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTransitsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad5d3ccac1c12901e24a9861010c139a9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTuplesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a77c667f3158b3cb5eb2a06ff4292e00d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kValueArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af9bcfa03b17bfc77afa707f3775ed1fc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kValuesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae3e8e37ef2baa38aa0759ce4c8c34924</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVariableArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af63d71fcac04c98d5e774bf36968b8c7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVarsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a85f7ae79e747c46b1bb248990403ffd2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEvaluatorArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac5753868fd49c8d832df129de33814f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMirrorOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af598e870cb075900bb601fdbbdca4825</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRelaxedMaxOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a92a4c3f41d240eae8b123abb2b0360b2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRelaxedMinOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8f3e3b37dc7487ff51107da6c9d36776</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a326a1e8421f974dc3f48401639313298</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDifferenceOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aee6505d2effca79a716ca26c203f97ae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kProductOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a444350f74c54195a017c663fe2b2ca44</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartSyncOnStartOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a07ac46ef4c52623df078eb57daf07070</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartSyncOnEndOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad2532beeeeaf7018cab5f3946e604af3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTraceOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a962d1e2e70b0085fe22e4dc424b27c97</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushArgumentHolder</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a8ff6f1e1b93fbfe2455a49bcfaddf2f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PopArgumentHolder</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>ab9d871dfdb5820f82b801ea494af2310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArgumentHolder *</type>
      <name>Top</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a3d802b3943f4ecbbfabb880db3089cc8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ModelVisitor</name>
    <filename>classoperations__research_1_1ModelVisitor.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>~ModelVisitor</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a651208f79a13e7e47feef0b4d95a8168</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginVisitModel</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a71cef740cd200067eadf66d0a9276d69</anchor>
      <arglist>(const std::string &amp;solver_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndVisitModel</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7640173386e395605d573c94aa5110bc</anchor>
      <arglist>(const std::string &amp;solver_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginVisitConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa9ee3a1781e9969518c2f838f16c1552</anchor>
      <arglist>(const std::string &amp;type_name, const Constraint *const constraint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndVisitConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4e80c7cc39381ccbf5457c83dc75cbb5</anchor>
      <arglist>(const std::string &amp;type_name, const Constraint *const constraint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginVisitExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a0a054848f96f9043dac24dccecb2a47e</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndVisitExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a054bb0ce517052aa4d701536cce06748</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginVisitIntegerExpression</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aac9032d088ad5a8555155a9fbc03d886</anchor>
      <arglist>(const std::string &amp;type_name, const IntExpr *const expr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndVisitIntegerExpression</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aaeb891b509e11395b17691fc257f8430</anchor>
      <arglist>(const std::string &amp;type_name, const IntExpr *const expr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad19c386bb59eb247ae45f5a55c148c98</anchor>
      <arglist>(const IntVar *const variable, IntExpr *const delegate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a92614f304abec2c34601bfff6534db70</anchor>
      <arglist>(const IntVar *const variable, const std::string &amp;operation, int64 value, IntVar *const delegate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntervalVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a008474e94c0f17a270b7e0830758605e</anchor>
      <arglist>(const IntervalVar *const variable, const std::string &amp;operation, int64 value, IntervalVar *const delegate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSequenceVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa873231c27c0bfa5e9689d3e7d74521d</anchor>
      <arglist>(const SequenceVar *const variable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad60683aaee8e4a19043476a2bd899d50</anchor>
      <arglist>(const std::string &amp;arg_name, int64 value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>acdde99f804b915fc54e00c182f77d84c</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerMatrixArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a10322a6adaa9c514e927c50ebbf15f4a</anchor>
      <arglist>(const std::string &amp;arg_name, const IntTupleSet &amp;tuples)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerExpressionArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa3aadae79e53e0d0237126ab4e62b6bd</anchor>
      <arglist>(const std::string &amp;arg_name, IntExpr *const argument)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerVariableArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa32f0bc3ea5eea881da14daadaa817fc</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; IntVar * &gt; &amp;arguments)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntervalArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa136071473c98731ced9ccf73e9b1f9d</anchor>
      <arglist>(const std::string &amp;arg_name, IntervalVar *const argument)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntervalArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2b17a924fed9dff78cbd365ccdb5c597</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; IntervalVar * &gt; &amp;arguments)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSequenceArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a95a765a9db2856a8f35b0f3b122a4b2c</anchor>
      <arglist>(const std::string &amp;arg_name, SequenceVar *const argument)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSequenceArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2d319e77b0403d9ad50fc0aacf8b3d71</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; SequenceVar * &gt; &amp;arguments)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerVariableEvaluatorArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4b851543c86a8505832575e0502a3a43</anchor>
      <arglist>(const std::string &amp;arg_name, const Solver::Int64ToIntVar &amp;arguments)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitInt64ToBoolExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a526f8541539c9560e826469dc13ddfaf</anchor>
      <arglist>(Solver::IndexFilter1 filter, int64 index_min, int64 index_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitInt64ToInt64Extension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2033f7591e7809c9f3abbbe618a484c7</anchor>
      <arglist>(const Solver::IndexEvaluator1 &amp;eval, int64 index_min, int64 index_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitInt64ToInt64AsArray</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2ae5d743b7bc3e49c8b8dbc4f105a4cd</anchor>
      <arglist>(const Solver::IndexEvaluator1 &amp;eval, const std::string &amp;arg_name, int64 index_max)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAbs</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a124e348117110332cb3e5d460f455e4a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAbsEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a253eae82dd0e365d9c49f7e31d0f5f7a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAllDifferent</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac050b2f234e7b4deaa197572c1b4cc69</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAllowedAssignments</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af3f5c65aeb337203e6b0bf80ce2dd09c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAtMost</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a18f81802469559a0e7625b4061b1035b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIndexOf</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5dfe92f44918889831f51375e91ffa01</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kBetween</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a19bcba10f75045499952148742a3cf6f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kConditionalExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7353be5c838dbb88fda3b98d378269c3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCircuit</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5e627ed6e6400a344f3191a717b3efe0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kConvexPiecewise</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>afacadb82186afef92a407c4e39ca0d64</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a09fdd4ae9e13607b278e9d472b673c1e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCover</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a096d24d789eb823876f2288bf15f282e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCumulative</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a68cd7b641db22e66b78e7ff0c059e951</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDeviation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a956f49ec11b9f98f42ecbfb2c2af1224</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDifference</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2e3fd9d97bd872ae2dd5f1f9f7e45014</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDisjunctive</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad8e6fc060fea392c9ae52b3102b19bb5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDistribute</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae6c54c4443407469494ea7b5eaa7ebfc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDivide</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a68d0ff1edb8a26a4e9ecb7794313298c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDurationExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1519f3e29373c86a62a2e946cd699c49</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kElement</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1905d71fcbbce31fb70a5457049f1e5c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kElementEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a23c2fd1ac75c76dff862c8e91572df76</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a0abcf853d7688095b9280f0797bbb3d7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEquality</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa26e4339dae784c7f42929a0a7221b9e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFalseConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adb508b94e5443a1b074937377dec783e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kGlobalCardinality</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adbf679024d2686e8f5c750d13b8b58ad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kGreater</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad714215e3927f1e0f74381f51af18968</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4743a337c35039947c1058086fddf5fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntegerVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2455aa3a43fa34beadef296168d5c20e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalBinaryRelation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a740a8d0fd961f1d6999e8fff910b1cbb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalDisjunction</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7cc767e828c3681fc2ff98ba83c6919c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalUnaryRelation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1d424057a9bb254b68f4462b5ca2affe</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a42aa572d3afd9564a4b642872b672bcf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInversePermutation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4e3a54c23e49210c0bd3e0f4d99d19c6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsBetween</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abc81aee53f65168867b3fcff003fd584</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsDifferent</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5e302cc44d8ba521da50c0a320a83608</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a80075457db431f10ac45ec9d700fa763</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsGreater</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2b490050360819abe7bb697033db6561</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>accdea325f60eb495ff2ea282aa45376c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsLess</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2a7061ff47d238c40664f5501b3878b8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8a16cc4af57936ccb4aff6c3a29adcfc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsMember</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8abd1a6ee2a78ee78c5ee55faaa3d4c6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLess</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aaa8c4a089360326fa1ca2a31351f52ce</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a598796842a46e4c0e2a6d6f55ad7f999</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLexLess</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1137b3c7b1a1322229ffb6fd6b1ea24c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLinkExprVar</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a26698013ea5b05f99adfa8940c3e9652</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMapDomain</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>afeade782088a114d35356067be755a3d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMax</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4f8fbcca399411ad28b7d2130072ee77</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMaxEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9812ac2275793bcdd987daae9e0551ad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMember</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8ac9667afec105d8f4ca359160d7245c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMin</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a51c8f21edb373fbfd068b80a6786dd27</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMinEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4808668be13f3c213c5494417b5a1b3f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kModulo</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a915de6b5bab0757bd033699387a486e2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNoCycle</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a528ef45e21c77f33dc2670278f7a4615</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNonEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1db3e601f221c9db91c5b47dc9028fd5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNotBetween</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>afbe02152a0dfa9e9b5bdc60024486bec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNotMember</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5cedf602d46e984da78cb8862d9e9737</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNullIntersect</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9d0e42e2529aa2689695532c52b3c588</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kOpposite</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7b5480d7ce4e02a3d924c1c07544eb7d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPack</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adf81a3dd11195fbf357fe5c9f0f9dc2c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPathCumul</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1724ad5bbac74b4c99cfc18968debcba</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDelayedPathCumul</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa820a5c3a3f05b8a3873b752429e559a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPerformedExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae7ca6eb46e7d8d939a22aec0ee528234</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPower</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7af7d40f7324b60dae150e11aaef3b6b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kProduct</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6008fca0fdf3f753369e587d933fab59</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProd</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aad1539aca7b4ada550fd75077f060b8d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProdEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a81bf76a202ed41b7bdcb695fde2d5536</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProdGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a231e2a22e5b9902b3d659f5cc406eb13</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProdLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab9a4c7d3a86c8bf0d11448239aeb09ca</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSemiContinuous</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abf9e5fc7b45242477e71e8e69e13129a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSequenceVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad177c9835c56cfb2472c1834ce468c12</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSortingConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aab3f00f122b9cf7651d696d78fe36543</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSquare</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7d3901dd55a861cbe149a179469cbb46</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a56a60af43da7618e524355e6b7dcfa18</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSum</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6ea132b8530a5b9146a4b0ff6b478163</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab5cacd4ab0f8a7b5bbedc3eb757281fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af68303d9fbd37f5bca241917e84d1b85</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a48fe0b1746eada44912edfc24cb343ff</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTrace</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad13e04b607579ab1edded8f7bc558da4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTransition</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a3cd17736ebef01ece7f1c8acc970819b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTrueConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8cb920443f8846ec2aa7599e61864530</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVarBoundWatcher</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a56f29d4d46c50ac1dc77475c5718175b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVarValueWatcher</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1066ef518e2ca9b1c2608a86c7ea32eb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountAssignedItemsExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af1eda61c28ecb4c870c47793d708e812</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountUsedBinsExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5230c251f02f05d4f641e7f159512ae7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInt64ToBoolExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2ea28ee541988d173f0cb43eb8eed02a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInt64ToInt64Extension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6f83fe983be47faffe412c1d3ba85877</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kObjectiveExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7f5ddcad7db239c13bab38ca5f3614bc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSearchLimitExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4e8bb409ff7303de27d92e7452ff4745</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kUsageEqualVariableExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a866bf5f6b036757bcdd337ddf5c993d0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kUsageLessConstantExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adc38e544150243bf19864bfe3119d521</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVariableGroupExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a75c6576ece0c576b350705166f6268ae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVariableUsageLessConstantExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af1f609953aff475abe227d57735209ce</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kWeightedSumOfAssignedEqualVariableExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a65d5353da6e7922032fa3dbd6e4d7ba8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kActiveArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a3370251672e86a31b98bc2b4f5e483e4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAssumePathsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a584222a6b5e247a6982b99c2b4986536</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kBranchesLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1906ebb0da0bb2cb8d134e280ae5d1aa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCapacityArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac2f6eb8ce25d5e485ef02c13490a0465</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCardsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9bdd4a47b226bebc9f27469b567e0026</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCoefficientsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad7801044121f6bd969c646fa17721eef</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a74b062753c96d5652f1f0fe4faa2d3a9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCumulativeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a16d65c01260397f78e7df69dc3c2b867</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCumulsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a16f77fba967e59bc3327b4dc2a4460f4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDemandsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a36d90b47d30362df401823c21106132a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDurationMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a205a1ceec0a84172f184a0e5c09439ee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDurationMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a707803108150b1bd31cb496ac5ce42f2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEarlyCostArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8384251179632a80fdb736377043e829</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEarlyDateArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aad1113636f0ceefbf79a1c1ed0962266</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7d079adf02e0acbbe26691e8c2e2d26f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9da8bd50488b7bfaf29dafeac488c24e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abe82078ee45c0cb3976f9a648e7e8389</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kExpressionArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7e316e2c0042d52af11be86b82287718</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFailuresLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a08c349b1aa12d68304581cfea2ad1fae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFinalStatesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a62948d17defdef3995eedcf87cefe92b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFixedChargeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a59d3fe79f6b850edef2a003af69c8c1c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIndex2Argument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af05577d9a8dceaf2f97e3012ce426225</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIndexArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5d5ce8cfe4c9243c9b78d8492668b800</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInitialState</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2878986c75516e14680711d3c1e873af</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2ab1cbff58c24dc5017097b6a0a838e7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aed73378373382879db4cc4f42db38784</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLateCostArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abb90fd1d87eea297afe95bca09e9235e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLateDateArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a0f276220863e52aa5b4310e09bca80f0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLeftArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8bef2058a71de8dc9d979cdfee244613</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad0c35762f9cd7d79b51e6d9ca568f6ec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMaximizeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>acb394e7169662d9ca957a0affde6220b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a36ed7ed8253a439625cec250d3adc514</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kModuloArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aaa86204c8336f1b6dc14ae954a361b81</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNextsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a76e55486b1fb81a4860bd6a2321648d7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kOptionalArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab1f538f44b7fff25ae4761c06301cc9a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPartialArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a26ba71cb46871a942d7da294eb72df85</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPositionXArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a698bcc5222b25fdb9b3351b14fa2c94b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPositionYArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6781e6ac22e67a344416110b35252493</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRangeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a290a9b9301de6b92f2e0a1f189cf1cd7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRelationArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af255bb789297ed05a80419f46621fcf7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRightArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1c080372fc528d4951e2411c76696d3f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSequenceArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac9845229df3d0b0afc7d58f5a37432e8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSequencesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a58a13c5ddb389b3d3ad063013ce18191</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSizeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a60d008087cac0b0ed36381ffbe5bdbeb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSizeXArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae649b9555f2b5c6fdad39d5b3adbf1a7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSizeYArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac91fa31e47cb779cb431dea57017983f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSmartTimeCheckArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae4f29693e71a4fbed4ad28b041b5c18a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSolutionLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aae7b2191ec7433b273e1f825213d71a6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a079c0703e63776a4ad3e53864b486222</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7563a86f8f366a85c8f48431c9f982ee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab793c03904c4ab40135010471187577e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStepArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9b0ec9bf06a8b303a2402cd55242236d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTargetArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1606c56bdbb336ea2fe5b65ba4162d07</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTimeLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a916b0c8011c6d73e0da63c0de5811735</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTransitsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad5d3ccac1c12901e24a9861010c139a9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTuplesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a77c667f3158b3cb5eb2a06ff4292e00d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kValueArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af9bcfa03b17bfc77afa707f3775ed1fc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kValuesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae3e8e37ef2baa38aa0759ce4c8c34924</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVariableArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af63d71fcac04c98d5e774bf36968b8c7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVarsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a85f7ae79e747c46b1bb248990403ffd2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEvaluatorArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac5753868fd49c8d832df129de33814f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMirrorOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af598e870cb075900bb601fdbbdca4825</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRelaxedMaxOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a92a4c3f41d240eae8b123abb2b0360b2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRelaxedMinOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8f3e3b37dc7487ff51107da6c9d36776</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a326a1e8421f974dc3f48401639313298</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDifferenceOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aee6505d2effca79a716ca26c203f97ae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kProductOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a444350f74c54195a017c663fe2b2ca44</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartSyncOnStartOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a07ac46ef4c52623df078eb57daf07070</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartSyncOnEndOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad2532beeeeaf7018cab5f3946e604af3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTraceOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a962d1e2e70b0085fe22e4dc424b27c97</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MPConstraintProto</name>
    <filename>classoperations__research_1_1MPConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>MPConstraintProto</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a82ee586ca987262f6bbc180ba5d0aa54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MPConstraintProto</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>aa2fe7dd81be8664cda0904ce46054f8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPConstraintProto</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>affd68ff314706aad771e2d8ca1adbe79</anchor>
      <arglist>(const MPConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MPConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a5842ee6b7ed4c268cc41d87464a3b181</anchor>
      <arglist>(const MPConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a1ccc1aa516189f11cb3304ecf0439727</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>inline ::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a28d363a4973a30b57653b02fcf4ef112</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>af1d13a6df383f47327ee616f8cdcc371</anchor>
      <arglist>(MPConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>MPConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a841ea5eda0b0a05f3a124745afd5cf6d</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>MPConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a9ca8c647295ebace3e574b8e3d24bee2</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a1e47ef5e1486a0b88263226eef0cc81a</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>ae82d889c54d721b96f33556003e2ccee</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a9a7e9055566d92d98f47ce4ede21ac30</anchor>
      <arglist>(const MPConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a2659e15a5c5a9e1a15c215009380e573</anchor>
      <arglist>(const MPConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a662d0a48adefea051359e846d688f865</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>ab83721c3c648c0eeb5bbf537acf5bd83</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>ac4836cca1934e64dbea9e6ef3ce9cdee</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a53b71370fe9f6028e4fdaaa7130867b3</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a50004cea51db571adac38b03d42fb465</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a2237ad5ee4fa949c66068a3bf50e48d2</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a26409443fc3814d1bb7f8447f0fbb7a3</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a50be0160e882c5c5a7b0d285a5cb8433</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>var_index_size</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a2cde491b08e4441431c12c762a7076cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_var_index</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>aa526748f0cbc568a82a89720de2e1399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>var_index</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>abd590f956c62b7b53558d5485a89afbe</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_var_index</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a6f2666deb52c9f3f75c177e35723d129</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_var_index</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a8c3f7e5768e6019e02732e32ec160138</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>var_index</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a4ddcba5b8c1d08d304f4daf9199c61b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_var_index</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a82a9ae60780f5b864eba01252d740aff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coefficient_size</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a49a41e9c30b728835551f6778afced05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_coefficient</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a674f003b1363136981c8b6ff2ccd1a9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>coefficient</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>ab7fd245949617780299ea0f0bed446c4</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_coefficient</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>ae3972775ecaeda6f9cc94af7d468158a</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_coefficient</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>aaca8826ea6581f22fd0dedaca6887d7d</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; double &gt; &amp;</type>
      <name>coefficient</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>acd4aebe6852a0c3ab3c656abbe20e4cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; double &gt; *</type>
      <name>mutable_coefficient</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a140e35bcc8eddf4a7cbf8964deaf99ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_name</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a0379e4a190793bbd1b9f1ff7bc4a00df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_name</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a2b81bf001e6446167d524d63924a364f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a8ef40ebe70dd1dd05c12c148ef90ade6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a548d8dfec72ee7116bc14ba967638473</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a964a9b048ffeffa32bbcbf8485e2a3e0</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a0dcf494a2eb39924bea49de89e3cac94</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>mutable_name</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a9d6d9d5d6f97aa28b1a51bdcb8933c43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>release_name</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>aa27185b73e53ba34df82530bdf73e4c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_name</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a5f9eb552e3bf5ab0c41a5d8e4316c8d3</anchor>
      <arglist>(::std::string *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_is_lazy</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a1f06e82321c4f697841c49c114fcd0f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_is_lazy</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a74bae97c5b8276c4ae6e6165f1fecf3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_lazy</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>add563c3db9265596107e38a0df57f89d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_lazy</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a71a038764e673accc0476b1fd8206a06</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lower_bound</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>ab1f474c4998aaf2a11425ebfd869809a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_lower_bound</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>ac4a4330b5e8a46272dc5e79f8f42b361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lower_bound</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a0e37433ea0f58859b5184da5ee3c7f1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_lower_bound</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a2f545208fa2ab549b0a34b0cbd54522f</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_upper_bound</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a14355698a6b13b75477e16e7095c4544</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_upper_bound</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>ade5fd5169654f17614d3b426829273b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upper_bound</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>aeeabf803b4f9d75b42bbd2ed06880a60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_upper_bound</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>aaf54b6fd5a4dedb5ad2fdaf1d5e70740</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a4444b37c56ec0a1ea31c0eab930c2bc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a65e3d2031bdc293c2d85669dc1eca8a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>aaf390249615811d9f1af2e4b51bd0177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a586cb2b0aec0b4d1d5e92f344da06052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a0a6b2f25cbacb6871b220f1d55657735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarIndexFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a479086d965728a2393e8cf081da15ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCoefficientFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a2f13cad466cd701f1b187483d59805a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNameFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a441d0fe7455f4ffeddc3a2477adbd022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIsLazyFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>aeb3995c69c3d24582d11ee28c0523532</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLowerBoundFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a7b7aaa7430c7639d52507edf2306a4de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUpperBoundFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>a30f8e7ef7c4951cf8b8a4375b0df4d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>af910aca53a97ebc29b0a0b528eeb1671</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1MPConstraintProto.html</anchorfile>
      <anchor>ab27b25852339539546a6b139b7112ddf</anchor>
      <arglist>(MPConstraintProto &amp;a, MPConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MPGeneralConstraintProto</name>
    <filename>classoperations__research_1_1MPGeneralConstraintProto.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>GeneralConstraintCase</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a2cf31917b69263cfbac0e486ddb6aba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIndicatorConstraint</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a2cf31917b69263cfbac0e486ddb6aba1a49273ebf624aaccbfa40d1b7e7c0a85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GENERAL_CONSTRAINT_NOT_SET</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a2cf31917b69263cfbac0e486ddb6aba1a958b131e29583210144fef16daf97795</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIndicatorConstraint</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a2cf31917b69263cfbac0e486ddb6aba1a49273ebf624aaccbfa40d1b7e7c0a85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GENERAL_CONSTRAINT_NOT_SET</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a2cf31917b69263cfbac0e486ddb6aba1a958b131e29583210144fef16daf97795</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPGeneralConstraintProto</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a4ef6ff6ba1c772ad245949374745abe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MPGeneralConstraintProto</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a6783c5a065b790d843c946d75e624bd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPGeneralConstraintProto</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a1574f0ff7bd57173445f00124a3ce3cc</anchor>
      <arglist>(const MPGeneralConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MPGeneralConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>ade51c5fc9c7d152fc527acec3d061648</anchor>
      <arglist>(const MPGeneralConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a4e85d04301ddabea474e41b77a6e75b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>inline ::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a2ebf4fef33bac8cc63714f80926209e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a6a15885d9dd8dc6ddacdeac999b84d74</anchor>
      <arglist>(MPGeneralConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>MPGeneralConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a156c085640796614ae514830f8aabb9b</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>MPGeneralConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a041994c580bd05e7e328ac9dd966400d</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>ae14a992ec52211964dbf32b725c15c09</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a76bb8bcb9156fe416fc404e8828ce738</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>afad84cb6995485a207d0804f81436536</anchor>
      <arglist>(const MPGeneralConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a22c151a5abcda31d86d375177ec50941</anchor>
      <arglist>(const MPGeneralConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>abd5067d3256977a140d31c2f9b40a249</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a60de46823c1e2931b4150bd7980c560b</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a3ab81e2b0b99952c6e0dbd05ba2eb7ae</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>aa1c9b66adc82cf192f4bd27639fc8e24</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a2d8d43306a0a4d2b55f5b60e17cf34ed</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a3c7eff9e740a18fbd8c60a06f9493e84</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a32726d5a4bebcdd8a84aef4633275184</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>ae12981213adb64548b917a63f40d11b5</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_name</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a8bba7542eb93ec6f9464c8ee7219199c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_name</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a321828218bc588255d5337e6acd9eb48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a2bac5a3122f6bbb7801b9f668da6aeeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a814537eab87de4406d08896370239704</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>ae2f25571556b6694fc6969493a523eda</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>ae7f25c54fdd9c84c338c7ec60c97e9f5</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>mutable_name</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>aa201de18393af8ca448358bdd7218c18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>release_name</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a8f7b422a685ef384223cf105564f4e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_name</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a32ca12f453bfc19c7f9cc9c37b553066</anchor>
      <arglist>(::std::string *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_indicator_constraint</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>aa87142dc2040bba8672cad97f858fdcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_indicator_constraint</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>ac05d6d6c5dbba96126c691912b249981</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::MPIndicatorConstraint &amp;</type>
      <name>indicator_constraint</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a10103847e9319221da2749f8efd0ef26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPIndicatorConstraint *</type>
      <name>release_indicator_constraint</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>adfaa2ded770cbaf3a1d4a13b30fd1348</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPIndicatorConstraint *</type>
      <name>mutable_indicator_constraint</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a15f1013018bce808656ae4c95415cd69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_indicator_constraint</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a48bf2bb541bea3140542a860bc07595c</anchor>
      <arglist>(::operations_research::MPIndicatorConstraint *indicator_constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_general_constraint</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a5351c0cb7e3c235a55235ec3ca2535c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GeneralConstraintCase</type>
      <name>general_constraint_case</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a1fa1b2e8991b8063f44e5c9f60b12485</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>ade54349ab6a27de0e7a315c67fafce78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPGeneralConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>abd12f3b07bf2728bed4448e21636d5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>aa4448f7de136867e33f95954998a6934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPGeneralConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a5495cb1a043b7cfb73cc2cb76af06101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>af5a0ebb374e39edbf1766525d532db39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNameFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>ae057f2125478bc0a6bb8929d6dad7023</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIndicatorConstraintFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>ae2594704179fc4c5401f7d83cfb96d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>af910aca53a97ebc29b0a0b528eeb1671</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1MPGeneralConstraintProto.html</anchorfile>
      <anchor>a8f38f5cf55d76f718a960b5b8d67198c</anchor>
      <arglist>(MPGeneralConstraintProto &amp;a, MPGeneralConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MPIndicatorConstraint</name>
    <filename>classoperations__research_1_1MPIndicatorConstraint.html</filename>
    <member kind="function">
      <type></type>
      <name>MPIndicatorConstraint</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>ac08487e68504709333737af09be2450e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MPIndicatorConstraint</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a08b1b48c4cf73de8adc896252f6ec515</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIndicatorConstraint</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a00e0b5db23c4b4324a07389600408c13</anchor>
      <arglist>(const MPIndicatorConstraint &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MPIndicatorConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a63446fecd1ef3f7ffe6b36aa125f9fc2</anchor>
      <arglist>(const MPIndicatorConstraint &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>abc3da54ec40b22676bd20628fcfc9f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>inline ::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>add2962171a6c2c2b4f45fdf0923a5cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a8e6f6035dbe17c35778949f6607a7330</anchor>
      <arglist>(MPIndicatorConstraint *other)</arglist>
    </member>
    <member kind="function">
      <type>MPIndicatorConstraint *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a56d217e844d83e83c6f004d6667901e6</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>MPIndicatorConstraint *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>ad0aa365ecefa1707c49c1a9c3e0ec555</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a689618cda7a67758eff0a26f070ca064</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a5657f41955d56b14020eaa55ea3bc8df</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>aca9514406e2603572b25a944f65f1cb1</anchor>
      <arglist>(const MPIndicatorConstraint &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a26986dcee2dca29205399b3b1279a4b8</anchor>
      <arglist>(const MPIndicatorConstraint &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a692a63ce43d44284aaf37097aaef659c</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>aeab111b8c411d95addba677867eced0e</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a94e4ece67f6c773bbe1db152d48ee128</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a6fcd387d738d5f9a68191bc4263904ad</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a4dc781794176fe1fe24e0253aad93101</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a5ee691f4d3f6d92f3e0a99a8aad0c427</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a2cf9578630df932dce4db3227906c402</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a41c7cb8277b09fc54f262abe300fab77</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_constraint</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>ace76d92053879ffbde31295be1412d87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_constraint</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>aa08721d49a0413e856287e18b3d445c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::MPConstraintProto &amp;</type>
      <name>constraint</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a02112ccc2d2e12774abeae21e9d39916</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPConstraintProto *</type>
      <name>release_constraint</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a56b64e1eb3e46fc56fcc2b26bb9e2421</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPConstraintProto *</type>
      <name>mutable_constraint</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>aa09895a431862860449a5e478006d4f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_constraint</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a834dd3b173822ac8e3c7ea14321b8a8a</anchor>
      <arglist>(::operations_research::MPConstraintProto *constraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_var_index</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>aee14b5535f9e1954fe957ceb9114b004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_var_index</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>ab2205d82bdad160ee2509fdd5fac3f51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>var_index</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a30de5bc42ed8cb4be1a0bd8d6fd272e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_var_index</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a4488cdb709270d9a6e27595eeffdb662</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_var_value</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a2eb4d6771867dcb48c76f7a8873e34ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_var_value</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a7c37e3a5b5b3e5a891d9b2299743d399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>var_value</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a65660188fdd8f365f82c44c06a2eced3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_var_value</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>adac9ca27d9eeaf0551a7e40d76db9529</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>ad9eb75be474fee423dd3f9a9644183d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPIndicatorConstraint &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a65c53d4960d9ad7769422d5b47fef0cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>af877cd6ab03d6462c817ae180c5fa2a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPIndicatorConstraint *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a4e83a0bb25867fe9de814d46450b9b99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>ac31202232e26a6c704c98be9178ba38c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kConstraintFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a45205178099d40e874441fa8124cd450</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarIndexFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>ac4dc32ee5078fbb8dea629fa546b5f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarValueFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>ac966fa412048b51768b21c43da070ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>af910aca53a97ebc29b0a0b528eeb1671</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1MPIndicatorConstraint.html</anchorfile>
      <anchor>a18c8c95bac078ce4e80b718441462696</anchor>
      <arglist>(MPIndicatorConstraint &amp;a, MPIndicatorConstraint &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::MPModelExportOptions</name>
    <filename>structoperations__research_1_1MPModelExportOptions.html</filename>
    <member kind="function">
      <type></type>
      <name>MPModelExportOptions</name>
      <anchorfile>structoperations__research_1_1MPModelExportOptions.html</anchorfile>
      <anchor>a86112c3c11136b95424b6c60627d91b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>obfuscate</name>
      <anchorfile>structoperations__research_1_1MPModelExportOptions.html</anchorfile>
      <anchor>af22a80b78769d34299cdc7c39549bb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>log_invalid_names</name>
      <anchorfile>structoperations__research_1_1MPModelExportOptions.html</anchorfile>
      <anchor>a7b8fcb7a9d972c70ccb83d34bfd9e207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>show_unused_variables</name>
      <anchorfile>structoperations__research_1_1MPModelExportOptions.html</anchorfile>
      <anchor>a5e95cfdaa41bc1970763fbb1910286ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_line_length</name>
      <anchorfile>structoperations__research_1_1MPModelExportOptions.html</anchorfile>
      <anchor>af2188b57edde3fa11b664af741cd4d18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MPModelProto</name>
    <filename>classoperations__research_1_1MPModelProto.html</filename>
    <member kind="function">
      <type></type>
      <name>MPModelProto</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>afc19167676980c67f0853f98f290fd19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MPModelProto</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>abbda629d4ea66666e419b406f6dd7942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPModelProto</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>aa86070792ae245d44f118327004ee429</anchor>
      <arglist>(const MPModelProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MPModelProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a9a347af6feb7c06b20b867b0a1075d13</anchor>
      <arglist>(const MPModelProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a8336a053894af5868adb472feef3d98a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>inline ::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a9f524907ee617c640e8e24c07839715b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a777b7e0a9d5fd43efa4b896c95a53409</anchor>
      <arglist>(MPModelProto *other)</arglist>
    </member>
    <member kind="function">
      <type>MPModelProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a468815c3cb78b068a7a8f04e6586258c</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>MPModelProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a69d482bdf65a3e74beb3d2393b3e413c</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a05cc581517f70f4fa70eaa233d58ce96</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a220aa0b5324a08d241e78a1dd59b9c90</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a241d15325442983ec540f5870e9e01de</anchor>
      <arglist>(const MPModelProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a0ed82623217e44daa96a299cab08c22f</anchor>
      <arglist>(const MPModelProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a06f1a19ca8d1431eddb455014653699d</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a30c0ad224f92ebd7ac4020fc0bae7545</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>aa837ba026ea9044e3a137df11021c495</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>af1ff5fcfaadc6f86f3e0f86955bb2d28</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>afb3fa8727d7352d798df80b7a22a9ac8</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a7e55fca7d3ef983d71b898610dba2301</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>aaebe1b2b0abe2ebb541a2193ac01c5ec</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>aa35460b92f66ac36f28120253704c72e</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>variable_size</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a14fd1215ea6e13b461b3b64829a2d35c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_variable</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a6f48541d07553cb24ffe701779200375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPVariableProto *</type>
      <name>mutable_variable</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>aa55dcad76e104c34495572e6e28de653</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedPtrField&lt; ::operations_research::MPVariableProto &gt; *</type>
      <name>mutable_variable</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a7c1201ae59d012942599c225a4b08c5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::MPVariableProto &amp;</type>
      <name>variable</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>ac9876e1f7ee63983c14b8b7fa5f7473c</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPVariableProto *</type>
      <name>add_variable</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a9eb925d09b08c1016d6e900637e8a21d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::operations_research::MPVariableProto &gt; &amp;</type>
      <name>variable</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>ab4e73296fcd61a0b2ebd4f5992dacaac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>constraint_size</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>af91908ae4dad316b74410421bf1936fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_constraint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>aba350f1a269c535d2d3d0265cf7c351c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPConstraintProto *</type>
      <name>mutable_constraint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a855f85be118baa77b1c2bbe274b499db</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedPtrField&lt; ::operations_research::MPConstraintProto &gt; *</type>
      <name>mutable_constraint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>af9746796d6e12fb4062e46abaf6408d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::MPConstraintProto &amp;</type>
      <name>constraint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a9fa3b93c884129f630ddd682366f402e</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPConstraintProto *</type>
      <name>add_constraint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a1b0dbc47df1614cb7b369d6ef9d60dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::operations_research::MPConstraintProto &gt; &amp;</type>
      <name>constraint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a7de4169939eff84eea61ac205a42325b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>general_constraint_size</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a7d522eef9045e2885e66743ad2b84168</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_general_constraint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a57a62999f91d9391421cc7cd1508533e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPGeneralConstraintProto *</type>
      <name>mutable_general_constraint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a40fde17810f546a0c092d0c6ecca7aa0</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedPtrField&lt; ::operations_research::MPGeneralConstraintProto &gt; *</type>
      <name>mutable_general_constraint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a052cf91befed98dcbf3fb0e2392d4bb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::MPGeneralConstraintProto &amp;</type>
      <name>general_constraint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>ae14ddee93568173b75b63924f88b1883</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPGeneralConstraintProto *</type>
      <name>add_general_constraint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>af33883ff76442f9925a817cabb059dc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::operations_research::MPGeneralConstraintProto &gt; &amp;</type>
      <name>general_constraint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a449937899b047d40350f37e90613a6ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_name</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>aa7de06e4de50da30719a7f026f890496</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_name</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a45da2f604022beaee16e5ed797c81cb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>aa5b1db802f9d12052208f0b84da3d154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>ac8a9945c33e6858b66ca96b8753c44f1</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a8b0580d3edebf3f20786081e5f23b85f</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a49d460a0e3d92fc7d284ba4a8d72640d</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>mutable_name</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a2d85fe9aad80c83e7d904b73da5a06d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>release_name</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>ad3aca9f5ef2959d6e969001fe32110e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_name</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a4ab165579ca6b803a8e4e8ac59cdf902</anchor>
      <arglist>(::std::string *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_solution_hint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>aca2749e68edea763a46706361c1bf9d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solution_hint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a5a68808aaf2b3f48861ed3765a20f01b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::PartialVariableAssignment &amp;</type>
      <name>solution_hint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a294cd3e86115d2db8b9c48a24e3010f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::PartialVariableAssignment *</type>
      <name>release_solution_hint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a738289e1b4a63ee573e15d8251d1fff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::PartialVariableAssignment *</type>
      <name>mutable_solution_hint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a2209d493a3b4d27891de688e1077889f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_solution_hint</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>abb0c6d0ba18d52edc99aad81499bafa0</anchor>
      <arglist>(::operations_research::PartialVariableAssignment *solution_hint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_objective_offset</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a02496c2d2e292ebdef1c95b9d44b1420</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_objective_offset</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a508b09af2a1a7a702ff3d3d15f3cdad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>objective_offset</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>afe94623b2d2e8cf1902badbf53e4fb5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_objective_offset</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a7d4cc573df9d697b9abfe13fd31d3fda</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_maximize</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>ae27653c6c2edf9cac13c87ece57f4461</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_maximize</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>adf8ffb84f602291e2dc947ddbd9788b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>maximize</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a76f5d78d924775583e84323cf17afdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximize</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a1d64908c6eb5b8e9a15902fea80c3057</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a99fc5a0026667a5092e36355106f3e57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPModelProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>aa0c0432cb0c479ddd35544cfa023fd88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a033c0190a0c2278e83e311cbbcff8f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPModelProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a2ab39b9ef7809eb287a78b11e4e1d8ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>acdabf20fa8be8ff8944a42cc73b4a608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVariableFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a9c95f3f52ef05577972f131e2fe20d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kConstraintFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>af61ec53c83a3e26a39266f4b5dfb5771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kGeneralConstraintFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a727693fc6e01ab88556d31ad489a6bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNameFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a4479518628ab3ca572e07638b409b38e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolutionHintFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a1b384ae7a79bf4633cd44369c3998f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kObjectiveOffsetFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a23012da9df4a1288f225c1b71b9dfaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaximizeFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a27901ac2d990d284f461a716ad01c77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>af910aca53a97ebc29b0a0b528eeb1671</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1MPModelProto.html</anchorfile>
      <anchor>a301641c5bae6af6d35fb2e1cdc9ec42f</anchor>
      <arglist>(MPModelProto &amp;a, MPModelProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MPModelRequest</name>
    <filename>classoperations__research_1_1MPModelRequest.html</filename>
    <member kind="typedef">
      <type>MPModelRequest_SolverType</type>
      <name>SolverType</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a6a3005022de6d7df32031b2db297017d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPModelRequest</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a21355b6fb0205dbfd20ae939f52a8362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MPModelRequest</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a78632fd84fc2d22aa67a99c82c7ef2e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPModelRequest</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>aa790ada507ed2407bcfa8526fdaa83c8</anchor>
      <arglist>(const MPModelRequest &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MPModelRequest &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a25dd7d10f6941b9f802956fcf93e6f82</anchor>
      <arglist>(const MPModelRequest &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a96bf3ec4d50146a23f4a6fef56150054</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>inline ::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a1c369a2ef680e13e248e88e5ada68f89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>ab43b434242a85136e884a6c477e65282</anchor>
      <arglist>(MPModelRequest *other)</arglist>
    </member>
    <member kind="function">
      <type>MPModelRequest *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a6059aff9650b4461a2fed4fba224e325</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>MPModelRequest *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>adb2728d1e9929dcd813e288b611ed4a8</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a2a1db5f17af2bcc8120df6b9579e981a</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>aae6f0181f06f3cdc4d56cf11fc2e3f89</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a5ef2e82abd9f363594b1b999ed62ccda</anchor>
      <arglist>(const MPModelRequest &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a0dd1a5bfa19358067efd89c351cd717f</anchor>
      <arglist>(const MPModelRequest &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>ac1ba3033490c1ab7f085817491d22dae</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a7f3a3c66c2cba60ccfb35b961335a37e</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>acd2a42e71ef4c50a4e0826ac273376c6</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a82b9166551006fa361145d9f052fdd17</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>ada4fe809193291662e8e0f4dc208cccf</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>ad19b6b803471827d9f227baaea816115</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>ac291e23db35f959dd9bc27656002ba2f</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a9b2a605b190d96fcef6e877241884518</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_solver_specific_parameters</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a1d6fa833f3f021a66f218e3b844912f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solver_specific_parameters</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>abe4d7b688bb45f29e8cb66c4c44666f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>solver_specific_parameters</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a8052b14c4df9bd603ae37cbe16a8170a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solver_specific_parameters</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>ab30c61202c19b92c7e260bcf43742fc7</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solver_specific_parameters</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>ab8c4387591a27bb1b8c50b2f9c776b1b</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solver_specific_parameters</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a3907db52e3feb776d4ccf6cd69f489ef</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>mutable_solver_specific_parameters</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>afee47e519007f2309c89d8f2ff8001f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>release_solver_specific_parameters</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a2feff3d15e814351fbd150cd225f8dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_solver_specific_parameters</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a26001ce3010c95d2cd4f084f90c7ecdc</anchor>
      <arglist>(::std::string *solver_specific_parameters)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_model</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>add8f266800fdfe160ada2bc3d55345bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_model</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a118e898bbe95c0a13885c0487b5ef744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::MPModelProto &amp;</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a2d10e31d0aee82d986b6d6ee36a3b8f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPModelProto *</type>
      <name>release_model</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a5032e6543c89f76bd973671586b52092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPModelProto *</type>
      <name>mutable_model</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a6400b0b7f9c42f6500222a2a69628737</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_model</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>afa16f5780184e4cc3e9aec1f3af7b937</anchor>
      <arglist>(::operations_research::MPModelProto *model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_solver_time_limit_seconds</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a8a3976afeaec68a94962b691b640602c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solver_time_limit_seconds</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a5a890ccbf652026e997348100f3a128c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>solver_time_limit_seconds</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a270a2c19f606dcb8f83dddf243b2eda6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solver_time_limit_seconds</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>abcfe8954f7f20ceab98a55487fd977b6</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_enable_internal_solver_output</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>abb2457f3861fd64a669b984c89c8d98b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_enable_internal_solver_output</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a9ff77d5905a6217d48e3416fdda752a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enable_internal_solver_output</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a2288363e545507e1f46c67342715ae9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_enable_internal_solver_output</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a2170e9d9170c52973b46bc5a3ddcf7e3</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_solver_type</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>aa4efe4bd8083d797204a5e2302486d08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solver_type</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a7dec127297cb18e84924ba1ebb94373f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPModelRequest_SolverType</type>
      <name>solver_type</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>ab6ade0421447a1ec594e3438d03ee978</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solver_type</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a87941923c7a6f1e0688e41c7ff01defc</anchor>
      <arglist>(::operations_research::MPModelRequest_SolverType value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a98bc4d08893e62dc015b1644c5a1cdb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPModelRequest &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>aa6562cc657806d7d8061e4dd1c95327a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>aefbe5cc481a5f05affe62fa847364da6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPModelRequest *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>ab35dee69590227c9babd67710f15f8c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>SolverType_IsValid</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a3a55b88af0e6f38169e6adc88d33d341</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>SolverType_descriptor</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a90c5c3597fba8e409d4719fa4e596045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>SolverType_Name</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>ae2e6f9e3b4b1eae3ffb22c47fe76f241</anchor>
      <arglist>(SolverType value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>SolverType_Parse</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a3c88508eafad10d79796733e8a93213e</anchor>
      <arglist>(const ::std::string &amp;name, SolverType *value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a3222e53b28d5734acce946e0fcdaf2a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>GLOP_LINEAR_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>af428a16c4c412ec6ebacc9617cff702f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>CLP_LINEAR_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a9b2666be8f137679a183a79ac44bd954</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>GLPK_LINEAR_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a166cb86f727891d1cf27e56fd361feef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>GUROBI_LINEAR_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a02407a59b8a08d3c9d6793aaf6c32790</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>CPLEX_LINEAR_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>aabd0eb9710977c12151f45626552f0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>SCIP_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a76935d28e2b3cbbbf8715cfa599d4c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>GLPK_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a775c0aead110ca24f9109ed711f12aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>CBC_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a8a1951ca60b9cd3980dc5dbc8b78e906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>GUROBI_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>ae9122e5c618331e0990457de96281d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>CPLEX_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a5d493e08b153dd7dc2aae3411984d751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>BOP_INTEGER_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a6876386800f3f8bb5dfafc0397a8d6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>SAT_INTEGER_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a0ea1d81351036835bec9d5d3f9c56f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>KNAPSACK_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>adc15f284fd46dffc07c353d9d8d993ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>SolverType_MIN</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>aacefe99bb45dbb287c4a23d215e7fa93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SolverType</type>
      <name>SolverType_MAX</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a85f46bdaebe6d3c872d71a1d46129bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SolverType_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a4a3aae6d6f5272ce477455a0a24ae0fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolverSpecificParametersFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a648ba13d6fe3f598e479827ee8feeba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kModelFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a8640e3de7a39446e825a67a9cbaee146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolverTimeLimitSecondsFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a35bafc1a48f8afda882b032e62c9ade2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kEnableInternalSolverOutputFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a6dd9e79974f131487bcb6ff2dd051d4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolverTypeFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>a574d4b71b338b04ac835da81c30d6f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>af910aca53a97ebc29b0a0b528eeb1671</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1MPModelRequest.html</anchorfile>
      <anchor>ae42c6d79fd1ec8f8c16c952c77f215d1</anchor>
      <arglist>(MPModelRequest &amp;a, MPModelRequest &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MPSolutionResponse</name>
    <filename>classoperations__research_1_1MPSolutionResponse.html</filename>
    <member kind="function">
      <type></type>
      <name>MPSolutionResponse</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a833c349e47df157a774d29d2488d74bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MPSolutionResponse</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>af60e9ac94bf195014676464015497259</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPSolutionResponse</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a440e5fed34c956e5ca5e0ca468389f98</anchor>
      <arglist>(const MPSolutionResponse &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MPSolutionResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a81401dd9366596f4111c545f7517c091</anchor>
      <arglist>(const MPSolutionResponse &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a5ee46335727baec486aff218d6df52d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>inline ::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>aa9b685d9b3846757c65623a2c668ace8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a6d6da769d3220182d7a95e99d54da12b</anchor>
      <arglist>(MPSolutionResponse *other)</arglist>
    </member>
    <member kind="function">
      <type>MPSolutionResponse *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a9b6499414284cfed319740ee0cc3c8af</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>MPSolutionResponse *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a9bd65f27c9729af22e2550d8fef87535</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a6e713016c5836b8786e3dd8eb76141f8</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>ace35f3b88ee492b7dc7b90c214678a24</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a384fe46115cc159fd3b21fc9acd0fafe</anchor>
      <arglist>(const MPSolutionResponse &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a0769e61139812f239c5d955f928e5e60</anchor>
      <arglist>(const MPSolutionResponse &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>abd61a4fdb904666e6b203f5b85f4ddbd</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>addb97e9eeeba0cdaafb182363cbaafb0</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>ad5c0d27c677a85de081a39eed017ae06</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>aab4708caff04f7b16baabe663b0477c4</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a13692ab983543a0968d9df4fb036788b</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a1e57e92dda539378793602322b029e23</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a134ca27f7b3a507da53522b9818cec85</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a777355ef23fb36a58c1cfa170b8ff280</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>variable_value_size</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>ae4bb0e074498f657cc1426bb5c1368b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_variable_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a6da91d5cdb532512d4f2efc96c273500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>variable_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a80f33fec5c1284de87a2fde8742cf53c</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a0800460f522ddc4ed4792ee085c5a1c1</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_variable_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a1eab1b57a080d4dd465436cb5ed87fd2</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; double &gt; &amp;</type>
      <name>variable_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a43dd68cddac1c5aabd8aa12953f6611b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; double &gt; *</type>
      <name>mutable_variable_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a7022136909d7f9a4f5f0f89be9dea12d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dual_value_size</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>ace46a87c1facb8b33911dbb1d2fb526d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_dual_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>ab3905acc7754f038751def3d3aa1d3a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dual_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a319b5eec9e7d1b4dd16ac00bc638651c</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dual_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a6d730345a711e3b5d52a7acb0ec76949</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_dual_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>abceb991a518493eb454df9c3272f4cd0</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; double &gt; &amp;</type>
      <name>dual_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a36e3780a2db3c4b6ef22592072be0937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; double &gt; *</type>
      <name>mutable_dual_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a98f40db050945b91782b64b264c73b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reduced_cost_size</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a3d86c3b36d523699014252790254826a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_reduced_cost</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a46916fe6ced9e534fad008fb78765ffa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>reduced_cost</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a858be2f1607683ec73a2c056783ad6dc</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_reduced_cost</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>aeacb60c3ab22a02359c6edf8730c61a6</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_reduced_cost</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a4f1757e5b80c384f31189ce310c6c4cc</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; double &gt; &amp;</type>
      <name>reduced_cost</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>ad174e6da60bdd326f1e6ceeb3be20db0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; double &gt; *</type>
      <name>mutable_reduced_cost</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>aebd03995f34999e6c321a5df5d105bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_objective_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a816e053105d440043ec4486361e62990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_objective_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a822c9eeeea28341f1c804cffbf78e106</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>objective_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>aaa4a14b0f8dd2b72664759b3a364f9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_objective_value</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a5f55375af57c2b7e797a992413ae0e8f</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_best_objective_bound</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a241360bf68127d58eddf3ef079859ba0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_best_objective_bound</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>aa0ed8dfdd43246e12c02b81d03ae45ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>best_objective_bound</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a3aa7ae0547d526475d060edc8b8ca6b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_best_objective_bound</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a8423de7149da893dc45c125c78dfcd20</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_status</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>ad65e4d3267e1d2270b7d1bfb7eb18127</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_status</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a59e89fd692444fb987e92acc632cd1f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPSolverResponseStatus</type>
      <name>status</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a34bfe8d869b513c42a9f086ef8913152</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_status</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>adfd87a796632d91fc9b8c6ff859e8a9f</anchor>
      <arglist>(::operations_research::MPSolverResponseStatus value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>ae44aa0bbbbe7958e999328c7e14a044b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPSolutionResponse &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a1435bd9b0243d107f16087c9bbfefa28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>ac491b6603878a670b10abf8ad0464a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPSolutionResponse *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>af68dd53a793541c1dddf1cfb5b6def91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a6e8113932c9b8dbd691046d00573994e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVariableValueFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>ac98c58c65d284c4786e1e67cdb6d24a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kDualValueFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>a99c2d42f522d104b063fdcd410f6849f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kReducedCostFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>aee382a95d276dc7aedd71abf85ee7c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kObjectiveValueFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>aa242fccdc5e77e2febdf2d24f2ca0f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kBestObjectiveBoundFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>ac087d9c26bfdf30a96d8265c7c4effcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kStatusFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>ac2712ff29ac754732f4041a7e67c1341</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>af910aca53a97ebc29b0a0b528eeb1671</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1MPSolutionResponse.html</anchorfile>
      <anchor>abbb344cf9059573a256d77455a3dfa8c</anchor>
      <arglist>(MPSolutionResponse &amp;a, MPSolutionResponse &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MPSolverCommonParameters</name>
    <filename>classoperations__research_1_1MPSolverCommonParameters.html</filename>
    <member kind="typedef">
      <type>MPSolverCommonParameters_LPAlgorithmValues</type>
      <name>LPAlgorithmValues</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>aa6313a43e806bab53656593a9ae435de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPSolverCommonParameters</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a7029587a338759d9ef1de80b7d9eb028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MPSolverCommonParameters</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a7588f2e39fe3c0965fddf258b044c30e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPSolverCommonParameters</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>adddf97d95dd001a5822e1e903452314d</anchor>
      <arglist>(const MPSolverCommonParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MPSolverCommonParameters &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>af84f57cffdf5b072009d138b985fed4a</anchor>
      <arglist>(const MPSolverCommonParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a3f5a436f7d81683e675287d03a418253</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>inline ::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a5a519d08fa6d92e20492fd15d5a5a89c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a0b2027280bb07408f1deb2c0031dde0f</anchor>
      <arglist>(MPSolverCommonParameters *other)</arglist>
    </member>
    <member kind="function">
      <type>MPSolverCommonParameters *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a2cf23de93062aec7b11e0793545a03e0</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>MPSolverCommonParameters *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>aafd31bf77fc2d7f83ba6500ee2334fed</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>afb47ae0e68ebbfb236e9c84ceeedda32</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>ae456de0b9ce965a6ec7186a34ac3090a</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a8d562ea03ef8fe1bc9256be00f220542</anchor>
      <arglist>(const MPSolverCommonParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a9bd2064cbf832181ed24ed007c769adc</anchor>
      <arglist>(const MPSolverCommonParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>aed0359cec171eabf7abbade42dca41a3</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a52fd88906392a5fe4beba6420e5e71ea</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a2bcacdf9638a127992102e232ec6566e</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a8c42678a6a0bfec69e8e8d40b5be2566</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>add1516a72142b04ea8c50f9c3e1d9da6</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>ac2dcfc9501fb2a8bfae2b2b6b8beebdc</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a1ce2dd3b914799b0f7615ac19343e16b</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a66e5ecddbed6348d6643f2ff570e31e5</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_relative_mip_gap</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>ab43c065bc88472c640d3390c09cd5734</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_relative_mip_gap</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a73d75d67f9fc347719d63c1215987ff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::OptionalDouble &amp;</type>
      <name>relative_mip_gap</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>acc1c456c8915a916726cb63e970621af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalDouble *</type>
      <name>release_relative_mip_gap</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>aa9ec4345cde03d03b3c08838ec30369a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalDouble *</type>
      <name>mutable_relative_mip_gap</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>ad38f5b3e0e8683ff10f03f3a500bca32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_relative_mip_gap</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a7dd8fd0089cd7d1daf30d410efde5714</anchor>
      <arglist>(::operations_research::OptionalDouble *relative_mip_gap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_primal_tolerance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a77b134a21077007194139b99a9459728</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_primal_tolerance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a66a4b7cb8b837910751805c601c78443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::OptionalDouble &amp;</type>
      <name>primal_tolerance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a36127b223027fc058bbf971f0307efae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalDouble *</type>
      <name>release_primal_tolerance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>adb3df3d7b09a472dfa5742229233da26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalDouble *</type>
      <name>mutable_primal_tolerance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a7c2d5e8cde1db9b23187a0fe7fcd4d06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_primal_tolerance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>ab1be2b91e2bbe5ee267ee024c4ea9bde</anchor>
      <arglist>(::operations_research::OptionalDouble *primal_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_dual_tolerance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>aba8f0504a8ca0687acafba19891f9fe8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_dual_tolerance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>aef0f515d0768ea3b47384acd15552721</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::OptionalDouble &amp;</type>
      <name>dual_tolerance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>aec11862fc49c8ce98432ede53d544c6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalDouble *</type>
      <name>release_dual_tolerance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a279dd3901076daeafbe460fa6936c0d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalDouble *</type>
      <name>mutable_dual_tolerance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>ac4053ee2251560ec5cc0fe3deb71fa0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_dual_tolerance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a7afc7287898f240e6bb722fbb7ae3d89</anchor>
      <arglist>(::operations_research::OptionalDouble *dual_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lp_algorithm</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>ae876c5cd03af14f0908c5ab96b559b9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_lp_algorithm</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>ae16a10ce4e7c3b4b2faa89721960ca4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPSolverCommonParameters_LPAlgorithmValues</type>
      <name>lp_algorithm</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a2c96e4635c2c168f214138eb34d8a3ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_lp_algorithm</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a71f6fb311e3d7f04309728fc6d1ba825</anchor>
      <arglist>(::operations_research::MPSolverCommonParameters_LPAlgorithmValues value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_presolve</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>ab4cd892db8d5e15f13f57505534133e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_presolve</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a759a0852aeab4f63ce3ff62ef1f2fff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>presolve</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a26669e8b4b16b9181bc3b674d8112562</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_presolve</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a0b2e7880d0da6c38a3d3efbc79715439</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_scaling</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>ad34b9cdbadb5f32e35a7a4bdd8a226dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_scaling</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a8c9a43f439b75d4f31e080b31e959d89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>scaling</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a8583cdaae51f66fdfbc2f06a4b2ce56a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_scaling</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>adc35e25af2214b8abf74bd57f6344499</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>abbee1eca054fa23efca3dd469bdad856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPSolverCommonParameters &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a3a7b9bec5564a208b72fc5246112c165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a344b175f28e0075bc7c80716c2b1c3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPSolverCommonParameters *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>add3ad6e9230fcfae52d6f1807bd7b488</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>LPAlgorithmValues_IsValid</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a0137f210096fe7f000d841102036c4cf</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>LPAlgorithmValues_descriptor</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a0bdfe222b5fe442738570ef4de620097</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>LPAlgorithmValues_Name</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>aef7519eb88d0b9694884f56a1b8b59e5</anchor>
      <arglist>(LPAlgorithmValues value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>LPAlgorithmValues_Parse</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a311cb962edaf80e5ecfa860c159f2191</anchor>
      <arglist>(const ::std::string &amp;name, LPAlgorithmValues *value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a8834cc1a6ae262a7cdb1e9b8ebe3d5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const LPAlgorithmValues</type>
      <name>LP_ALGO_UNSPECIFIED</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a4507de9d0be620d79d36e1fc491c193f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const LPAlgorithmValues</type>
      <name>LP_ALGO_DUAL</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a4e000d52d5f8609bde2d86b7242f2871</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const LPAlgorithmValues</type>
      <name>LP_ALGO_PRIMAL</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>ac3d39663ed3ab6d119a762554887dd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const LPAlgorithmValues</type>
      <name>LP_ALGO_BARRIER</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a17cf830119c8eec6bf82af43922c7a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const LPAlgorithmValues</type>
      <name>LPAlgorithmValues_MIN</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a400e9bd70c165f5b466930d91db4c995</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const LPAlgorithmValues</type>
      <name>LPAlgorithmValues_MAX</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a4e4cfee03566d84e0c29964a46c138ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>LPAlgorithmValues_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a726316270672b571630f30b70743312f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRelativeMipGapFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a8d28e029518e99c4077aff290f7183b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPrimalToleranceFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>ad503f1cdc67cc527b0b33764bd369b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kDualToleranceFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>adfdb8a87c8c7cdf67330f779346c807d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLpAlgorithmFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>aa89c71529d1f6f59ec9294db19423a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPresolveFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a3a4ebb83702a3a0eb2f10b10445c37ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kScalingFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a9c817f666dcf53cb2a2f362202afa2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>af910aca53a97ebc29b0a0b528eeb1671</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1MPSolverCommonParameters.html</anchorfile>
      <anchor>a3ef7437ece6efc6c3d73ea07fbef4855</anchor>
      <arglist>(MPSolverCommonParameters &amp;a, MPSolverCommonParameters &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MPVariableProto</name>
    <filename>classoperations__research_1_1MPVariableProto.html</filename>
    <member kind="function">
      <type></type>
      <name>MPVariableProto</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a62cf48331dc44923f7c0cc96fae028c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MPVariableProto</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>ab4c175309211bf770111fd077b13b4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPVariableProto</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a2624c6f6a7184dc13aeaf57670a3ba85</anchor>
      <arglist>(const MPVariableProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MPVariableProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>abcbe8216b089c8c7e64e8222625232e3</anchor>
      <arglist>(const MPVariableProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a59492eebc80e07180b125223a2cb1240</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>inline ::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a6226783aa133e32a7be1561cc7995536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a6fbbe71940eb75fa29fc189d15db4cb6</anchor>
      <arglist>(MPVariableProto *other)</arglist>
    </member>
    <member kind="function">
      <type>MPVariableProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a85181da0e2f19f985232a2139bdd4c5e</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>MPVariableProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a9ce66d6ad9a4fcb057b808a9da8912cd</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a129d367db52ef98b3c55dd66723890ea</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>ab3a998c513b261c6775ffff2beef4f33</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a14e8b27a18065aba5e5bd211e11aa9f6</anchor>
      <arglist>(const MPVariableProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a1fe6eb4b3c4c7c2af434f04925c55356</anchor>
      <arglist>(const MPVariableProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a89fd1748e6452956b64edc8f376cdc45</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>aa2f4322f0750640e2e4931f82cce4556</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>ae822f2450d8b94912e8b8cd3f5aa98a9</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>aa7c4165c873011fc9471588cd6c1f1ee</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a291406c2c172d0eee32a6614a0466b78</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a776ac9529fe870943e6ec095da4fa19b</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a91cd03e19b998dc79c8693cad5a510b3</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a0295dcb0581a10916aea29e57eb50e14</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_name</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>aa7ee7256ce99a9a3c67ea707954b3de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_name</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>aa1f8ef8a66e3febe4322ba5487a0db94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a90ce7b2f989daa7d98d73ded4b2ea2bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a309981c23311ea4ed46ab93480d3cfe5</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a1c53e1c2a5401f24dd58a90803327711</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a7faf5c9ea2ad411be9b50d92ff26de4a</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>mutable_name</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>ab1261573cff3c47b234a300d34f6452b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>release_name</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a1d607740d3050978d04f31d01296c6b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_name</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a41173b0267a6158addc75abf280c273a</anchor>
      <arglist>(::std::string *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_objective_coefficient</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>ad339f6e4dcec1201c4ee91aa1b79fdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_objective_coefficient</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>aaee6b80ba43b4d5bf7e72cf18f4273f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>objective_coefficient</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>aeef9421fbd1ae56ed0f9cdde3e29732a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_objective_coefficient</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a531854c1172ab6e07ac265718a6f33ec</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_is_integer</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a91affe257e981ebc4454f97899f879ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_is_integer</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>ad56f145747bfab5ce78e1e5199d195e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a8856bc82282f6dbf0bf2539781d4d7ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_integer</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a40e71bc57f5973531a5768245dc26c3a</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lower_bound</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a5d69b8518570db9b5c5f7cedaf5b3809</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_lower_bound</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a8fd1b7352faf069ecf048e03824f355b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lower_bound</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a5ba61bba5dcc8a6decbce2780b775b8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_lower_bound</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>ab3ab7f51a56e972b5cacf8c6496ffe5f</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_upper_bound</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a1746892dd67db5804e2ed67d90c882c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_upper_bound</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a378ce6efc84ed541ac45c23a6bad24b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upper_bound</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>aa0d0da3b7d777ff3d0f6368e33db3397</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_upper_bound</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a1481927c09d8e94e157b1a8a212b3152</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>ab454eeff8efd212c02b645969a6f074e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPVariableProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a40e2459a522f2e51fd66dfd8d529f631</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a235a0ba956569c56e5c9c50b598594ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MPVariableProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a0bea28b37fd3bb49be397a7a597f702e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>ae06de7d05dd185634d944f74d56ad6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNameFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a5ccb07923cc9a1bac2c00b216b70192b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kObjectiveCoefficientFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a8cffdd51c38ae1e87144eb234bda245b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIsIntegerFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a295a3114f1d9c1927dda04b9886aa7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLowerBoundFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a73578a474e28aa5d0e8aad3c05424f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUpperBoundFieldNumber</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>a8e22d9cfbceb3503571503453006d559</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>af910aca53a97ebc29b0a0b528eeb1671</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1MPVariableProto.html</anchorfile>
      <anchor>aa521381d2e1830b495734a1ac056b4df</anchor>
      <arglist>(MPVariableProto &amp;a, MPVariableProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TypeRegulationsChecker::NodeCount</name>
    <filename>structTypeRegulationsChecker_1_1NodeCount.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>non_pickup_delivery</name>
      <anchorfile>structTypeRegulationsChecker_1_1NodeCount.html</anchorfile>
      <anchor>a6a64057b17b849d8754db25d7965f836</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pickup</name>
      <anchorfile>structTypeRegulationsChecker_1_1NodeCount.html</anchorfile>
      <anchor>ad9174079c058a67a5df069784c5fd07a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>delivery</name>
      <anchorfile>structTypeRegulationsChecker_1_1NodeCount.html</anchorfile>
      <anchor>aa74c68fd1d813b7eb08667e1a0b0fc49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::StarGraphBase::NodeIterator</name>
    <filename>classoperations__research_1_1StarGraphBase_1_1NodeIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeIterator</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1NodeIterator.html</anchorfile>
      <anchor>aa88b83a7d4d58f14c22985f65b826036</anchor>
      <arglist>(const DerivedGraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1NodeIterator.html</anchorfile>
      <anchor>a53bbc98b79bbf00e3a43504e2f3c8e1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1NodeIterator.html</anchorfile>
      <anchor>aa5e4893b57578a159709ea47eaddcad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1NodeIterator.html</anchorfile>
      <anchor>a75b2eefd123f27761920019ef173b310</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RoutingDimension::NodePrecedence</name>
    <filename>structRoutingDimension_1_1NodePrecedence.html</filename>
    <member kind="variable">
      <type>int64</type>
      <name>first_node</name>
      <anchorfile>structRoutingDimension_1_1NodePrecedence.html</anchorfile>
      <anchor>a791690768d878b2fabe6adfdd35383e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>second_node</name>
      <anchorfile>structRoutingDimension_1_1NodePrecedence.html</anchorfile>
      <anchor>a380315e16036075ab1d6fa7896f90a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>offset</name>
      <anchorfile>structRoutingDimension_1_1NodePrecedence.html</anchorfile>
      <anchor>a0fcec9ed1d122c19028064641f0445a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::NoOverlap2DConstraint</name>
    <filename>classoperations__research_1_1sat_1_1NoOverlap2DConstraint.html</filename>
    <base>operations_research::sat::Constraint</base>
    <member kind="function">
      <type>void</type>
      <name>AddRectangle</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraint.html</anchorfile>
      <anchor>a7e76dae6971e2f38651b7eb8411ebe63</anchor>
      <arglist>(IntervalVar x_coordinate, IntervalVar y_coordinate)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9052e9e1dd8248433909b5542f314add</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; literals)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>ab6457905c9a8cd1c5f92738d57e6f298</anchor>
      <arglist>(BoolVar literal)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>WithName</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9401ab195650160402df5b61f8ac9bda</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aeaf30f4ee7d141e68905f1ac2432b937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintProto &amp;</type>
      <name>Proto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aa0b277df64333f670b66c8d5295b8250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstraintProto *</type>
      <name>MutableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>acaa17b2fbfd62f6845329ae944835654</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstraintProto *</type>
      <name>proto_</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9d74c3d77f601020ab87700745f830ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CpModelBuilder</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraint.html</anchorfile>
      <anchor>ae04c85577cf33a05fb50bb361877fb42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::NoOverlap2DConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>NoOverlap2DConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>ae79da90e540613ae91251219a7be385a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NoOverlap2DConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a274e12a01a253d559bbc6dbb999bd1d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoOverlap2DConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a74419288557fa7c4af86a8e14390c183</anchor>
      <arglist>(const NoOverlap2DConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>NoOverlap2DConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>ad88c52d26f57a52b144b97ba00b6a2a5</anchor>
      <arglist>(const NoOverlap2DConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a6ea6a527e48c326cade52a10d83fb33c</anchor>
      <arglist>(NoOverlap2DConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>NoOverlap2DConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>adc19a13803cd640dc4a091b9903c417f</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>NoOverlap2DConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>ad7a049528458b3b9c0455b27de6c024d</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a7897fe7bac6dbe40208fec8325ae3cf3</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a43acbe1879cfdb4b722f16c68bb263ba</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>aabd798be7248cbd1d0016d407447be8f</anchor>
      <arglist>(const NoOverlap2DConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a2fc360b1a6b5542702db46148016a070</anchor>
      <arglist>(const NoOverlap2DConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a91b73889113ab1d64da4836756a03fde</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a62de9cfe75c8023815395877c0ee5123</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a0148d7428af7402e50e00956c9d0c8ee</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a1c19ae90b0599197513636fb370b248e</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>ac78acd732cc4e84afb030b521a43440a</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a2a37fb5869f6a4525bd40fa3fb9f3962</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a465b73ed4018e8283a261711fa8e580b</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a81d7728125f4b346abfe4d6100a5cb09</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>x_intervals_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>ac860c1cad219b0ff79c5fb4f0e8ce80e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_x_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a0aae2e04181e8167d4a4aa6253aac4d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>x_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>aa323713564d4ce5445e52ded60280fac</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_x_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a8ec0a47cb3dc9d0fe7e79e85a1920ec3</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_x_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>aa3c5873d02689551bd0fce71e2a6da68</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>x_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a7b757d2993665d27d387826bb3183dc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_x_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a516e0a79d0644a258d56e08e1702a74d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>y_intervals_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a1c15fb954fc95592cbe2e7fd7dd2aec9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_y_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a201476b5aa7e694f7402bd78ec0e0497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>y_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a989843a92948d851842487a176f29e64</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_y_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>aba72a8b560eac9f7ff8bdf3db9072184</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_y_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a8a18ca5d782eed72f077a109a68c2ae1</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>y_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a3239a5b449447ea3d4c20409ac3e8f55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_y_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>acdeafb6ab842902069739409c4a6ad53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a8f4236e14af67c64c5fe6629eebda8d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const NoOverlap2DConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>ab2efc66c37a80c1b22ed751ce438536c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a184e14bf889fad6ec203f2953b1d22b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const NoOverlap2DConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>ada59ab4d6bf176f3f229437cb926d218</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a099870133e8d4107a98e53cfbfd0576a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kXIntervalsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>a51b8f56bf916d208488ad933cd74463d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kYIntervalsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>ae6eec5b5ce752cf2544d0bcb11c9420d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlap2DConstraintProto.html</anchorfile>
      <anchor>aabd9aa50228fae717e9aabf279e070e5</anchor>
      <arglist>(NoOverlap2DConstraintProto &amp;a, NoOverlap2DConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::NoOverlapConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>NoOverlapConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a3cb7f1013994d7e198fc73a6eb18f898</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NoOverlapConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>abd05e8027e974dcc60ee79c8b8b31a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoOverlapConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>ae93b6510609ddfc26ecccbca53a49f8d</anchor>
      <arglist>(const NoOverlapConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>NoOverlapConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a933306ebe007ad7a65f1de3a7573f65c</anchor>
      <arglist>(const NoOverlapConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>adff384da8f24c37e8fa24b70d0181090</anchor>
      <arglist>(NoOverlapConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>NoOverlapConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>ab34751ce8c1acf5ba28cd3fed14cff49</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>NoOverlapConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>ae4ab756015c6fe91b28bef8cb564875e</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>ac408f8f251dbec2cd66fd01f544f090f</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a82fff3fe9cccd939c37191281fff59d0</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a78e6245d980965c64866247e4937b6e4</anchor>
      <arglist>(const NoOverlapConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>ac8d3732f525ad6dd68eee94641db16a4</anchor>
      <arglist>(const NoOverlapConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a7bf7fbb9deaae728708ac4c118b151f6</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a742e2a11500ccfa545610dba11b0c92f</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a00ce85466f96ddbd0403676fe309cee5</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>aa833dd34de2c1675e2f543dda02f13a0</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a3ead9492b767534c84dff72f653f3157</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>ab6f003d4d36be3a8c1b1db9e8ad5b093</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a50e6bcc2746b0bf6b477768041e75433</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>aed7e1998bfdce75439bf491bfd478ca3</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>intervals_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a1ac25b6f425989928b67c89b13812fc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a1f74ac7a87587704ed1e311662304493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>ac84f031376543b28989cb29efaf9147a</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>aa0b4dd1b79bc252098a014fc35c70687</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a31a037f85fee9f86f38ed200709a20ad</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>afd16d8f988f54ec74c7d364b6f41ccf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_intervals</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>aa96e2a817b536b884b555dbd2de5ef20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a4ed7e38a09fa28cb33aea04f0063eb2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const NoOverlapConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>abd24fbb1eede6d3471863e1d1cf4f364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>af6786bf2e1cabef7f5d5baf7594c1fc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const NoOverlapConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>ab266135920a8bbcc22ca11b3cdd16a41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>ae3cb9ef14ad154247e09d8b38543665c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIntervalsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>ac21fdddf5a859ef216febf27ac926c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1NoOverlapConstraintProto.html</anchorfile>
      <anchor>a5ab1e2486c7f1264ac6e899a734c70ba</anchor>
      <arglist>(NoOverlapConstraintProto &amp;a, NoOverlapConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::NumericalRev</name>
    <filename>classoperations__research_1_1NumericalRev.html</filename>
    <templarg>T</templarg>
    <base>operations_research::Rev</base>
    <member kind="function">
      <type></type>
      <name>NumericalRev</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>a349aea96aef9e96ecdb1c001e931f75b</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>ac5b1f44217bbe9914ab5f3bfd8a2c71f</anchor>
      <arglist>(Solver *const s, const T &amp;to_add)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Incr</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>a5cb75653696c123cfc8dbc5a9e916084</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Decr</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>a9f28c0cf038c1f5f46a5d823c68b887e</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a612718f3f1f56d8ecce47fae4bc3592c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a614fdcd3e96dc71b0c580f29026380ec</anchor>
      <arglist>(Solver *const s, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericalRev&lt; int &gt;</name>
    <filename>classoperations__research_1_1NumericalRev.html</filename>
    <base>Rev&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>NumericalRev</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>a349aea96aef9e96ecdb1c001e931f75b</anchor>
      <arglist>(const int &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>ac5b1f44217bbe9914ab5f3bfd8a2c71f</anchor>
      <arglist>(Solver *const s, const int &amp;to_add)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Incr</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>a5cb75653696c123cfc8dbc5a9e916084</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Decr</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>a9f28c0cf038c1f5f46a5d823c68b887e</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a612718f3f1f56d8ecce47fae4bc3592c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a614fdcd3e96dc71b0c580f29026380ec</anchor>
      <arglist>(Solver *const s, const int &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::NumericalRevArray</name>
    <filename>classoperations__research_1_1NumericalRevArray.html</filename>
    <templarg></templarg>
    <base>operations_research::RevArray</base>
    <member kind="function">
      <type></type>
      <name>NumericalRevArray</name>
      <anchorfile>classoperations__research_1_1NumericalRevArray.html</anchorfile>
      <anchor>a837710ab5c022c6ad8d0569847b40f84</anchor>
      <arglist>(int size, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1NumericalRevArray.html</anchorfile>
      <anchor>ab4b135d5d6cfb30dbba7df17f1affd32</anchor>
      <arglist>(Solver *const s, int index, const T &amp;to_add)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Incr</name>
      <anchorfile>classoperations__research_1_1NumericalRevArray.html</anchorfile>
      <anchor>ad69b795e0a7110fe1483711154e74d00</anchor>
      <arglist>(Solver *const s, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Decr</name>
      <anchorfile>classoperations__research_1_1NumericalRevArray.html</anchorfile>
      <anchor>a394cdf85b4442ebcb0b4ea7f29697b5d</anchor>
      <arglist>(Solver *const s, int index)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>size</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a0c7349d7ede9ab1e16cff1096d6afe8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>abad018c5f8a0e44bdfd6e17ab59612c7</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>abb88b59866cff9f26ebb6f29e82b777a</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a6516d4adeaf28338dbc7ba2584d76919</anchor>
      <arglist>(Solver *const s, int index, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcListGraph::OppositeIncomingArcIterator</name>
    <filename>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OppositeIncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>af1777cce54ddf621ce58c23b07f04644</anchor>
      <arglist>(const ReverseArcListGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OppositeIncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a93441dfe63ef7f8ea19c28b90b363472</anchor>
      <arglist>(const ReverseArcListGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>ab32e51a40e51e10e2b6bfb8bf63dbc87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>ab7213231061932f430f3fa421bce1d08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>af79e306f4c5d2c04b46983e8c53fca49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a50c4f5e91bf22e413ecc7536f918cbec</anchor>
      <arglist>(OppositeIncomingArcIterator)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ReverseArcListGraph &amp;</type>
      <name>graph_</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a6cc6151c5935827350ec7b9574ad3545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>index_</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>adadde330a68f381bab2c87d8e85faebf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcStaticGraph::OppositeIncomingArcIterator</name>
    <filename>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OppositeIncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>aad411a93142ff085a68a0d599524c3a1</anchor>
      <arglist>(const ReverseArcStaticGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OppositeIncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>abf88ffe44a8c97009a3a14af7ac02d9d</anchor>
      <arglist>(const ReverseArcStaticGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>acc521bdcf77d31c02f46130de62abbd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a7671d99b9b1eccee171ea381efbf6306</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>af44b76c2269e81f5dfcc61825fbb1b9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a63748b2737cc861bded889ff06b03e53</anchor>
      <arglist>(OppositeIncomingArcIterator)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ReverseArcStaticGraph &amp;</type>
      <name>graph_</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a0dd89a6500a8ab3018be5cbe34ad11b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ArcIndexType</type>
      <name>limit_</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a3a1dd084ad6093422cffb58da43de685</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>index_</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a4c6d6e4b71f0237dffe7d4ed2541edf1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcMixedGraph::OppositeIncomingArcIterator</name>
    <filename>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OppositeIncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>af5d41536081e936a3a2075ea225f8853</anchor>
      <arglist>(const ReverseArcMixedGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OppositeIncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a882d40b046e4c26955b28965019df078</anchor>
      <arglist>(const ReverseArcMixedGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>aec415bacb2abe19796f3aadee8c81443</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a74bc7e56984af8afd7d65f8e77588778</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a8dd74217ea5f69b6e8b9ee60d630ac44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>aa5166577a05e8f457d906071599c5046</anchor>
      <arglist>(OppositeIncomingArcIterator)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ReverseArcMixedGraph *</type>
      <name>graph_</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a53f8e0b613096680b6c1aa72b04ef02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>index_</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OppositeIncomingArcIterator.html</anchorfile>
      <anchor>a3795cf3a06e595f99910b3ff9269c4b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::OptimizeVar</name>
    <filename>classoperations__research_1_1OptimizeVar.html</filename>
    <base>operations_research::SearchMonitor</base>
    <member kind="function">
      <type></type>
      <name>OptimizeVar</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a869a6765e20963972d8bc3dd11645f33</anchor>
      <arglist>(Solver *const s, bool maximize, IntVar *const a, int64 step)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OptimizeVar</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a5f4f2dec1c3aaaac9f795c2b90023dcc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>best</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>aecf2e4a608fd1836c0ebac6d7ee0d0ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>ac567620867f5e875168966d1c5abde7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a964aef312aae5df04e7d0fe12060e614</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>ad003866ff381968298a0ebf83f1b18f0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a046594f08d57c33248ac77101184e66c</anchor>
      <arglist>(DecisionBuilder *const db) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a56122e1a51788c21cba4fd3211e93084</anchor>
      <arglist>(Decision *const d) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>ab50cd48d312f0e20afcd77b1bf1e94cb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>aed1aff1da93b7d6ef67c9433a56e311a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>Print</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a6efc7277ebe0c6a15dd35687d9863017</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>ae2a7ca2a1d7ffb879e2d7794aa3875dc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>adcfad0327a52f24042b49aadb09f1b4d</anchor>
      <arglist>(ModelVisitor *const visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyBound</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a0a7e487cd5bdc3fa3a515765bb007fdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab98b6cd2d173adb819adff4e1839f10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9cb45d67a60d4729f1e1fd4d0c6442db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a775e4bc59c759621fdb0b6f129744296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVar *const</type>
      <name>var_</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a229d2a4ba25ff904b6504ba41161721a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>step_</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a0f1b41f6ab20eaf58d9c44340620b04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>best_</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>ac7b6348e2752a940f527c428636a977b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>maximize_</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a7a8a943a24864d59725e423490e86dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>found_initial_solution_</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>abc92b023a2273899160c0997007c6ca8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::OptionalDouble</name>
    <filename>classoperations__research_1_1OptionalDouble.html</filename>
    <member kind="function">
      <type></type>
      <name>OptionalDouble</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a3d37488ffc31669b71bf38c4145b25a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptionalDouble</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a65f55376681119f710b2297183777bd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalDouble</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a078f72896ab3eb36213a7553208398fa</anchor>
      <arglist>(const OptionalDouble &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>OptionalDouble &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a40c297e4ce229e0ddef0a3b407d87ca8</anchor>
      <arglist>(const OptionalDouble &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>ae0cf0868f3dff82ca1ba1c47a27fd886</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>inline ::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a8913bafe2308773777053d850f7fabc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a9c75b6f0082ba236ca858815b450caeb</anchor>
      <arglist>(OptionalDouble *other)</arglist>
    </member>
    <member kind="function">
      <type>OptionalDouble *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a2e1f008bad7c5f20d5308223fe66c19a</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>OptionalDouble *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>aec9a405b68ae6ea9aecf1f3528881cd7</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>adc4e54b9efa5eaf423ededfcf4f9ad9a</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>ae93136b4bd4a067082a9eccea4a90bf2</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a5fd00504567875d0a6092c26f1187bad</anchor>
      <arglist>(const OptionalDouble &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a67b2aea4a6f1ea64df07fc3491316d35</anchor>
      <arglist>(const OptionalDouble &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>abc94f07f3e53c2dc2097b50756dab07d</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>aadebb3f9d31bac8d4ad3e1ad0287b116</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a2cc088c9f621ad09c50c29c78e3781cc</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a12c4154c1c12f82134674bb82b7bc243</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a2c7bfbe177dd870b48c52018c716986b</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a7132104836e07bf28fe6d0f1609c3e3d</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>abceac6c5e5331b2e7fa0139f44ee549a</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a13ebb3eb0d1c537f618850a0b623e7b7</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a185e270d4e9d8953cd2a5dd82ed026b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_value</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a7edc7e27706b3dffcb5b9546defe4920</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>adee9ea9aa591eac8d98ae7d7d89a10f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>aa6121160f7a2b7d41d1c5277fac45a26</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>ab8a1b50c3ad0563cc7eae92fc9ac6cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const OptionalDouble &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a37ab82e4e0ce390a09feb635283e2caf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a38ed2ac40cef2d7d8f5ffa2c386cd8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const OptionalDouble *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a2b0cc17863a09d8d1194625006a0bd3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a36f2c73846c8a388927003dd80299b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kValueFieldNumber</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a58566ced525f962991a04c3c039a2bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>af910aca53a97ebc29b0a0b528eeb1671</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1OptionalDouble.html</anchorfile>
      <anchor>a72787f610d4321655ffac187486bf51e</anchor>
      <arglist>(OptionalDouble &amp;a, OptionalDouble &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::StarGraphBase::OutgoingArcIterator</name>
    <filename>classoperations__research_1_1StarGraphBase_1_1OutgoingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a1ac97e34f27cd9762c0492523e16cc01</anchor>
      <arglist>(const DerivedGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>adfc73904ca2946cf7c01c072a2e8848b</anchor>
      <arglist>(const DerivedGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>abe21369e05b3312ae3d43686aac340e9</anchor>
      <arglist>(const OutgoingArcIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>af1a06e4063cb76b5babf4fc670bfb4a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>ad205c98fef9dd01f3aa32aea884844ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>aeef8d3d1791b5d02ee9c71bcdf38fca8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ListGraph::OutgoingArcIterator</name>
    <filename>classutil_1_1ListGraph_1_1OutgoingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a9b772c46ab2530be02708f9695d6f3a3</anchor>
      <arglist>(const ListGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a6c9470ceecfb37e2aff9641ec622ed80</anchor>
      <arglist>(const ListGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>afbbd6b0f0e799203943668813100794c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a5929fff81892ec6ba4db776ca3bcae63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>aeb6459511875abb327a28591e0b5c172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a7a57e14dd0b6f0b42177360c13638ec2</anchor>
      <arglist>(OutgoingArcIterator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::StaticGraph::OutgoingArcIterator</name>
    <filename>classutil_1_1StaticGraph_1_1OutgoingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classutil_1_1StaticGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a15d6bd250626ba7eb0c0ca869e80e82e</anchor>
      <arglist>(const StaticGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classutil_1_1StaticGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a9daf27c5c2732ffaeb63dccfa31ffebd</anchor>
      <arglist>(const StaticGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1StaticGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a86560381d51296c469edd57e933ecf79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1StaticGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>af5c520ba6fbcd2d229d7a61745ba7cf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1StaticGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a2815013e93921b115683cf9c95df8bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1StaticGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>af3fcc61c322d02802cf1dda0c54189ca</anchor>
      <arglist>(OutgoingArcIterator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcListGraph::OutgoingArcIterator</name>
    <filename>classutil_1_1ReverseArcListGraph_1_1OutgoingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a3fdd14f693dbdbbeab976f840cb32392</anchor>
      <arglist>(const ReverseArcListGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a78b56030574415d76b1e2d6ebb106fbd</anchor>
      <arglist>(const ReverseArcListGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>afd40fe3493c52b31693d2bbbedf840d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>abb96a5d77ae6d00140095ec1cfb90b29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>aad0edaa44248b5f9ac54f94dc120fcc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>afbbb9e7b67dfdc4dbd37f2f36b74d07c</anchor>
      <arglist>(OutgoingArcIterator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcStaticGraph::OutgoingArcIterator</name>
    <filename>classutil_1_1ReverseArcStaticGraph_1_1OutgoingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a70d282f950c2f8e4c7aebc8809682661</anchor>
      <arglist>(const ReverseArcStaticGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>aeaeb8e993daf64d4d0423c09b2afd501</anchor>
      <arglist>(const ReverseArcStaticGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>afed4eb7b5114e63cf61c50357ebb2e58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a3a2d3ea00412e3914f4ec1bc2c087c0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a63db75a3bdcd0c16af17aa319e6e1ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a4f7501971b3fcc6ab34772a93c449ac6</anchor>
      <arglist>(OutgoingArcIterator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcMixedGraph::OutgoingArcIterator</name>
    <filename>classutil_1_1ReverseArcMixedGraph_1_1OutgoingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a13eb1d6a9e203dbcc707e1b226a3fc2d</anchor>
      <arglist>(const ReverseArcMixedGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a9c3b33ea848d57f4acf0673b9e239919</anchor>
      <arglist>(const ReverseArcMixedGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a2f4eeac98c28c959041b6632f7a56d24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a82101ea1e7f7a3c7ea7b9b12cef57caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a172d9883e9d4efe61c986ff0648a1f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>ac265893b8e1a6db1380522442bf66c84</anchor>
      <arglist>(OutgoingArcIterator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::CompleteBipartiteGraph::OutgoingArcIterator</name>
    <filename>classutil_1_1CompleteBipartiteGraph_1_1OutgoingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OutgoingArcIterator</name>
      <anchorfile>classutil_1_1CompleteBipartiteGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a0708b60d3463601fa36d682f1429f78a</anchor>
      <arglist>(const CompleteBipartiteGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1CompleteBipartiteGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a50be2d4453f8536677b936c48251ed71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1CompleteBipartiteGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a87f4a00a8b306480db02d93fa87bf223</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1CompleteBipartiteGraph_1_1OutgoingArcIterator.html</anchorfile>
      <anchor>a35eeda0546643fca60129e9fa15e2a61</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ListGraph::OutgoingHeadIterator</name>
    <filename>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</filename>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>a2672503e6869d2d2585047c3f5bf28ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>a31e54d4ae7d4b93c43ea64f950221328</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const NodeIndexType *</type>
      <name>pointer</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>a6bd5b4ffde55cadc4e58c80a08066e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const NodeIndexType &amp;</type>
      <name>reference</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>ad37fb276585027d2996d3fbebc7984db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>value_type</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>ae46346c25624805c3daee4d82904afbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingHeadIterator</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>a0af1c5f92e923e3a8b118b3bf6ebb2c2</anchor>
      <arglist>(const ListGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingHeadIterator</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>a97a4cc7fa4bade46b2fc7c6105c0a4d8</anchor>
      <arglist>(const ListGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>af226be77ff7f280952f37377e12edbf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>a37a2180b903e8a6de06b6fc7bc053ec9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>a32219a5b2ba68d54fdad480b0ddc85ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>ab65b44c6c2202b62ce0010c0b0a17db2</anchor>
      <arglist>(const typename ListGraph&lt; NodeIndexType, ArcIndexType &gt;::OutgoingHeadIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>operator *</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>ad746758b0ebb63bfdd58c1717fe02f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classutil_1_1ListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>ac18c4a7cd6790c5f4bc86e360b27e71d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcListGraph::OutgoingHeadIterator</name>
    <filename>classutil_1_1ReverseArcListGraph_1_1OutgoingHeadIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OutgoingHeadIterator</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>a543ea066e34c54339beab44e7e535602</anchor>
      <arglist>(const ReverseArcListGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingHeadIterator</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>a6cfd2d2e68032ff097430ffc24c296ec</anchor>
      <arglist>(const ReverseArcListGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>aebe7b896a8348608a5480a30183319b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>abc53834789579a19c77f36885d3c51e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>a2aaa9df08e2df6d5b3b58ff68aaa89a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingHeadIterator.html</anchorfile>
      <anchor>a85d66cce692a40535ff5f7b233b55553</anchor>
      <arglist>(OutgoingHeadIterator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::EbertGraph::OutgoingOrOppositeIncomingArcIterator</name>
    <filename>classoperations__research_1_1EbertGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1EbertGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a41f5402bdc39bc7c1a8e713b36bb1f6f</anchor>
      <arglist>(const EbertGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classoperations__research_1_1EbertGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>abeeb4cd46875dc1553f7877efdd87ce1</anchor>
      <arglist>(const EbertGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1EbertGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>aede9dadb0a3ea190c0bfd9123d362172</anchor>
      <arglist>(const OutgoingOrOppositeIncomingArcIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classoperations__research_1_1EbertGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a9d2baaf41a6958cb75efba3e2c446bb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1EbertGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>ae6d48e645be864754bb1efd997506550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classoperations__research_1_1EbertGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a90bb7f82e799ea13576da051837ac206</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcListGraph::OutgoingOrOppositeIncomingArcIterator</name>
    <filename>classutil_1_1ReverseArcListGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>af413badb2f4d154c6308a731ab45c4a5</anchor>
      <arglist>(const ReverseArcListGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a1ff541be19a673afa1bc0f797dcfb7ef</anchor>
      <arglist>(const ReverseArcListGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a1161e8aa1251ada08027562c6ed05f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a2cb0eea9e8b502a6d8313667d76ab3ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>ade64e3094b79d73fba19a7539e41439a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcListGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>abe60ff2f3491a9d0389be8b5276391cd</anchor>
      <arglist>(OutgoingOrOppositeIncomingArcIterator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcStaticGraph::OutgoingOrOppositeIncomingArcIterator</name>
    <filename>classutil_1_1ReverseArcStaticGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a8e0aa831c04c3dd5c8b9a755ebc24fc5</anchor>
      <arglist>(const ReverseArcStaticGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a8c3a7b41bd5314226d4517b920525fb8</anchor>
      <arglist>(const ReverseArcStaticGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a6ff22ab544af24017b576a3f583e4d48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>ad1f79b2ac841f3856578d6840e2bf25a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>ac3219fdc6b75a59fcf8752219f0fa959</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a8540e6821655f421531f91ef3749ecbf</anchor>
      <arglist>(OutgoingOrOppositeIncomingArcIterator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcMixedGraph::OutgoingOrOppositeIncomingArcIterator</name>
    <filename>classutil_1_1ReverseArcMixedGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>aff95fdc437a0d963e9b4937cc4ad10b4</anchor>
      <arglist>(const ReverseArcMixedGraph &amp;graph, NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutgoingOrOppositeIncomingArcIterator</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>af353e150020f4320d272c334bcae08c5</anchor>
      <arglist>(const ReverseArcMixedGraph &amp;graph, NodeIndexType node, ArcIndexType arc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Ok</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a2ce27aff47f5f917d2638855a11006b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>Index</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a07692556f6a74a6ec520e943ce00e980</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Next</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a9b465c88524b5b71c10d0d78dc3015f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_STL_ITERATOR_FUNCTIONS</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph_1_1OutgoingOrOppositeIncomingArcIterator.html</anchorfile>
      <anchor>a3fa4faf0f235733d45830a473ca413a8</anchor>
      <arglist>(OutgoingOrOppositeIncomingArcIterator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Pack</name>
    <filename>classoperations__research_1_1Pack.html</filename>
    <base>operations_research::Constraint</base>
    <member kind="function">
      <type></type>
      <name>Pack</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a94969a5d7e604ccba7e5b515424a246e</anchor>
      <arglist>(Solver *const s, const std::vector&lt; IntVar * &gt; &amp;vars, int number_of_bins)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Pack</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ac41b9dfede7920f5baadea90cddc72ea</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedSumLessOrEqualConstantDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>af69fc8b35affb174b5e47fbee6de9772</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;weights, const std::vector&lt; int64 &gt; &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedSumLessOrEqualConstantDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>aee734afb685c74deb94817b754b9e518</anchor>
      <arglist>(Solver::IndexEvaluator1 weights, const std::vector&lt; int64 &gt; &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedSumLessOrEqualConstantDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a7a66d1abf3e8584e7c5ced64fdbd4cd8</anchor>
      <arglist>(Solver::IndexEvaluator2 weights, const std::vector&lt; int64 &gt; &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedSumEqualVarDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ae82f80cca2acf98982b3c0eb5cc96d03</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;weights, const std::vector&lt; IntVar * &gt; &amp;loads)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedSumEqualVarDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a42267aa342941682b197ebef1a9fd6bc</anchor>
      <arglist>(Solver::IndexEvaluator2 weights, const std::vector&lt; IntVar * &gt; &amp;loads)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSumVariableWeightsLessOrEqualConstantDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a92da0e27853c3c611f0384457e1fcdb2</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;usage, const std::vector&lt; int64 &gt; &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedSumOfAssignedDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>acbb9380640b30f024e9986f96d5fe582</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;weights, IntVar *const cost_var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddCountUsedBinDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a3030c379670033531aab20df788376ed</anchor>
      <arglist>(IntVar *const count_var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddCountAssignedItemsDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>aa8c9281df8ab547dbed84de1364267d4</anchor>
      <arglist>(IntVar *const count_var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Post</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a22f97f40518e3d2f565d78f7ef6f3b56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearAll</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>af10aa93a14a72df0bd8b5c7143c6648e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PropagateDelayed</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ac2a200cf86dc0fa3b6a7905971ad88e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitialPropagate</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>adac62b65b527aa23434dd7d1fdba3b14</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Propagate</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a29f65d45d0fefbab371c7265572d54f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OneDomain</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>af13898c8553d217fa3d52c6e2b504f8d</anchor>
      <arglist>(int var_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a494cf6256ff568544390e507a6943112</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUndecided</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>afc53068cf76b2865a10fafd410da228e</anchor>
      <arglist>(int var_index, int bin_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpossible</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ae7875687d4d252d247a0c4c7b78a0326</anchor>
      <arglist>(int var_index, int bin_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a15e81047afe54184915345326a7cdaa6</anchor>
      <arglist>(int var_index, int bin_index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAssignedStatusKnown</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a6dc7ba8d99e3f6cc958125cbfaf22293</anchor>
      <arglist>(int var_index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPossible</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a21511d7769c6d0d590e3e8a02892052f</anchor>
      <arglist>(int var_index, int bin_index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>AssignVar</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ae7c46b011db8d3382e6b370bbdeaca4f</anchor>
      <arglist>(int var_index, int bin_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAssigned</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a104bd60ce9672f53c0539dac7daec58f</anchor>
      <arglist>(int var_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUnassigned</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a0c9c26b5eef0f2a6bc5c29a6cd193cac</anchor>
      <arglist>(int var_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveAllPossibleFromBin</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ab4e8efc23e9db0d7d793ca7697e89e05</anchor>
      <arglist>(int bin_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignAllPossibleToBin</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a4c3227b06d52ecdb2f09dccc01baa347</anchor>
      <arglist>(int bin_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignFirstPossibleToBin</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a7406f484f98fd83e408ffae60895905c</anchor>
      <arglist>(int bin_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignAllRemainingItems</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a48b59d1fd372a5f0657774bf83acf847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnassignAllRemainingItems</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a43b6922981e5f524b4cd259cc4538336</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ad7fda9d44f000fcb907d2bdeec845423</anchor>
      <arglist>(ModelVisitor *const visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PostAndPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a92c3bfe86238b5c95448d4a0384a327f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCastConstraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a834edc2ae995b866a6aa63e44c242570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a5606cc31756a1708615d492ab75ba886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PairExchangeOperator</name>
    <filename>classoperations__research_1_1PairExchangeOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>PairExchangeOperator</name>
      <anchorfile>classoperations__research_1_1PairExchangeOperator.html</anchorfile>
      <anchor>aa13dd1c660bcff1269b4341210105528</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PairExchangeOperator</name>
      <anchorfile>classoperations__research_1_1PairExchangeOperator.html</anchorfile>
      <anchor>a55d97dc7dc1fab0b040c42e1cc04b940</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1PairExchangeOperator.html</anchorfile>
      <anchor>abe5bdb5b47972a06326d2e9ab802faf4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PairExchangeOperator.html</anchorfile>
      <anchor>a78bebf852bbc0d9666c0a2626ea10564</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PairExchangeRelocateOperator</name>
    <filename>classoperations__research_1_1PairExchangeRelocateOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>PairExchangeRelocateOperator</name>
      <anchorfile>classoperations__research_1_1PairExchangeRelocateOperator.html</anchorfile>
      <anchor>a9b2579de83be05766d62ec2e518df6c1</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PairExchangeRelocateOperator</name>
      <anchorfile>classoperations__research_1_1PairExchangeRelocateOperator.html</anchorfile>
      <anchor>a395197889dcef9f5e2ac025c4e30ffa4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1PairExchangeRelocateOperator.html</anchorfile>
      <anchor>af5f3f6aa4e76d51ee677bbc277da242a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PairExchangeRelocateOperator.html</anchorfile>
      <anchor>a4e68060927f617c04e2def41e9f1fd2a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PairExchangeRelocateOperator.html</anchorfile>
      <anchor>a3beb65eed738c57a613b70cab4e89b9a</anchor>
      <arglist>(int64 base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PairExchangeRelocateOperator.html</anchorfile>
      <anchor>a03a0c86a9d849961094e427a573bb826</anchor>
      <arglist>(int base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PairNodeSwapActiveOperator</name>
    <filename>classoperations__research_1_1PairNodeSwapActiveOperator.html</filename>
    <templarg>swap_first</templarg>
    <base>operations_research::PathOperator</base>
    <member kind="function">
      <type></type>
      <name>PairNodeSwapActiveOperator</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>aba6ffe795d429f58c50d1a14ba282875</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PairNodeSwapActiveOperator</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>a9ba5851f147e1cf1cafca2efc2686552</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>a0980c455528f5b1ba4ecd1137d412403</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>aa1d1ae60a42228a1ed1363362006f05e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>ab62649ea792c88c3e39f90f40da4434a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>a3930be7f9d8aa73d847eaaaca0ee1180</anchor>
      <arglist>(int64 base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>a8023edd3bb68723e1be72fbdef1e3313</anchor>
      <arglist>(int base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>a0501b7d5bc01026d24c1e942432593ad</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PairRelocateOperator</name>
    <filename>classoperations__research_1_1PairRelocateOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>PairRelocateOperator</name>
      <anchorfile>classoperations__research_1_1PairRelocateOperator.html</anchorfile>
      <anchor>adf5eb2e1c8800a7abfd5a4ce8edc2c6d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PairRelocateOperator</name>
      <anchorfile>classoperations__research_1_1PairRelocateOperator.html</anchorfile>
      <anchor>a955f1dd41dfda0eabcecf4733da4aea5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1PairRelocateOperator.html</anchorfile>
      <anchor>ada4c573d55306bbad08fec943e279ba2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PairRelocateOperator.html</anchorfile>
      <anchor>adf487da3f24592d0f7ab321358b47385</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PairRelocateOperator.html</anchorfile>
      <anchor>a498abb2b2994fe5fcf8abb6a731b4418</anchor>
      <arglist>(int64 base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PairRelocateOperator.html</anchorfile>
      <anchor>a07839e54aa42e5040ba1d04729a53ebc</anchor>
      <arglist>(int base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::PartialVariableAssignment</name>
    <filename>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</filename>
    <member kind="function">
      <type></type>
      <name>PartialVariableAssignment</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a4a430a3f6329d617d044ef61ebe62a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PartialVariableAssignment</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a8a65f74b9f4b7c4165ddbdf41a6b63d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialVariableAssignment</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a9088222d4aa6200aa28e3ddc4c1232b9</anchor>
      <arglist>(const PartialVariableAssignment &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PartialVariableAssignment &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a3822c2fde39cab2adc595da8c1b2f45f</anchor>
      <arglist>(const PartialVariableAssignment &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ad023f7ee2c2798f1491f399609f4edfb</anchor>
      <arglist>(PartialVariableAssignment *other)</arglist>
    </member>
    <member kind="function">
      <type>PartialVariableAssignment *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>afdf31ddc59f13c39f52d0fd754d6b391</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>PartialVariableAssignment *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a31739266b4221c58a2dc368145429912</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a1ff4b3c9103559f9ed69404ae856455a</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a00e35fd12d4b2ab4591b5931411c2f7d</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>afd9125bbfc9da8c7c42db5f6c271f84a</anchor>
      <arglist>(const PartialVariableAssignment &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a4958d02b419507028b7c2e7d71a84e49</anchor>
      <arglist>(const PartialVariableAssignment &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a9b0373039a407f0d38780be3fffcdccd</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a49a58a52cbc1de932e7b436d8483a285</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ab10be08be206f7aa13bb04dc3673150c</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ace99e96915e11ded3b0ae3a0c771ac78</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>aafb238a4b36d251ba8ff92bf923c3142</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a62695a07a62febcf46e9422602cb2806</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ad7cdd1c7cf1a05dc5600ec22f8b284c5</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a416f12a73fef0d9366506138d6637628</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vars_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a3b080dacafdc9c5e8859d576cb7ce05b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a4e6c2edf140237d587b97681b6e07f70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a89b52919f7dd874129a967be48033812</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a23b5abbc7f688acbdf704b02da0e88dc</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a4c3a9db1e8c4cf4af54ae5ea107aa360</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a090c69ab85bb86f553cfc464e1c60184</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a6fdb6116aeb56b2c1ab15d659e875407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>values_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a8d6fca42b6ea4558e41766f427fd632c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_values</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a2e7ba61a72bc28ec69a3be7a3f84f169</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>values</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a99fa87887ea0a77c7ab403deb82ff3ed</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_values</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ae41776bb85571069aa5d878b0229cb57</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_values</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ab6137cdf2d56c02368f0e391290f0a40</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>values</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>af974a112432d21c7de6764d7c54ba706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_values</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a72d9beefc5c5592d84e1ca1280329210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a9a1f68ba47740bd8a790c9a8b7e923ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const PartialVariableAssignment &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>aafc487ae943ce13ba17c459b6581d300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ac8156cf148ab48425f1242d7d2672d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const PartialVariableAssignment *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ae4c3d1bb909cfbf07490b8d9b41851f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ae2f78fe5305979a7b754b8005c14e01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>acb2e96ad90618f84b04a37ae8b592f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kValuesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a0aa3eb65b93085dbcc7e6fad7cb1b76f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>af5d0c2dd0559285b7031bfdf619ece69</anchor>
      <arglist>(PartialVariableAssignment &amp;a, PartialVariableAssignment &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PartialVariableAssignment</name>
    <filename>classoperations__research_1_1PartialVariableAssignment.html</filename>
    <member kind="function">
      <type></type>
      <name>PartialVariableAssignment</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>afa81b93282b4cb5c61ad6d191bd5e73f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PartialVariableAssignment</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a21123dd6a3a5319843762fbf18335a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialVariableAssignment</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a4761c4e92063920a4c7af31cc691bd77</anchor>
      <arglist>(const PartialVariableAssignment &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PartialVariableAssignment &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ad9d885c7b3601ce36c6166cf86b19cc6</anchor>
      <arglist>(const PartialVariableAssignment &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a4aa6b404f26812262154d96b3b3c32bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>inline ::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a71b84e11925c3602e6277d1c6ec9d190</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a08277fb56cafd65ca5585ce1bdbcb36d</anchor>
      <arglist>(PartialVariableAssignment *other)</arglist>
    </member>
    <member kind="function">
      <type>PartialVariableAssignment *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a03f27ca12071c128ca558ea787edae77</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>PartialVariableAssignment *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>af797ff9c45a1a2a5753225f05286a3a3</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a3805ecad014b8b39f8a5bec076407428</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ac69c9596f2365b0c340e2117b8cd5c29</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a88dcf3fa6267266ccd9815afa6c5e521</anchor>
      <arglist>(const PartialVariableAssignment &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ad62c328e09e76ffc39d61aa92d3549ef</anchor>
      <arglist>(const PartialVariableAssignment &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ab76923bdde9b8199e82065ba47abfbf2</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>abd98286b2663f85cc959fd27a9ca042a</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>adef80e177d70aafb97b9cf38f423ece2</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a3cb9835fc0f68138132b9169eec0dd39</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ad9a8e892afef882446085fec75d6812a</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>af324d7266c4ebd1d998c369fc4ebdebc</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ad34186104406bfac678cc65149d23b84</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a9124cbb81efbbb3b0ad08299e2de2ae5</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>var_index_size</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ad24ac6ef826cf1912280e012d72ec24b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_var_index</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a40014a65f2205e5f6754c7a5b8df3e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>var_index</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ab9f44a03150702ad296fee4802dc9f3c</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_var_index</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a20cf5ae120651eb3973099a49a6fa3a8</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_var_index</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a408aeda33339211a206ebbceb5a9001c</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>var_index</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a28d3ad55fecca6898480918c1c12c761</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_var_index</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a35eb008d46e30c7c44796be88cdf1258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>var_value_size</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ae58185e8029c7642b7fdb6fef574a43b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_var_value</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ade2414edbb9f0e372f989d3276298fec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>var_value</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a66a76172734f4dee8d1ab190abc1c151</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_var_value</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a5d91c2aebebdce36ccf7f53ecbbf31c2</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_var_value</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ade06b2468c9527c47d29fd25bc733247</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; double &gt; &amp;</type>
      <name>var_value</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ac97cf17d2b424553cfd5e4a3d33c95f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; double &gt; *</type>
      <name>mutable_var_value</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>aaa51a66b9749093ff36d7275ff11439a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>abd22bd5cbff19ff39e43652bb97cb4e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const PartialVariableAssignment &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ae458e5ecf055a526f099979c58c1fe0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>afe03f07357c3e3004bc748276535b692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const PartialVariableAssignment *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>a74f0656a7355b8470a4e631192a6346b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>ac677f2680ae29ac4f9d69008b84e09d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarIndexFieldNumber</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>acab46ed9ecd7ccc9d838dfbd38db8faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarValueFieldNumber</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>af42d8a9e7fbc85605b0821e4e4ea0b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>af910aca53a97ebc29b0a0b528eeb1671</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1PartialVariableAssignment.html</anchorfile>
      <anchor>af5d0c2dd0559285b7031bfdf619ece69</anchor>
      <arglist>(PartialVariableAssignment &amp;a, PartialVariableAssignment &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PathOperator</name>
    <filename>classoperations__research_1_1PathOperator.html</filename>
    <base>operations_research::IntVarLocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>PathOperator</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aefe922e3f6a2233cf3c2a6bbc079181d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;next_vars, const std::vector&lt; IntVar * &gt; &amp;path_vars, int number_of_base_nodes, bool skip_locally_optimal_paths, std::function&lt; int(int64)&gt; start_empty_path_class)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PathOperator</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a192caff70f4f12fd43df88bf8053e50d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abf884d7efc40fbf9932b64623604c23a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PathWithPreviousNodesOperator</name>
    <filename>classoperations__research_1_1PathWithPreviousNodesOperator.html</filename>
    <base>operations_research::PathOperator</base>
    <member kind="function">
      <type></type>
      <name>PathWithPreviousNodesOperator</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6adb77fcc1b9b42ec22def88f061aae5</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, int number_of_base_nodes, std::function&lt; int(int64)&gt; start_empty_path_class)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PathWithPreviousNodesOperator</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a82de90bb304fb2963d26c04396d9c720</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3dd1fd60d3ebe3777a8369787f78275</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abf884d7efc40fbf9932b64623604c23a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PermutationIndexComparisonByArcHead</name>
    <filename>classoperations__research_1_1PermutationIndexComparisonByArcHead.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PermutationIndexComparisonByArcHead</name>
      <anchorfile>classoperations__research_1_1PermutationIndexComparisonByArcHead.html</anchorfile>
      <anchor>a712a93e04cd99aaef989ed89377994b6</anchor>
      <arglist>(const ZVector&lt; NodeIndexType &gt; &amp;head)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classoperations__research_1_1PermutationIndexComparisonByArcHead.html</anchorfile>
      <anchor>a4d8724da35186aab5d5122d90dee84a7</anchor>
      <arglist>(ArcIndexType a, ArcIndexType b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PriorityQueueWithRestrictedPush</name>
    <filename>classoperations__research_1_1PriorityQueueWithRestrictedPush.html</filename>
    <templarg>Element</templarg>
    <templarg>IntegerPriority</templarg>
    <member kind="function">
      <type></type>
      <name>PriorityQueueWithRestrictedPush</name>
      <anchorfile>classoperations__research_1_1PriorityQueueWithRestrictedPush.html</anchorfile>
      <anchor>ab5a37cc35af8067c734810424d4f395d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEmpty</name>
      <anchorfile>classoperations__research_1_1PriorityQueueWithRestrictedPush.html</anchorfile>
      <anchor>a0fa26c84168a6d71010556b0d6541a1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1PriorityQueueWithRestrictedPush.html</anchorfile>
      <anchor>ad5d7012545c74d85dd938ea6bf9e9537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Push</name>
      <anchorfile>classoperations__research_1_1PriorityQueueWithRestrictedPush.html</anchorfile>
      <anchor>a2662f061f688af21e19f3ac53027ed4b</anchor>
      <arglist>(Element element, IntegerPriority priority)</arglist>
    </member>
    <member kind="function">
      <type>Element</type>
      <name>Pop</name>
      <anchorfile>classoperations__research_1_1PriorityQueueWithRestrictedPush.html</anchorfile>
      <anchor>a9597013d76010425ffc592a32ff4f259</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PriorityQueueWithRestrictedPush&lt; NodeIndex, NodeHeight &gt;</name>
    <filename>classoperations__research_1_1PriorityQueueWithRestrictedPush.html</filename>
    <member kind="function">
      <type></type>
      <name>PriorityQueueWithRestrictedPush</name>
      <anchorfile>classoperations__research_1_1PriorityQueueWithRestrictedPush.html</anchorfile>
      <anchor>ab5a37cc35af8067c734810424d4f395d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEmpty</name>
      <anchorfile>classoperations__research_1_1PriorityQueueWithRestrictedPush.html</anchorfile>
      <anchor>a0fa26c84168a6d71010556b0d6541a1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1PriorityQueueWithRestrictedPush.html</anchorfile>
      <anchor>ad5d7012545c74d85dd938ea6bf9e9537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Push</name>
      <anchorfile>classoperations__research_1_1PriorityQueueWithRestrictedPush.html</anchorfile>
      <anchor>a2662f061f688af21e19f3ac53027ed4b</anchor>
      <arglist>(NodeIndex element, NodeHeight priority)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>Pop</name>
      <anchorfile>classoperations__research_1_1PriorityQueueWithRestrictedPush.html</anchorfile>
      <anchor>a9597013d76010425ffc592a32ff4f259</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PropagationBaseObject</name>
    <filename>classoperations__research_1_1PropagationBaseObject.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>PropagationBaseObject</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>afa9385e35090e310e58fc4cb6fd5d606</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropagationBaseObject</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a767a917fc7d9232d121994ae1e124875</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ae5b6f8cb73c1b76da152ad612f91c4ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PropagationMonitor</name>
    <filename>classoperations__research_1_1PropagationMonitor.html</filename>
    <base>operations_research::SearchMonitor</base>
    <member kind="function">
      <type></type>
      <name>PropagationMonitor</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a6f1cf978d88b617fb5dc10faf30603c0</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropagationMonitor</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aef9d187812f7bbf6d51265a5d70637fd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a303fb6b35a71fdbcba21088d88a222ac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginConstraintInitialPropagation</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a149c421b477f87ac2c8753accd9fe930</anchor>
      <arglist>(Constraint *const constraint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndConstraintInitialPropagation</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aca3f05d6c4bf98133efa74475ad2a100</anchor>
      <arglist>(Constraint *const constraint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginNestedConstraintInitialPropagation</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aae95f0bd165da0cba8a733e2487bd0b0</anchor>
      <arglist>(Constraint *const parent, Constraint *const nested)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndNestedConstraintInitialPropagation</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a9c8e0c8cfa58868d72102ba9466c544c</anchor>
      <arglist>(Constraint *const parent, Constraint *const nested)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RegisterDemon</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a09532587cbcdf89f02890450801fced2</anchor>
      <arglist>(Demon *const demon)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginDemonRun</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a5f993d96e8b8c9e854e2de6210817a10</anchor>
      <arglist>(Demon *const demon)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndDemonRun</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a46922ebd346ff7b714f1838ad428207a</anchor>
      <arglist>(Demon *const demon)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>StartProcessingIntegerVariable</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a14028ab54d3a5879bf5d6eefcb66fe22</anchor>
      <arglist>(IntVar *const var)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndProcessingIntegerVariable</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a52230d0d9a55964894cf867fab2e5093</anchor>
      <arglist>(IntVar *const var)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PushContext</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a40b7f88bee1206b3615d06dbdaed1459</anchor>
      <arglist>(const std::string &amp;context)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PopContext</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a17029f3eaabf4633ca85802e787df736</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a2078e48240cee78626eb5674be918557</anchor>
      <arglist>(IntExpr *const expr, int64 new_min)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a48f6da00d4781ef0f5b59c78d56ff3b0</anchor>
      <arglist>(IntExpr *const expr, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>ae230d5e381f782bd3b600c0d0e12fc83</anchor>
      <arglist>(IntExpr *const expr, int64 new_min, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>ab4b57c1d6ca1e3b1f066f8a0748361e1</anchor>
      <arglist>(IntVar *const var, int64 new_min)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aa10e89f2c4912fa745951a03c0daf362</anchor>
      <arglist>(IntVar *const var, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a7226a39a15681662920f91a423de6b61</anchor>
      <arglist>(IntVar *const var, int64 new_min, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RemoveValue</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>ac8e4c7b0c60cd50d9870f3949e47828e</anchor>
      <arglist>(IntVar *const var, int64 value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aea14a7436f45e5ed69bc1d2d3c67fe1b</anchor>
      <arglist>(IntVar *const var, int64 value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RemoveInterval</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>ad320aa7441456e36b2612908ce5cf304</anchor>
      <arglist>(IntVar *const var, int64 imin, int64 imax)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetValues</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a243163480f0b3877d15a30cd01b9fd45</anchor>
      <arglist>(IntVar *const var, const std::vector&lt; int64 &gt; &amp;values)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RemoveValues</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a71ad95706fde5ba3c076f1125177cf3e</anchor>
      <arglist>(IntVar *const var, const std::vector&lt; int64 &gt; &amp;values)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetStartMin</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a201f353378ceaff27cc9a8861a4734d5</anchor>
      <arglist>(IntervalVar *const var, int64 new_min)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetStartMax</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>ac2c1c0b6d89eb9ee53c320509eeb9c9b</anchor>
      <arglist>(IntervalVar *const var, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetStartRange</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a2c7679571947898865bcf04abf49fc81</anchor>
      <arglist>(IntervalVar *const var, int64 new_min, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndMin</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a045c6ca9847feb586ad5c4de1808829e</anchor>
      <arglist>(IntervalVar *const var, int64 new_min)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndMax</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a771f782aca6d12a464d660bbd023703b</anchor>
      <arglist>(IntervalVar *const var, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndRange</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aff9acdea68b68555cb1900ff7428266a</anchor>
      <arglist>(IntervalVar *const var, int64 new_min, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDurationMin</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a39ddbd6b9a80e5c7c5b8cca42882294d</anchor>
      <arglist>(IntervalVar *const var, int64 new_min)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDurationMax</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a07665062e623a550433c5845111910e3</anchor>
      <arglist>(IntervalVar *const var, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDurationRange</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aa4bf4e7847c485be003287bc07978317</anchor>
      <arglist>(IntervalVar *const var, int64 new_min, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetPerformed</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a472d5349fbf47bcfa74c24e92c738402</anchor>
      <arglist>(IntervalVar *const var, bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RankFirst</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>afb22c7f645f8813c32fa34dc200a5753</anchor>
      <arglist>(SequenceVar *const var, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RankNotFirst</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a9ed062f89410e8ce29e59d78e1437317</anchor>
      <arglist>(SequenceVar *const var, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RankLast</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a1a8db8e232b8e87f8e663aaf2f484618</anchor>
      <arglist>(SequenceVar *const var, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RankNotLast</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a2b256262632e819ceeb0cf04be0e53ad</anchor>
      <arglist>(SequenceVar *const var, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RankSequence</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a07763e428da44d08eab94f5a88348777</anchor>
      <arglist>(SequenceVar *const var, const std::vector&lt; int &gt; &amp;rank_first, const std::vector&lt; int &gt; &amp;rank_last, const std::vector&lt; int &gt; &amp;unperformed)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>ae220d84f70fbc4b4300c11fde784489a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a705ae4bfa396632c23d65f37793391f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab98b6cd2d173adb819adff4e1839f10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a2f3ea4577e11fad619c2d7dcad1617cd</anchor>
      <arglist>(DecisionBuilder *const b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aadfcba48c62683c6d6463a7adb9b0a28</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac4f21fe0c304fc837d903feb65fe858f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9cb45d67a60d4729f1e1fd4d0c6442db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9b300dfb35699cf80504c00f2cbe9153</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PruningHamiltonianSolver</name>
    <filename>classoperations__research_1_1PruningHamiltonianSolver.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>uint32</type>
      <name>Integer</name>
      <anchorfile>classoperations__research_1_1PruningHamiltonianSolver.html</anchorfile>
      <anchor>a2857abdd40d541b03ad21bd053b0ac54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Set&lt; Integer &gt;</type>
      <name>NodeSet</name>
      <anchorfile>classoperations__research_1_1PruningHamiltonianSolver.html</anchorfile>
      <anchor>ac958d277ef05676ff46e2a48c77e0925</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PruningHamiltonianSolver</name>
      <anchorfile>classoperations__research_1_1PruningHamiltonianSolver.html</anchorfile>
      <anchor>a247ca43d1874d57d28e64bba65c8eeb2</anchor>
      <arglist>(CostFunction cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PruningHamiltonianSolver</name>
      <anchorfile>classoperations__research_1_1PruningHamiltonianSolver.html</anchorfile>
      <anchor>ae90975766e34a4bc392f441c85ab0927</anchor>
      <arglist>(int num_nodes, CostFunction cost)</arglist>
    </member>
    <member kind="function">
      <type>CostType</type>
      <name>HamiltonianCost</name>
      <anchorfile>classoperations__research_1_1PruningHamiltonianSolver.html</anchorfile>
      <anchor>aba4aa231b4ea3f9bf71055372a847df7</anchor>
      <arglist>(int end_node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RegularLimit</name>
    <filename>classoperations__research_1_1RegularLimit.html</filename>
    <base>operations_research::SearchLimit</base>
    <member kind="function">
      <type></type>
      <name>RegularLimit</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>ab40802726cee8567662a01a9ca06af97</anchor>
      <arglist>(Solver *const s, int64 time, int64 branches, int64 failures, int64 solutions, bool smart_time_check, bool cumulative)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RegularLimit</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a549c9e71214a87f6a4ab59b113933721</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a255302e173fe3765a12bdac8cc893d89</anchor>
      <arglist>(const SearchLimit *const limit) override</arglist>
    </member>
    <member kind="function">
      <type>SearchLimit *</type>
      <name>MakeClone</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a5c46712d4c0f5a5259111c343a084313</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeIdenticalClone</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a8d79675478e6f3bc3536e278f71ab507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Check</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a19509391e38443b1bc38c5847125ff3d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a57e044adfe2b59e031d3772fc218eef7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a895d84c05da5c98c72e3662bf83ecc86</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateLimits</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>ae4077e4ee25c40a40eb2c320d916250d</anchor>
      <arglist>(int64 time, int64 branches, int64 failures, int64 solutions)</arglist>
    </member>
    <member kind="function">
      <type>absl::Duration</type>
      <name>duration_limit</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a034b9632ef4574d05aa150cd7a0c613c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>wall_time</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a0ece3bd1f5a6a419a1c30fba713c6c8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>branches</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a7c7b7fcaac46d6e0677703e92bf53bb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>failures</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a742f9399433cea90ac80e40b7a7cbf4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>solutions</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a96a95361f128c6725b5d76ba09239293</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a370e4934f9963fa9a440d0f8086a66a8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a71e06768288b2fd36acf28a435744d51</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a7a6e185350eade19733138b3d054bba9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>absl::Time</type>
      <name>AbsoluteSolverDeadline</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>ab78472fc60e6e9f3a7920cba49f6cc72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a5971e2a299e94cd43e5aaf6675cf9dc7</anchor>
      <arglist>(ModelVisitor *const visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>crossed</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a5fce652e4e80c2ac089bdd70281feeb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>aa184196d0761829d7df21643bc498a01</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a4d58c37975405a86ef02fd0fdd7ed34f</anchor>
      <arglist>(DecisionBuilder *const b) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a5e78de48144b2c4446fb2847a525a061</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a3ce36720ef2cd8490199ac815d07a1d1</anchor>
      <arglist>(Decision *const d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac4f21fe0c304fc837d903feb65fe858f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a775e4bc59c759621fdb0b6f129744296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RelocateExpensiveChain</name>
    <filename>classoperations__research_1_1RelocateExpensiveChain.html</filename>
    <base>operations_research::PathOperator</base>
    <member kind="function">
      <type></type>
      <name>RelocateExpensiveChain</name>
      <anchorfile>classoperations__research_1_1RelocateExpensiveChain.html</anchorfile>
      <anchor>ad0e60e3542bae5a5d5cd547e437b9e7a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, int num_arcs_to_consider, std::function&lt; int64(int64, int64, int64)&gt; arc_cost_for_path_start)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RelocateExpensiveChain</name>
      <anchorfile>classoperations__research_1_1RelocateExpensiveChain.html</anchorfile>
      <anchor>a15512a6333382cccdab57fb7af68e926</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1RelocateExpensiveChain.html</anchorfile>
      <anchor>a9a88f045cd2761bbe4894bf5764e6078</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1RelocateExpensiveChain.html</anchorfile>
      <anchor>ac22e01aeaac3d0cafcb8b2d0ebf59bcf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1RelocateExpensiveChain.html</anchorfile>
      <anchor>a99cdd3acd4fd444399b6a70ee546e77b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RelocateSubtrip</name>
    <filename>classoperations__research_1_1RelocateSubtrip.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>RelocateSubtrip</name>
      <anchorfile>classoperations__research_1_1RelocateSubtrip.html</anchorfile>
      <anchor>a9cf5847433a2b90f585df98199cbc42c</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;pairs)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1RelocateSubtrip.html</anchorfile>
      <anchor>aa9aa7e51c3ae2c7943a0c9700ebc3ea5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1RelocateSubtrip.html</anchorfile>
      <anchor>a3ff200c1f4b1e64074225d838aa3789b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::ReservoirConstraint</name>
    <filename>classoperations__research_1_1sat_1_1ReservoirConstraint.html</filename>
    <base>operations_research::sat::Constraint</base>
    <member kind="function">
      <type>void</type>
      <name>AddEvent</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraint.html</anchorfile>
      <anchor>aff0e9a5c156c176def60cf2985919bd6</anchor>
      <arglist>(IntVar time, int64 demand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddOptionalEvent</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraint.html</anchorfile>
      <anchor>aad9028f0c33c7d4799891b9f742148b6</anchor>
      <arglist>(IntVar time, int64 demand, BoolVar is_active)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9052e9e1dd8248433909b5542f314add</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; literals)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>ab6457905c9a8cd1c5f92738d57e6f298</anchor>
      <arglist>(BoolVar literal)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>WithName</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9401ab195650160402df5b61f8ac9bda</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aeaf30f4ee7d141e68905f1ac2432b937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintProto &amp;</type>
      <name>Proto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aa0b277df64333f670b66c8d5295b8250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstraintProto *</type>
      <name>MutableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>acaa17b2fbfd62f6845329ae944835654</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstraintProto *</type>
      <name>proto_</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9d74c3d77f601020ab87700745f830ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CpModelBuilder</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraint.html</anchorfile>
      <anchor>ae04c85577cf33a05fb50bb361877fb42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::ReservoirConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>ReservoirConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a435b2c70e9e1c12ea336ac6a77a84e70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReservoirConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a0098113084b1b26338fee9667bdb85eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReservoirConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>ae58932d5ffa16a78b62aa7e72c79d72a</anchor>
      <arglist>(const ReservoirConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>ReservoirConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>ad0daab530049b740b2c4ad4dc71813ae</anchor>
      <arglist>(const ReservoirConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a8f334a0a31b86879a5cf1e2926533293</anchor>
      <arglist>(ReservoirConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>ReservoirConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>ac0bff8622d15607b97eeb66031731458</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>ReservoirConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a28bc8e2515658aa794a1e4ccd904b0f5</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a4a0cba3048560f8d31003af2fa84a02f</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a3151e59aba8a904b228b5d5464d37606</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a5712cacd5ce9441ed8d1ce9910439fd0</anchor>
      <arglist>(const ReservoirConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a47b1c6ab7ad8b7d4010fb2f826d1ee25</anchor>
      <arglist>(const ReservoirConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>ad35ec910f37d27499aade5759f3bdf75</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>af8b7953bfa6710e092216b84267fe2a8</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>ae62268a015fb12edd2364e54dc48f4e3</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a78e9bb83a34bbd0f2b15165f23146bd7</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a9cfeaa3ec46716cedfa08b9b3c2e8514</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a043bfa1898a2233049986581d48f50f7</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>aa65d88f2677784e0a8839a0f638f3361</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a48ec7007a9339df9d683b10e8312b0ed</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>times_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a57b796114e91487aff6f28e43e636aac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_times</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a0179cc5fa3528d5b303dfa6e5e1492e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>times</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a26e9cc7b3b9bdbfef2b00e16e73ba3ef</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_times</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a3542c5ee0934923a4db3951898491eba</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_times</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a4ad9c91833bd1b77bc51f2fd075732b7</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>times</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a5ce08a0d494a171bab04798bb3fcf2e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_times</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a15658578766363f6241daa606faba152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>demands_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a734c7b3754b1ae719cee7617acd75709</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>aa9dcc7df20645baf72ca6cd9e8c19e6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a37ea75f2fdc29bd5180317efb8e65ca4</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a3b34d2b6434970d2403f09e6f6adc83b</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>aec1a9af37b5eda800df7954c397af66a</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a604d5115f71bf66e2a50c8565fa8dd96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a3c22c0918a20ba08b415033e4135b46e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>actives_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>aaee8b2a879ba80aa472b95820de3b6f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_actives</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a7ba63a69669155c8cd21c6054e408659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>actives</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>acecfe2d5a55deaa5b06992a93d6484c9</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_actives</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a090c46af8c3b859cef9d741bd486ef60</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_actives</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>ab9cbf0a91106598317a46cad679c260c</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>actives</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a6b599aedc9ba9cbb64bd6e9b0da62c15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_actives</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>ae866b73e50c9941517ef282f99051c41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_min_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>adb5c56615fd76768b05d8b2a46cfea74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>min_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>aa88c25852b8b1e025befca7d8b2a09c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_min_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a174662a19893f1bb6d74f75c9835cc67</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>af4ebdf4db00d24477b32c8dbc8d6f0be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>max_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a6a495f736292659fea2144bb36c830ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>ad72cd85207cf349db67caa0983c2f769</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a09ca0e48042eca20291deaae1a6ca0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ReservoirConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a5f86f39ab1cfecc905b579329596e65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a82d9a2956750c54f9aefbe81e271cb27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ReservoirConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>ad6a81ee34f164adcf8baab09dd6d2b2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>acfe7e632606da73ddb155f946b686d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTimesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>ac11e64fbb00ed4a9b416eeee62f7d8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kDemandsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a2b38d2329cc0a540f0a14df8932ca007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kActivesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>a835f07389166ce234319a6658eef103a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMinLevelFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>aad6599fa35f799568c6c635a36ad49eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxLevelFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>ad20adf9c695eed8f822db87a15788751</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1ReservoirConstraintProto.html</anchorfile>
      <anchor>acfd202ff58fd87038a27b2130a413097</anchor>
      <arglist>(ReservoirConstraintProto &amp;a, ReservoirConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Rev</name>
    <filename>classoperations__research_1_1Rev.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Rev</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a49f4bb1d930408358e5678b01bc5e0c6</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a612718f3f1f56d8ecce47fae4bc3592c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a614fdcd3e96dc71b0c580f29026380ec</anchor>
      <arglist>(Solver *const s, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Rev&lt; int &gt;</name>
    <filename>classoperations__research_1_1Rev.html</filename>
    <member kind="function">
      <type></type>
      <name>Rev</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a49f4bb1d930408358e5678b01bc5e0c6</anchor>
      <arglist>(const int &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a612718f3f1f56d8ecce47fae4bc3592c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a614fdcd3e96dc71b0c580f29026380ec</anchor>
      <arglist>(Solver *const s, const int &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Rev&lt; uint64 &gt;</name>
    <filename>classoperations__research_1_1Rev.html</filename>
    <member kind="function">
      <type></type>
      <name>Rev</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a49f4bb1d930408358e5678b01bc5e0c6</anchor>
      <arglist>(const uint64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>const uint64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a612718f3f1f56d8ecce47fae4bc3592c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a614fdcd3e96dc71b0c580f29026380ec</anchor>
      <arglist>(Solver *const s, const uint64 &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevArray</name>
    <filename>classoperations__research_1_1RevArray.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>RevArray</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a361b6a1085ee10fb94ea8105dbb180a9</anchor>
      <arglist>(int size, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevArray</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>ae2f2143174e00f93980d5804d3ff262e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>size</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a0c7349d7ede9ab1e16cff1096d6afe8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>abad018c5f8a0e44bdfd6e17ab59612c7</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>abb88b59866cff9f26ebb6f29e82b777a</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a6516d4adeaf28338dbc7ba2584d76919</anchor>
      <arglist>(Solver *const s, int index, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RevArray&lt; uint64 &gt;</name>
    <filename>classoperations__research_1_1RevArray.html</filename>
    <member kind="function">
      <type></type>
      <name>RevArray</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a361b6a1085ee10fb94ea8105dbb180a9</anchor>
      <arglist>(int size, const uint64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevArray</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>ae2f2143174e00f93980d5804d3ff262e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>size</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a0c7349d7ede9ab1e16cff1096d6afe8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const uint64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>abad018c5f8a0e44bdfd6e17ab59612c7</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const uint64 &amp;</type>
      <name>operator[]</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>abb88b59866cff9f26ebb6f29e82b777a</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a6516d4adeaf28338dbc7ba2584d76919</anchor>
      <arglist>(Solver *const s, int index, const uint64 &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevBitMatrix</name>
    <filename>classoperations__research_1_1RevBitMatrix.html</filename>
    <base protection="private">operations_research::RevBitSet</base>
    <member kind="function">
      <type></type>
      <name>RevBitMatrix</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a19ec53631a03b21642ff92537e324709</anchor>
      <arglist>(int64 rows, int64 columns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevBitMatrix</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a087c4a97694ce2632a52edea72f51390</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToOne</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a0460e124e790229cb2d65f74491048b4</anchor>
      <arglist>(Solver *const solver, int64 row, int64 column)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToZero</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a0687c0f2721ff132b707569b69020c1d</anchor>
      <arglist>(Solver *const solver, int64 row, int64 column)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSet</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a0ef4faa41e12f5ba5d67be059eadc932</anchor>
      <arglist>(int64 row, int64 column) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Cardinality</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a9c339ee66fb784b02d58e8b0ac2ea782</anchor>
      <arglist>(int row) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityZero</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a8a660416849e9acc0f0872e61daeb3ce</anchor>
      <arglist>(int row) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityOne</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>ae2bcb32bc27553f598733168bbc46fd2</anchor>
      <arglist>(int row) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetFirstBit</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a479bd81cf7efe3194a3fcc8436334800</anchor>
      <arglist>(int row, int start) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearAll</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a3389f1e156b74cfc031d8ae2edd0cf60</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToOne</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>adfc5252facf16d1c14409cb9a148ba74</anchor>
      <arglist>(Solver *const solver, int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToZero</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a2b98b0fa690a28664a4a00212833a9c0</anchor>
      <arglist>(Solver *const solver, int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSet</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a6ebf10b8965ac7f2e21a3c24ab71da51</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Cardinality</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a3ddbaa8d39c2a6861fad88aacb240bbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityZero</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>adebeb9934a1a83cc6819db9b36ff7d3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityOne</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a78fb408f50908d312ecbd9d50aefb500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetFirstBit</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>ae4b4610d76f45afc09f6ad9590062132</anchor>
      <arglist>(int start) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevBitSet</name>
    <filename>classoperations__research_1_1RevBitSet.html</filename>
    <member kind="function">
      <type></type>
      <name>RevBitSet</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a7369d4e2ea1843501af11edd89199b8c</anchor>
      <arglist>(int64 size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevBitSet</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a72aaa0163218aec6e1ca39a8118fa584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToOne</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>adfc5252facf16d1c14409cb9a148ba74</anchor>
      <arglist>(Solver *const solver, int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToZero</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a2b98b0fa690a28664a4a00212833a9c0</anchor>
      <arglist>(Solver *const solver, int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSet</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a6ebf10b8965ac7f2e21a3c24ab71da51</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Cardinality</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a3ddbaa8d39c2a6861fad88aacb240bbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityZero</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>adebeb9934a1a83cc6819db9b36ff7d3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityOne</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a78fb408f50908d312ecbd9d50aefb500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetFirstBit</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>ae4b4610d76f45afc09f6ad9590062132</anchor>
      <arglist>(int start) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearAll</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a20fc5ddbc3ee9a1da7d04386f1182738</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>RevBitMatrix</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>ac9da3e5301f8c4c0ed8a261d0a0b2cbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcListGraph</name>
    <filename>classutil_1_1ReverseArcListGraph.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>BaseGraph&lt; NodeIndexType, ArcIndexType, true &gt;</base>
    <class kind="class">util::ReverseArcListGraph::IncomingArcIterator</class>
    <class kind="class">util::ReverseArcListGraph::OppositeIncomingArcIterator</class>
    <class kind="class">util::ReverseArcListGraph::OutgoingArcIterator</class>
    <class kind="class">util::ReverseArcListGraph::OutgoingHeadIterator</class>
    <class kind="class">util::ReverseArcListGraph::OutgoingOrOppositeIncomingArcIterator</class>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>adb271cf4bcf2de5b5bbe300d7054af29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0eba6e5899924388644dfa2258ae8929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReverseArcListGraph</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>ac553bb63399815ac609976e5a3bd8732</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReverseArcListGraph</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a885571656abd56593b2edbebb451d67f</anchor>
      <arglist>(NodeIndexType num_nodes, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>OppositeArc</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>aa3306c75dd28ca037205f382ac832b2a</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>OutDegree</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>ad25429b667ebd6e2ac662b76f3e02eae</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>InDegree</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>aeffdaa7d0a6c7b6355ee1dab33524961</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingArcIterator &gt;</type>
      <name>OutgoingArcs</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>ac8923133838003d7a7ffb4500f0d4ffa</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; IncomingArcIterator &gt;</type>
      <name>IncomingArcs</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>ad0e7957e515d9c50f931c00166d099ce</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingOrOppositeIncomingArcIterator &gt;</type>
      <name>OutgoingOrOppositeIncomingArcs</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a104172ed25aa4cea18cd3a5c2187d4c7</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OppositeIncomingArcIterator &gt;</type>
      <name>OppositeIncomingArcs</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a3cd1d1d0e50aaa2f30817db44cca8881</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingArcIterator &gt;</type>
      <name>OutgoingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a60d3a435f90e2c963047cc6d8c6ad363</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; IncomingArcIterator &gt;</type>
      <name>IncomingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a1a89c1efcf87cce6cec110126eb05641</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingOrOppositeIncomingArcIterator &gt;</type>
      <name>OutgoingOrOppositeIncomingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a96a609a53497ca38517dba5c277c7798</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OppositeIncomingArcIterator &gt;</type>
      <name>OppositeIncomingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a1e345c79e59f71e088f4876be93a903d</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingHeadIterator &gt;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a28d6f97b2135e9d51bad632c2556fa56</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a2fdb48f771da93712d9386c60615cf04</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Tail</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>ac7b475304d3677d4a29c676e64c3e09c</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReserveNodes</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>ae7734e3c4b1930b2859b4813bf6e238b</anchor>
      <arglist>(NodeIndexType bound) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReserveArcs</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a6409e1c967f2062aa83b4bde26a931f1</anchor>
      <arglist>(ArcIndexType bound) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNode</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>aadf05a4b2729e2844c3251d82b9e862c</anchor>
      <arglist>(NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>AddArc</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a79291a548af693328d0e4e8f64cdc745</anchor>
      <arglist>(NodeIndexType tail, NodeIndexType head)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Build</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a25d91ab3a2ced7900dd2f5cbcf1ed587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Build</name>
      <anchorfile>classutil_1_1ReverseArcListGraph.html</anchorfile>
      <anchor>a52c31a4ce66ba0c4a24cbe884fda377c</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0f551c921fa0b5aaa334a6e36f61db4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aefb468e4d4a3128c91b3bad9f5b314c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; NodeIndex &gt;</type>
      <name>AllNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a32ba4a5ca9a4b89f750eb2dc56518b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndex &gt;</type>
      <name>AllForwardArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abcfd7c21143e5ed38573c0dd60826dd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abf853acea86e01356f53055f77661770</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a2097ccda3b1ad27e2c82166979018bda</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>node_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a463d57480c9563a7a707c5d0928c9946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>arc_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a92ffd852b2ab2e5241f9832e71a2de71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab731ca5c638e7b1b0a2c459c94a90f55</anchor>
      <arglist>(NodeIndexType node_capacity, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeCapacities</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa3bd051d1e141b09dda17aa9b5f24f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a07214b96597069d781e27b1dd17ef83e</anchor>
      <arglist>(const A &amp;a, B *b)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a346b8a5811f0e287e1ebce2de2c1ad28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab1292c82a3f43be3bd57b63a05fe0214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad5b77846f77c2771e840820812ad5521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeCumulativeSum</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ac47030fcb75a3220f8cf9ed79697056e</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BuildStartAndForwardHead</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a63fd586eed6c345866317e2f0faf377e</anchor>
      <arglist>(SVector&lt; NodeIndexType &gt; *head, std::vector&lt; ArcIndexType &gt; *start, std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a473db46afec1eabf0762411830dee30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>node_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a424bd34a9767e7edeaf3a60ecd3cb000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>af16f99d41856a7b22ae8a226ef09abff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>arc_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a895e891d1ad52ce3efcfeb7ba11194c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>const_capacities_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa980e5526b9ded17a83928fc339c71e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcMixedGraph</name>
    <filename>classutil_1_1ReverseArcMixedGraph.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>BaseGraph&lt; NodeIndexType, ArcIndexType, true &gt;</base>
    <class kind="class">util::ReverseArcMixedGraph::IncomingArcIterator</class>
    <class kind="class">util::ReverseArcMixedGraph::OppositeIncomingArcIterator</class>
    <class kind="class">util::ReverseArcMixedGraph::OutgoingArcIterator</class>
    <class kind="class">util::ReverseArcMixedGraph::OutgoingOrOppositeIncomingArcIterator</class>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>adb271cf4bcf2de5b5bbe300d7054af29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0eba6e5899924388644dfa2258ae8929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReverseArcMixedGraph</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>af10d16de8964a7abf555759bb9f257aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReverseArcMixedGraph</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>a6735921f3354efcf696ad98e4cf7c2c1</anchor>
      <arglist>(NodeIndexType num_nodes, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>OutDegree</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>addeb94680d05c79b1be501edc5823209</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>InDegree</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>ae5ea8fcc78ca9b142e07665d447ad2bd</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingArcIterator &gt;</type>
      <name>OutgoingArcs</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>a6e39d187175616e99c958a81bcd1831f</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; IncomingArcIterator &gt;</type>
      <name>IncomingArcs</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>a4923ba6abf7a599e833becfa82750a86</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingOrOppositeIncomingArcIterator &gt;</type>
      <name>OutgoingOrOppositeIncomingArcs</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>a9cdfbde174efbc5747d58330dbd85e86</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OppositeIncomingArcIterator &gt;</type>
      <name>OppositeIncomingArcs</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>a2e920761999c90a1b266b96d609d8464</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingArcIterator &gt;</type>
      <name>OutgoingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>a41eeddd2d42998985b295d05fc04439e</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; IncomingArcIterator &gt;</type>
      <name>IncomingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>ac3108bd8dd239c6adb32b30c16c5fc70</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingOrOppositeIncomingArcIterator &gt;</type>
      <name>OutgoingOrOppositeIncomingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>a09e6c29120c6f7f0a84fb4c02af0f0ee</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OppositeIncomingArcIterator &gt;</type>
      <name>OppositeIncomingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>ae53769b81e0791bccfdf1187d4fcf7f6</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; NodeIndexType const  * &gt;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>aff7c6ef395dfc941edac13b29e154b54</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>OppositeArc</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>a86effffe3928593a808edf548dd6b832</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>a5ebe11f2abcd78ad1f5606e27d1688bb</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Tail</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>a351cbc3c0c79e22f010e697bf65d7100</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReserveArcs</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>ad39d8df784046ecfb6192ac0a0b5da44</anchor>
      <arglist>(ArcIndexType bound) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNode</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>aab290c8728947d80dbf9fec6e320c3d1</anchor>
      <arglist>(NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>AddArc</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>a362fa49b586ff223477aab7a53d17f14</anchor>
      <arglist>(NodeIndexType tail, NodeIndexType head)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Build</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>a06e56a529396bbd2595f5c32c2f73142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Build</name>
      <anchorfile>classutil_1_1ReverseArcMixedGraph.html</anchorfile>
      <anchor>aba7702cbe355fc0d1c7d1a67d07ba2bc</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0f551c921fa0b5aaa334a6e36f61db4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aefb468e4d4a3128c91b3bad9f5b314c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; NodeIndex &gt;</type>
      <name>AllNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a32ba4a5ca9a4b89f750eb2dc56518b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndex &gt;</type>
      <name>AllForwardArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abcfd7c21143e5ed38573c0dd60826dd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abf853acea86e01356f53055f77661770</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a2097ccda3b1ad27e2c82166979018bda</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>node_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a463d57480c9563a7a707c5d0928c9946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>arc_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a92ffd852b2ab2e5241f9832e71a2de71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReserveNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a69a71cbb575b13bde9899f5a6a217139</anchor>
      <arglist>(NodeIndexType bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab731ca5c638e7b1b0a2c459c94a90f55</anchor>
      <arglist>(NodeIndexType node_capacity, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeCapacities</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa3bd051d1e141b09dda17aa9b5f24f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a07214b96597069d781e27b1dd17ef83e</anchor>
      <arglist>(const A &amp;a, B *b)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a346b8a5811f0e287e1ebce2de2c1ad28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab1292c82a3f43be3bd57b63a05fe0214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad5b77846f77c2771e840820812ad5521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeCumulativeSum</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ac47030fcb75a3220f8cf9ed79697056e</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BuildStartAndForwardHead</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a63fd586eed6c345866317e2f0faf377e</anchor>
      <arglist>(SVector&lt; NodeIndexType &gt; *head, std::vector&lt; ArcIndexType &gt; *start, std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a473db46afec1eabf0762411830dee30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>node_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a424bd34a9767e7edeaf3a60ecd3cb000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>af16f99d41856a7b22ae8a226ef09abff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>arc_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a895e891d1ad52ce3efcfeb7ba11194c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>const_capacities_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa980e5526b9ded17a83928fc339c71e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::ReverseArcStaticGraph</name>
    <filename>classutil_1_1ReverseArcStaticGraph.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>BaseGraph&lt; NodeIndexType, ArcIndexType, true &gt;</base>
    <class kind="class">util::ReverseArcStaticGraph::IncomingArcIterator</class>
    <class kind="class">util::ReverseArcStaticGraph::OppositeIncomingArcIterator</class>
    <class kind="class">util::ReverseArcStaticGraph::OutgoingArcIterator</class>
    <class kind="class">util::ReverseArcStaticGraph::OutgoingOrOppositeIncomingArcIterator</class>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>adb271cf4bcf2de5b5bbe300d7054af29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0eba6e5899924388644dfa2258ae8929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReverseArcStaticGraph</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a98bf967d563272b62a207d179aae5973</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReverseArcStaticGraph</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>ac9b88c60dccd3b6aafa96df2de557a23</anchor>
      <arglist>(NodeIndexType num_nodes, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>OutDegree</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>aa9ec825f0a93d13a5c93e82b42cc1088</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>InDegree</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>aacb8fc16527ae0e30a874393a94cd8ee</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingArcIterator &gt;</type>
      <name>OutgoingArcs</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>af7ab2d9151c0b94ecb6569a369ce00b5</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; IncomingArcIterator &gt;</type>
      <name>IncomingArcs</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a53ad65ff7f20bd4a6fb2494ed6dd2490</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingOrOppositeIncomingArcIterator &gt;</type>
      <name>OutgoingOrOppositeIncomingArcs</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a383413966b4ee3790931137c44916bd3</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OppositeIncomingArcIterator &gt;</type>
      <name>OppositeIncomingArcs</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a1708f7e290d33a29936556e7453a5092</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingArcIterator &gt;</type>
      <name>OutgoingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a50115c615a3af5b9d50afc51a75541c3</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; IncomingArcIterator &gt;</type>
      <name>IncomingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>aa040d7a9d3e8af80b21f9ee07f6bae34</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingOrOppositeIncomingArcIterator &gt;</type>
      <name>OutgoingOrOppositeIncomingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a61603e21e903115daf755e297bf652bb</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OppositeIncomingArcIterator &gt;</type>
      <name>OppositeIncomingArcsStartingFrom</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a486c54240d6d491740aac1a4bd574f48</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; NodeIndexType const  * &gt;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a0ff94f595442b19c2de253a2685fe27f</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>OppositeArc</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a2f8dc1bf8f2242b19aacc876301365a6</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a72e8ed03fe3f8ff27d156622a86900aa</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Tail</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a12cf8d1312236cac409d9a1a934c1ad3</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReserveArcs</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a950e85c43ad31af8dd24a15e895c77c7</anchor>
      <arglist>(ArcIndexType bound) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNode</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>af83383a45904db07bed45418199ff2dc</anchor>
      <arglist>(NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>AddArc</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a0b801f8cece53ce666b90be4a8b76ae6</anchor>
      <arglist>(NodeIndexType tail, NodeIndexType head)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Build</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a485803d141f9c80beaaae7094548d672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Build</name>
      <anchorfile>classutil_1_1ReverseArcStaticGraph.html</anchorfile>
      <anchor>a590ee70b96ce87433ba89b067495aa5f</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0f551c921fa0b5aaa334a6e36f61db4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aefb468e4d4a3128c91b3bad9f5b314c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; NodeIndex &gt;</type>
      <name>AllNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a32ba4a5ca9a4b89f750eb2dc56518b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndex &gt;</type>
      <name>AllForwardArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abcfd7c21143e5ed38573c0dd60826dd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abf853acea86e01356f53055f77661770</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a2097ccda3b1ad27e2c82166979018bda</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>node_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a463d57480c9563a7a707c5d0928c9946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>arc_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a92ffd852b2ab2e5241f9832e71a2de71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReserveNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a69a71cbb575b13bde9899f5a6a217139</anchor>
      <arglist>(NodeIndexType bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab731ca5c638e7b1b0a2c459c94a90f55</anchor>
      <arglist>(NodeIndexType node_capacity, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeCapacities</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa3bd051d1e141b09dda17aa9b5f24f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a07214b96597069d781e27b1dd17ef83e</anchor>
      <arglist>(const A &amp;a, B *b)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a346b8a5811f0e287e1ebce2de2c1ad28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab1292c82a3f43be3bd57b63a05fe0214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad5b77846f77c2771e840820812ad5521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeCumulativeSum</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ac47030fcb75a3220f8cf9ed79697056e</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BuildStartAndForwardHead</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a63fd586eed6c345866317e2f0faf377e</anchor>
      <arglist>(SVector&lt; NodeIndexType &gt; *head, std::vector&lt; ArcIndexType &gt; *start, std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a473db46afec1eabf0762411830dee30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>node_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a424bd34a9767e7edeaf3a60ecd3cb000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>af16f99d41856a7b22ae8a226ef09abff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>arc_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a895e891d1ad52ce3efcfeb7ba11194c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>const_capacities_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa980e5526b9ded17a83928fc339c71e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevGrowingArray</name>
    <filename>classoperations__research_1_1RevGrowingArray.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RevGrowingArray</name>
      <anchorfile>classoperations__research_1_1RevGrowingArray.html</anchorfile>
      <anchor>a2140cdbff14a28d0fb0d30363255f075</anchor>
      <arglist>(int64 block_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevGrowingArray</name>
      <anchorfile>classoperations__research_1_1RevGrowingArray.html</anchorfile>
      <anchor>a3e0d45ffcf2c17ae2c7f6ec631fea636</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>At</name>
      <anchorfile>classoperations__research_1_1RevGrowingArray.html</anchorfile>
      <anchor>a1dfca41dc5907bcf0fde8b5c37c4c8c2</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevInsert</name>
      <anchorfile>classoperations__research_1_1RevGrowingArray.html</anchorfile>
      <anchor>aa66c900368ad9fa24d3a256493792330</anchor>
      <arglist>(Solver *const solver, int64 index, T value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevImmutableMultiMap</name>
    <filename>classoperations__research_1_1RevImmutableMultiMap.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RevImmutableMultiMap</name>
      <anchorfile>classoperations__research_1_1RevImmutableMultiMap.html</anchorfile>
      <anchor>afbd7546d603df82059ed3b8a13a3241a</anchor>
      <arglist>(Solver *const solver, int initial_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevImmutableMultiMap</name>
      <anchorfile>classoperations__research_1_1RevImmutableMultiMap.html</anchorfile>
      <anchor>af8f8619f77a20868de764b036066dc3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_items</name>
      <anchorfile>classoperations__research_1_1RevImmutableMultiMap.html</anchorfile>
      <anchor>ae509969cf05f560f829ce4e0ed3aab1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ContainsKey</name>
      <anchorfile>classoperations__research_1_1RevImmutableMultiMap.html</anchorfile>
      <anchor>a55a49c7e6673d8ec5a30b3255899a23a</anchor>
      <arglist>(const K &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>FindWithDefault</name>
      <anchorfile>classoperations__research_1_1RevImmutableMultiMap.html</anchorfile>
      <anchor>a84ccc9de1e12d064f1ccf77e344dd86b</anchor>
      <arglist>(const K &amp;key, const V &amp;default_value) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Insert</name>
      <anchorfile>classoperations__research_1_1RevImmutableMultiMap.html</anchorfile>
      <anchor>a00d0083447f546e8a43744ed5063e98d</anchor>
      <arglist>(const K &amp;key, const V &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevIntSet</name>
    <filename>classoperations__research_1_1RevIntSet.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_iterator</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a5608be2b7716304454f31dda7b3d80e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevIntSet</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a256503b400735b79534bf87a3a433296</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevIntSet</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>aa332f108f9a442e8765e460e7f53c496</anchor>
      <arglist>(int capacity, int *shared_positions, int shared_positions_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevIntSet</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>ab7b2ae30393111b4904bc1732ea5ae91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a7e1746bc4ae813f8109cffed9c227664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Capacity</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a2cc5cf695691d208027e25fa2483db5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>af0d0ba3d28661d12114afbb50dccfa45</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>RemovedElement</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a6ded4dd9cceb7eeffb2412df5b5187a4</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Insert</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a5cf1d68f60f01b5e545fa23d74386a46</anchor>
      <arglist>(Solver *const solver, const T &amp;elt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Remove</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a381f8a2a726c51ac8dca0690dc94145d</anchor>
      <arglist>(Solver *const solver, const T &amp;value_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a7f8643d2a1bec62b4b1d4d0ac99a3cb5</anchor>
      <arglist>(Solver *const solver, const T &amp;value_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a593b6d59b93e2284bbc16af121a67a98</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>ab40a309276a1d22ec7fe932c120934a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a87f5328273f94c5294fdbd9f3e46201b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoInserted</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a249b8be47f098c8b42b61876ed5c300f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RevIntSet&lt; int &gt;</name>
    <filename>classoperations__research_1_1RevIntSet.html</filename>
    <member kind="typedef">
      <type>const int *</type>
      <name>const_iterator</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a5608be2b7716304454f31dda7b3d80e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevIntSet</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a256503b400735b79534bf87a3a433296</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevIntSet</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>aa332f108f9a442e8765e460e7f53c496</anchor>
      <arglist>(int capacity, int *shared_positions, int shared_positions_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevIntSet</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>ab7b2ae30393111b4904bc1732ea5ae91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a7e1746bc4ae813f8109cffed9c227664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Capacity</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a2cc5cf695691d208027e25fa2483db5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>af0d0ba3d28661d12114afbb50dccfa45</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemovedElement</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a6ded4dd9cceb7eeffb2412df5b5187a4</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Insert</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a5cf1d68f60f01b5e545fa23d74386a46</anchor>
      <arglist>(Solver *const solver, const int &amp;elt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Remove</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a381f8a2a726c51ac8dca0690dc94145d</anchor>
      <arglist>(Solver *const solver, const int &amp;value_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a7f8643d2a1bec62b4b1d4d0ac99a3cb5</anchor>
      <arglist>(Solver *const solver, const int &amp;value_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a593b6d59b93e2284bbc16af121a67a98</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>ab40a309276a1d22ec7fe932c120934a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a87f5328273f94c5294fdbd9f3e46201b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoInserted</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a249b8be47f098c8b42b61876ed5c300f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevPartialSequence</name>
    <filename>classoperations__research_1_1RevPartialSequence.html</filename>
    <member kind="function">
      <type></type>
      <name>RevPartialSequence</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>ab273214b921b4f0f5c94d36aae19c5da</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevPartialSequence</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>a40ba6dc53519519055be43000fd4e656</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevPartialSequence</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>a0d7ecedc40cde479a0af4f8c7e94646c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumFirstRanked</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>aa44554618d3a92a242b876b18b427783</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumLastRanked</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>a3c29760912f23bd786c302a5691ddc28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>a6ba090d10665f6a66b3faff7ffc09134</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>aef9769a57cd94675879edc12cc81be2b</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankFirst</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>aedf237760f494bf43d751e390ff61c5f</anchor>
      <arglist>(Solver *const solver, int elt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankLast</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>a0ce79f61cb719fccef92124ad31d7f1b</anchor>
      <arglist>(Solver *const solver, int elt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsRanked</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>a09475886339637097cc4260c73fd25d8</anchor>
      <arglist>(int elt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>aae7f38d72ed4d3be42c55a308b6d6ab7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevSwitch</name>
    <filename>classoperations__research_1_1RevSwitch.html</filename>
    <member kind="function">
      <type></type>
      <name>RevSwitch</name>
      <anchorfile>classoperations__research_1_1RevSwitch.html</anchorfile>
      <anchor>a9cbcd58bae27fd3071ba8a28ab4a4465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Switched</name>
      <anchorfile>classoperations__research_1_1RevSwitch.html</anchorfile>
      <anchor>a645543760c52a5fa5a8b27d1d4bcafd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Switch</name>
      <anchorfile>classoperations__research_1_1RevSwitch.html</anchorfile>
      <anchor>af763ccb69c3a1d9f94227f246d9c685d</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::RoutesConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>RoutesConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>acf8c0c1c206a33598a1adf22ec39af43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutesConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a708ec9dab68a48918d20317ee2eeb4bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutesConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a910cd5c634c78b4f7496ebbdb0710a0f</anchor>
      <arglist>(const RoutesConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>RoutesConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a07107e6e4490559714e67f598f5dc6e3</anchor>
      <arglist>(const RoutesConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a9616b4554f381c785930725c4efa26b1</anchor>
      <arglist>(RoutesConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>RoutesConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>ac906a08518a22bdc77ecb56b551c9390</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>RoutesConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>ad01d19c48930b971dd7226b887b09c71</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>ab2803f84af6dd5e0001d2d0f684c7592</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a3a96c0f0aa10ebe43ae2244c64a78ffd</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a162fba0ad4785c443c76de4793dd5840</anchor>
      <arglist>(const RoutesConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>ab9bc8d2e0833773f48964e1ad95a5a7f</anchor>
      <arglist>(const RoutesConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a2c04636a8a8ff61fe36f424d82d4989a</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>af2fcd64a6a59460b16a4c4288d80a6e2</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>ab5c021a74232e20c60b0da8aaf8e069b</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a7cb2f719c82beae54dcad6a7662ed16a</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a86185387b22e8aa017c5cbe73bd43cd9</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>abfe1146ccc9b45f0c75b465e465a1e4b</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>aa649b5d02b12d1644fa24838c6e7eb05</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>aeba75ace214d57312dc1c68ffcfd6d0d</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tails_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>ad6188a63e90c028bf7d01db17ab68f30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_tails</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a0522c23b674c00249aeeb20f76f4a821</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>tails</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>ac999451b8005028f6d9980c40cc5b50e</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_tails</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a3ec99719358ad6c69af6178c32810c00</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_tails</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a9dc96a8d328728424eef7c1bc39f55e6</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>tails</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>ab1f643c6f14740a188afa86a0e2fa58c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_tails</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a11e644ad3de4c039b0e33305ab84a08e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>heads_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a6d12c7861c832016d9fe1e966ab3ffb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_heads</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a0d8a94e4dad92a92e25ff6deae5c5064</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>heads</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a5d37fd5ecf7ccd06400b8b1ddf26fc2b</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_heads</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a89e25008788a355ede317f8ed37f5d3e</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_heads</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a2a657c65614fd2013ddbcd59a116159d</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>heads</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a57b0428b6ce971792f597d0be198214a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_heads</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a135a0af61eb4d06812e95266aaaf7cb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>literals_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a399aaf0578bb74021f08cee00779d38f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>ad4d901785b5c3f64491ffd89b301c5bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a9cd602b59502cbf1b17a4ef1b143bbe9</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a24a2b81b63ebeb44e8b451b9d5133dbd</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a730a4d2d29418698249237a9dc6542e4</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a7036fdc5b463044eb61b6875f97f3a38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_literals</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a273ef0b5026940a0a5b3a902651499ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>demands_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>abe2878ef55e9ed85292ea9d4d86d100f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>abee4ed6e50c3a32bbda6218c4f27bcfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a9cf398907e3b671a4594e5554d70c977</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a1cb301f8a82a2f1c985ad0fb3bfddd6a</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a63a12f09c4bc8fdde43ac4b559763a89</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a9bf414d09754d276cfd22def447eb5e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_demands</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>aa11316cc6cbd19d3f3c6ed14945785de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_capacity</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a1ef1c7fd0ab292fdbe73f1349c4ad72e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>capacity</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>aacff77e53d0072434980333c61b82d39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_capacity</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a7ac72a8ce8d4b71770a5ed34aa84e79e</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>aa9f3001289f8819fe09292568f90d325</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutesConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>ac9dc769ea9aa7a14723f8c9392b2be28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a20868ff6445da44dc1967f8a3afa050e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutesConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a6c422af74ccf72d6f0eb8bd398ac77b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>adbdbd3b74649a6ef965ad69fb1119eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTailsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a45f350d59bb481ced9ff17e6917cdc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kHeadsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a261b47d657c736e4adae6eff7c454974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLiteralsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>acb8b933104a691e4205dfa82ab50ead9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kDemandsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>abb9f956c251d806fe4a250c03ac61199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCapacityFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>a281c1cad6b3dd7607dfbb18eaff68077</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1RoutesConstraintProto.html</anchorfile>
      <anchor>ac91d73b61ee144ff7a168c0a1c97ba12</anchor>
      <arglist>(RoutesConstraintProto &amp;a, RoutesConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RoutingModelParameters</name>
    <filename>classoperations__research_1_1RoutingModelParameters.html</filename>
    <member kind="function">
      <type></type>
      <name>RoutingModelParameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>afdad94942cbf733b3fee507f71622f14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingModelParameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a4bb0f3152e7d11541640fbf5173e7c2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingModelParameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>adaacca6ad64833a84af634b302d0346e</anchor>
      <arglist>(const RoutingModelParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a35a1ad7467c77c92554475f81ddc6e1b</anchor>
      <arglist>(const RoutingModelParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ae3393532483f41ce1eeed2e5a7d05ebe</anchor>
      <arglist>(RoutingModelParameters *other)</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a54379035b1b78c1e85904d2ed2a63f29</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a63c08f48b6de8d5134e98eb943b76ebb</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a0eba789c2b4eddce2dd347858d05801c</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a384c724a86d92fe3c0a0a9ea7b19c417</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a1b36ce4778eeedfcea39bda0667d6a48</anchor>
      <arglist>(const RoutingModelParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a7109fe9204809f7aef11758f6649f88d</anchor>
      <arglist>(const RoutingModelParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a9028b846fdac994323201f2688a584f6</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>af504378589b4a79573c9c8514756a0c1</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a36b7f3be041fed113519d0412309d0b2</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a66ef009dd5a8663497035434eae4b500</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>afac97a81405afe49c7ee22069e5f088c</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a6ccc12c866228174e6e5a1e5b7521870</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a7bd3a0b0d00956d299030f05bbfc1e8d</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>aafccec65f54eeed2a8942d1e8714674d</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_solver_parameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ab3944feb979a5bd40059d0df0c13f495</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solver_parameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a18e18b1f7b035786a7d088588c9b1e72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::ConstraintSolverParameters &amp;</type>
      <name>solver_parameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a41fba391a8dedcf4e5e92fd752833128</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::ConstraintSolverParameters *</type>
      <name>release_solver_parameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ac29b72c52181f2e70f8a7fa534037bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::ConstraintSolverParameters *</type>
      <name>mutable_solver_parameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a6832823fcad80b2ad67e987fa7ffe8c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_solver_parameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>afe6672369c7e44db9ce84e8434961b83</anchor>
      <arglist>(::operations_research::ConstraintSolverParameters *solver_parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_reduce_vehicle_cost_model</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ab51b5389c0df261b637b3b1e1de9d79c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduce_vehicle_cost_model</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ab64e41aa01a412274682e9402fc1bebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_reduce_vehicle_cost_model</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>abea7aae1148de95e0344b7ec85aa5bf8</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_callback_cache_size</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a9e294616e90daec8e41dd2ec9597ba65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>max_callback_cache_size</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a273fab71677f13bed5c14045c09e6fdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_callback_cache_size</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ab63f2fa95c48d2b50ccbcb008f0c1fad</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>af2b7c5b13fcd0918967e7ad746122179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutingModelParameters &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>abee30e8e2d8409d27fba944b8d205639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ad6d1dfc03401a626eae05eefe96fba2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutingModelParameters *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a86370068930dfd75ac7bbc2c67cfa59a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a7ec3895aebd9e70db52d9e143b6f0ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolverParametersFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a2b34e77065fab2c168410c5a5660d1ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kReduceVehicleCostModelFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a1068497c47c57423825df8185c45a613</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxCallbackCacheSizeFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a8e49da56f7912096d973085b907d69fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a3725cba34a2c4cf2f5bedae614b8f396</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a53621a310ee365c6b6c19203cc203349</anchor>
      <arglist>(RoutingModelParameters &amp;a, RoutingModelParameters &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RoutingSearchParameters</name>
    <filename>classoperations__research_1_1RoutingSearchParameters.html</filename>
    <member kind="typedef">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperators</type>
      <name>LocalSearchNeighborhoodOperators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae9c2ab5bf48d1fe4cfb7bfc0fc2bebd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingSearchParameters</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3ebebd04797082998191c4865bb61836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingSearchParameters</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>afb11d70a8d3a047f89433638fdf45151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingSearchParameters</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a55fd2cea6ee3ad51fcb8f0cdd482f2aa</anchor>
      <arglist>(const RoutingSearchParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a348b079cbf2b95ab0eab656bd9cfa7c6</anchor>
      <arglist>(const RoutingSearchParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1485493a8e00aa3da5c9e9574b720789</anchor>
      <arglist>(RoutingSearchParameters *other)</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a4038e1ff3388e520e93644997b57c95e</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa93a2ee829d31b29cf9ee110767793ec</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a51ccd81badf5fd42596a2166ad4344c5</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a73079d2984aca08a2d96b8dc5f3ecdf7</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a0129646baf0eb66a3396f0aec5fabcf3</anchor>
      <arglist>(const RoutingSearchParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a90f013ebf4dc532f613e90f5e5be41c6</anchor>
      <arglist>(const RoutingSearchParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab6665fd25f69b301974eee15a2f82b50</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1a20350a8f135fdbea7c17341aeeff94</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a9276abf5c09d1c1b617a66028888dbbe</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab00d29d082cdddd3508668cb3d228fda</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6f7593fb5f4f87fc22c997a2309e3682</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aeb15f43cd5cf087f2fa5fc8dc7fcb3b5</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aeb2580921b8ac0a78c48016e06e89250</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a615be3bb38da5680a559a6e3b0fcc816</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_local_search_operators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ac4fec1bd91425e0cab225744c8b904f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_local_search_operators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6c39d07295c8926de51b2e3853d966d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;</type>
      <name>local_search_operators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a68969abc9cbc5ddded015ed506252043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>release_local_search_operators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab95bbaddd525714f687a67e30759329a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>mutable_local_search_operators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a2c83cf50ca68658632468540023bdce7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_local_search_operators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a0644db6c5d4d21856df416804feb7c36</anchor>
      <arglist>(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators *local_search_operators)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa515396c8da2225c6337914b5039750f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa2f205b13d5e7116aea38ce188f8e582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::Duration &amp;</type>
      <name>time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1572ae0e305e616b334cad6b76e2ccf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Duration *</type>
      <name>release_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a9854f066d0463f3fb9ba685cac93adf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Duration *</type>
      <name>mutable_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6100d9b1e14b3a4d1e588029f889af32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a9db1d82a834535fbcd9cf80ada51a70c</anchor>
      <arglist>(::google::protobuf::Duration *time_limit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lns_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ac36b55a164cee49019c287405dc33f1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_lns_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae6ab26ac341f80b09d566ee2116cb2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::Duration &amp;</type>
      <name>lns_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1a45f3495d4f58c36fd81b29532ba7fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Duration *</type>
      <name>release_lns_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aab64e08f1392624e83e025827bc125d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Duration *</type>
      <name>mutable_lns_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aba239be68d8b7cf62f83139b377713c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_lns_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab42fbfb5acad14d3982cba5795060bb5</anchor>
      <arglist>(::google::protobuf::Duration *lns_time_limit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_first_solution_strategy</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aec7e131724c8eca871bc59635952372b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::FirstSolutionStrategy_Value</type>
      <name>first_solution_strategy</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af48e67ba8b79e2ea3623a7c212b9134a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_first_solution_strategy</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a27f84d3444da958ce18ce12328b8cb49</anchor>
      <arglist>(::operations_research::FirstSolutionStrategy_Value value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_local_search_metaheuristic</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a320e21fa027978349fa0e7d07b095d28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::LocalSearchMetaheuristic_Value</type>
      <name>local_search_metaheuristic</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a5b33a15f6d47c499a38178bea7665755</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_local_search_metaheuristic</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6abf775a5c0d49fb7afebd20c74ecd9c</anchor>
      <arglist>(::operations_research::LocalSearchMetaheuristic_Value value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_guided_local_search_lambda_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ac0560872ceac723e5a559ac96d7915d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>guided_local_search_lambda_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad8c0ce45e81f005ce79928c6f1088b51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_guided_local_search_lambda_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3df5206348dd8c6fc8995c9c7da5557c</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_optimization_step</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a084b288d03fec365b65ff5e5a3df3969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>optimization_step</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad9a7d3e6b7b93e94ef4bc7be2a78c465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_optimization_step</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1fc0effbfc3704123793b41259356e75</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solution_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa3e76406744121dbdaff09cf05bef998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>solution_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aed9498fcea83be6eb1a3e1c5404a8e96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solution_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae651efd1197d105d612bf5557d949174</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_unfiltered_first_solution_strategy</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a7587e88a111fad0bf7caeb261ab909eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_unfiltered_first_solution_strategy</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab3835ed60e4d5a378a7bf7260f989ccf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_unfiltered_first_solution_strategy</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a4b0db38580363eaff967d06d051237ff</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_savings_add_reverse_arcs</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6a97140f5bbb5d77c2234d87ba5b030d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>savings_add_reverse_arcs</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a2429ff72bff026987d57df8dd780c562</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_savings_add_reverse_arcs</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad5e7242eef0b350b1a4a2f67b06cc1e3</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_savings_parallel_routes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1c6c100cf977567526dd354dd6a68e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>savings_parallel_routes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3521245970cf4b5d5900817cbf1ad193</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_savings_parallel_routes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a5c2cd8aee2b77f3efd61948af727f1ed</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_depth_first_search</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a872483e58ff68789e5bf657c0e35d2c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_depth_first_search</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a188d6dd3a1437850241baebdc6afca79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_depth_first_search</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aca7cf993b90688de55ab1906ce91c508</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_full_propagation</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae8d3db0c2fa5544a52332c14eeb3b322</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_full_propagation</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6505ada2e282e5087adc51c33b50ce03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_full_propagation</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af2c8d452e2cb97eec288ae3aa1492277</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_log_search</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a26ce21f7880e813d93c037070439bd2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>log_search</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aaf476b89538a276241f4d338c62ab75f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_search</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aaf1b42a9d49d63338e1a40534adc9774</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_savings_neighbors_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a564071cf1e2ff83fe85d7f69422479bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>savings_neighbors_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6624e8fd8baf86d6d2d797c80feda0b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_savings_neighbors_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>afe2e72abc2a24addc99be960a8379757</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_cheapest_insertion_farthest_seeds_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3907ad028ff31c05f3aeed8a868628cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cheapest_insertion_farthest_seeds_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a660bd7154f1b592fbbbaa4a476a6cf84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cheapest_insertion_farthest_seeds_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad7180e2de72679a13fc07c87d4c3ec68</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_savings_arc_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa5aeb18542a8954d30d5f51784ac09c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>savings_arc_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a383d6d60d4cea3c94cdbaa0e726a3b44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_savings_arc_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a610397056479071b8d7bb14c440fe8f0</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_number_of_solutions_to_collect</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a35e37cb9c2effd7a1e5cd358ac8ed9ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>number_of_solutions_to_collect</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a428052e8aa788eb3914d4d9cc6d3b2f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_solutions_to_collect</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ac53d98084db1df02874f2f2bc58903c9</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_relocate_expensive_chain_num_arcs_to_consider</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a945eb8b8eb4e4787ba17a59b501b0edf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>relocate_expensive_chain_num_arcs_to_consider</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>afa448aadf248abb689d8fbcd1ae4ef2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_relocate_expensive_chain_num_arcs_to_consider</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa803bebd236264eadfcc41041bb1cfc4</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_cheapest_insertion_neighbors_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aebd5664630e3f8cbbfcf20ca7fb35379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cheapest_insertion_neighbors_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab15c2f8de30263f80deecfd18ffc5c8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cheapest_insertion_neighbors_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aefda3c065a20d3bf37fc7ab8e12c110a</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_log_cost_scaling_factor</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aac55bca4724b851fbca779e7478a7ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>log_cost_scaling_factor</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a488c616b0ed0fadf8fae77b20117f9b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_cost_scaling_factor</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ac361bb92350b2457cdb0bdf19b716d7b</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_savings_max_memory_usage_bytes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>afd6209900a861e0531022b851d0ada21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>savings_max_memory_usage_bytes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a34e40d6430b082da40ba360377bbc8e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_savings_max_memory_usage_bytes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a9994025ade25001367602a5f0ab28b41</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_cp_sat</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af71f7ee8d6de5a31e53fd0f87aacc73b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_cp_sat</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a612f34f61de2a9ab92c3ba6e9156c314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cp_sat</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a033aa59eccc8958a2e3f11a1c7cd6a99</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_cp</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>add9531fb1bc1b70ebbf82568b54a8432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_cp</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ac18551a293ce40ebb3fd9dfd6c702617</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cp</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af061e852cc23ec2935da9207314d31b0</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6b7f08937c3593b7cba9e6f8953ed003</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutingSearchParameters &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a469b79075b1b2930b0f0cf01df5c4acb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af55cfc340c8bc113ae339f39bb96ea7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutingSearchParameters *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a9293671b05731fa026edf1fc2983bc1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a4c19af59c051b0f41b277840af3a8331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLocalSearchOperatorsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>afa85217d35e1cd60ed48bf231af629a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTimeLimitFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad5d3500ba749436e10df70a480973339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLnsTimeLimitFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa34d9b1f0807c613bc4db29b6d7b813d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kFirstSolutionStrategyFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a7d8739943f5934fa2fb91d0be1f1c55f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLocalSearchMetaheuristicFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa6740442fcb7939d4dc96c8fdb1b5242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kGuidedLocalSearchLambdaCoefficientFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a5eff2563afd69852a6de1b13781d5c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kOptimizationStepFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6316dab0abefe4751ef5a1c635caddf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolutionLimitFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa5648799298498b0d3d4d64e7b03af22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseUnfilteredFirstSolutionStrategyFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af95f0237bac0e32f37decf70dc5a6f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSavingsAddReverseArcsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a5872bf0016424fa6f676b957d1072b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSavingsParallelRoutesFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae5b76d4f9c2ddfa783bc92abdcb09329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseDepthFirstSearchFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad031494b74e858b683fe5ef24cf6f6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseFullPropagationFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa298a77fe9be78754bf7aa775127b2bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLogSearchFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a8f7ccaba670d1cb618c1e7b235dca07c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSavingsNeighborsRatioFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af5d91b519ed85efb5658a6e929ff4071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCheapestInsertionFarthestSeedsRatioFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a98244ea3247b5cf50308709cf458a45a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSavingsArcCoefficientFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad3a6f066ba0a1d20c4ab2f556bf204af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNumberOfSolutionsToCollectFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ace771632537655c45ce15b59e28831bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRelocateExpensiveChainNumArcsToConsiderFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a2c56a2874242ce89291532ddc2189b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCheapestInsertionNeighborsRatioFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a0bc1d0fc879a4757543da7f9387d5701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLogCostScalingFactorFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a24c83cadd312b2b7c3dbfca7c630ee19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSavingsMaxMemoryUsageBytesFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>abb75713d45dab5ce9195269ff72db30b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseCpSatFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab6e3f6619d0309ebf05503b76aa06972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseCpFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a81c71dac58ad69cb3911fffe65603587</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3725cba34a2c4cf2f5bedae614b8f396</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae84554ba011e00f7f2b63e8d931d5748</anchor>
      <arglist>(RoutingSearchParameters &amp;a, RoutingSearchParameters &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators</name>
    <filename>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</filename>
    <member kind="function">
      <type></type>
      <name>RoutingSearchParameters_LocalSearchNeighborhoodOperators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae47428188eb51b3105f791f5fbac264a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingSearchParameters_LocalSearchNeighborhoodOperators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ad0cae1c922a1ac42e28d28b54ec9a7de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingSearchParameters_LocalSearchNeighborhoodOperators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a326073788f3a70c79fac807a1477ad59</anchor>
      <arglist>(const RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4c85d35217f4c46199421cc1ad5539a2</anchor>
      <arglist>(const RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a0fddc9ba2652e3db4367a2479f237177</anchor>
      <arglist>(RoutingSearchParameters_LocalSearchNeighborhoodOperators *other)</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4e9a471cf4a9a7cf26e3330f9ad84ff0</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a71a9653693abdc5b2ed036b02e8b209f</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>afefd485fb4a786b5fbc391dc899ce669</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a5611bcef0069a22d862653128185f2c5</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aaf686416a8fadfbf910677938f438c5a</anchor>
      <arglist>(const RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6f376e3b98e860a5915f80e0d54d2981</anchor>
      <arglist>(const RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4017804a6736b916028fdcb68d3c04f7</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>af28f46ea45c243df1614367a9dd6a153</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6ddd61e463211acb7159007dcc3693a4</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a9a978785c85266bc9f9260265f642c3d</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a23947bfd2e925502f9e51dc0612c7cbc</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae0ab089d75605b372262fc2bb2c28ec8</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a0aba2999d1b70afb2587c1d6475dc398</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a47d6524492476d2e6329df65709b0366</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_relocate</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a230f5cf52875b450b0e40a0f9a8e5e46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_relocate</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a72f0760c6c6518c3b614ca411438b7f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_relocate</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae3038a38ed0a060aaabc33d5630e0fd4</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_relocate_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a3070a58c12759775de03432d22b6615a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_relocate_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a0af3e1f6654ed478f27e0cc51f5840eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_relocate_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a632373dbbabddc8592b40b77e311a119</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_relocate_neighbors</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a15f9cc5fc4bef01a207fc95d64a0c132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_relocate_neighbors</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4e3227337336df48f1bb2508df1cf3e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_relocate_neighbors</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a74a52ead774585e8d56449a1975139f3</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_exchange</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a68c0111476c567ae58ec35caf3a70ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_exchange</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>adaecb96a87207e7c0c0b76ec703f82b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_exchange</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a90c84b969cb78ea44f16306d92d921ae</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_cross</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6cdae3b658db6bdb1df24f00ac32dd03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_cross</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a307eacf4e6207f272adfaaec3d41238a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cross</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a91574463e1b75d075dc50714d448cfaa</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_cross_exchange</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac781239fc4db54d70699250c1c1ffa2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_cross_exchange</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aed15e0e49c9ea20b15de19f6ccd8cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cross_exchange</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a7bcba3350c59b5d66de72500dca7f2b4</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_two_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aca7e635e800ba0079c4cab2847df61e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_two_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aa0e4f4fdb7dd0b5272eea4e0a822e7f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_two_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a481e97fd5701168fe5f284ccfcc3edaa</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_or_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a9dc4cf17f71e636d4028e45877db063a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_or_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aea610bd2a7345eb87f430fcf5f0a76f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_or_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a16d6e36b8db4ef561f7d5759d9503cd2</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_lin_kernighan</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a83bd811a7f136cec39a4b788f4352d6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_lin_kernighan</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6f7de24b072589c4f8a1b21877691516</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_lin_kernighan</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ad2ce190e3e25a559c5f40deb3fc4ff92</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_tsp_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae1def3e7542d0d477807d92f0670b697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_tsp_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a71b0753a25be3adc76246eaecc63f309</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_tsp_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aa5a14c23b0a5141fc9b39d63f93c46cd</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_make_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a9a5970fbf9944235e0b53d59e3727fe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_make_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aaaed915d0acee86ec00d8b4ccd9b838e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_make_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ad531e75dbd4e5c7c755b11e74fbeb32e</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_make_inactive</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac30a897b3b86645e651543c0a1f353aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_make_inactive</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac5880b230b7a3a1bc68e515ab5f4b431</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_make_inactive</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a5be3bccafc6e66071ffddf921c3d7fc7</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_make_chain_inactive</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>af096601661641aab74d3de22b97b58a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_make_chain_inactive</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a49d5206fe2a24d7971ebd88d9257ed1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_make_chain_inactive</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>af38652e8facbab6173863a7c4978e82e</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8f40cf916624c2a3bf05a7a2049133c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac5550d3ba24c30c9a51b5c5c3153ad58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8d98de205c74b06b9d36a2c653a7b808</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_extended_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6f3735b4f814b78851ea96915b64d339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_extended_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aed4dedd3c764cfe42a3f691ac8447571</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_extended_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a562e6ab7a0131f5014edc0430c9b5f69</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_path_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a958c1b72b739d677d9e08963057e007b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_path_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae09f2d161d225893aea8854d76d295c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_path_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a531f81a95ff15f041547c649368be42a</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_full_path_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aa8017ac4bce6d07a1404ba5f03ae6451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_full_path_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a059e0bbaf042e908b507f6d00c0d1673</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_full_path_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6f050abc08b3161533f1e82c1f6a8457</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_tsp_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a497c1baca581a7284915872af903606b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_tsp_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>adc00bbb17a79a673c89f759b6d0a8150</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_tsp_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>afed9e3f369e1c1d602e61ebae5c421ee</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_inactive_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a9eea49b82dc1d001a3d4c031f9eed4c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_inactive_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a86b1e8fa66fe1541f228bfa4d4d1879b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_inactive_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a2c51705e431db3ddfc16d83df127baad</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_node_pair_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a1590182483cd181f6099145529b0e06b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_node_pair_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a3a1d40654033e8a4da601d5c7d537ab9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_node_pair_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aba362f929446a16fc7aa21580b90e8ce</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_relocate_and_make_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a5b99f531a6bcc0f05ad1b541143352c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_relocate_and_make_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac3adc8ef73aef7fe39636aa76786a352</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_relocate_and_make_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a46814098b9fb77510884dbb40d473496</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_exchange_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a107da49b01f17cddc8c9951c576f3ddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_exchange_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ad76980e005b4f8a8443b1596a11ee983</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_exchange_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a3d80b55ab5a050a5ed346165ed42fa48</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_relocate_expensive_chain</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4590615f891473567ba449cdc22f4aee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_relocate_expensive_chain</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a95755e42abde9ebd94ec988c1ac224e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_relocate_expensive_chain</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a7204e83642c4d2d75c743c5d98b4163a</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_light_relocate_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a909303a6dabf36773b2fbe04867691cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_light_relocate_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a64d68c203000cd83e8498ebb9abfb267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_light_relocate_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a94ad5e84bc837ff15d2574a76c545d53</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_relocate_subtrip</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>af74a292cc582ce4ee9ff6cae5eab246f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_relocate_subtrip</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a1a8ae6fe7218b64f428710f9bd0080e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_relocate_subtrip</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aafd303be0b8ae647eaa469c0b1c9bbc0</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_exchange_subtrip</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4015a578936b92ad9a09489afb8a6533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_exchange_subtrip</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a947a41c9df467f957c8b108a8c1f479d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_exchange_subtrip</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae62ae1c64ba2a30b57bca4fe1d95a5fe</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>af25be871daf60885fe09d2b354fc7ea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8169591c4680b5573a604f12c19ccd26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a07b454ea900a54b27d874c23d5eab0f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8df6cd486de00caf9f62a7c65e1cb0ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a2e6fcbf2f106f7c3b83ed23980c70671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRelocateFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8957561323597e8ec40096aa5021bd7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRelocatePairFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac8d6803e7aa0a43599c2d198fb16c033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRelocateNeighborsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ab17920abb6adc2871e96c8268559a219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseExchangeFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aa3518b044136521b3db52c1a154c1f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseCrossFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae40afdad397e6dbefeabcb8e837c8d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseCrossExchangeFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a25fcf132549c0f7f0b4fd3918b18ced2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseTwoOptFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac9d7a72c0e8e59daea9570f0cce26d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseOrOptFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a91f80509715f5bc632a1b5ddc1b49342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseLinKernighanFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a361877f45c960f129aac9082ce4ab69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseTspOptFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a425914c72c81c29cec0a438bc34c226e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseMakeActiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8050a9d716d38b8635f5f42b17bf33f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseMakeInactiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ad9969a97f659c5eb0258890ecc7e68f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseMakeChainInactiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a26a7a1a210a1223e8ac1352fb95fc814</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseSwapActiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4b6cfeb00e79f918b7835c4ea5301194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseExtendedSwapActiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ad76434ed05a01c38b75d86cef4e63f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUsePathLnsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4abfc166779e1600a0565aafb475b8fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseFullPathLnsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8e68c44e5512969e9a1e68ed27075ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseTspLnsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>afa94a22dd191bcfcbaf6b26a0c077eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseInactiveLnsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae8ad375f52f717d5a2d2e84b4efea16c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseNodePairSwapActiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a425944d792011d74e2d9412156b69c72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRelocateAndMakeActiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ab4370ae401df335370ec65e48989b4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseExchangePairFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a0524d136bbf2f6398c4c110bf7e1c43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRelocateExpensiveChainFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a1079943d12df6125c91c1a6eb55933ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseLightRelocatePairFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a496f5775eb3e789fa203f1713db74d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRelocateSubtripFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a124ce0bf1f707e09480d477e174a697a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseExchangeSubtripFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a3881a1d5a28948206cccb19fc1afc423</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a3725cba34a2c4cf2f5bedae614b8f396</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>acf809ead2fb840544f259378908a3e75</anchor>
      <arglist>(RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;a, RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::SatParameters</name>
    <filename>classoperations__research_1_1sat_1_1SatParameters.html</filename>
    <member kind="typedef">
      <type>SatParameters_VariableOrder</type>
      <name>VariableOrder</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a57f2442d6b42157926aeacfac88ef7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SatParameters_Polarity</type>
      <name>Polarity</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a23c9f2eaf05f470e387cdc82528cb1f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SatParameters_ConflictMinimizationAlgorithm</type>
      <name>ConflictMinimizationAlgorithm</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a741c32c1eee2e8c92074da63c3a101b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SatParameters_BinaryMinizationAlgorithm</type>
      <name>BinaryMinizationAlgorithm</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3935f8c53db1e05ff6a813d9636b3232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SatParameters_ClauseProtection</type>
      <name>ClauseProtection</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1c601aefbe23b3e8797c4e0ba93017a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SatParameters_ClauseOrdering</type>
      <name>ClauseOrdering</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a233c9a666d0c3e012b079c0465b00790</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SatParameters_RestartAlgorithm</type>
      <name>RestartAlgorithm</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa939e5e33b3c280a50d902d01c6dbb0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SatParameters_MaxSatAssumptionOrder</type>
      <name>MaxSatAssumptionOrder</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8e87f43c84566548d51c94adbfd9dfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SatParameters_MaxSatStratificationAlgorithm</type>
      <name>MaxSatStratificationAlgorithm</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4b5b89fbef56678b4897f57c53963a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SatParameters_SearchBranching</type>
      <name>SearchBranching</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3ebc49c3ff673e80e7f9815a7b7a116a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SatParameters</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af4d8f5e09bbec71ebd9ee03c8ef5a120</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SatParameters</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0bdde063de9e457141af35f04dd8ebf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SatParameters</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa44f94048ae596b4fdd88e39d6564d05</anchor>
      <arglist>(const SatParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>SatParameters &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0967633b9de4be2869282456e56c5064</anchor>
      <arglist>(const SatParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4989838448ff19efcdda63bff1d28860</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>inline ::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0957a9798bf5266a0ee61d76ce364eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7594cd5cfdca68f080e03c83d4dae5b5</anchor>
      <arglist>(SatParameters *other)</arglist>
    </member>
    <member kind="function">
      <type>SatParameters *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3c252cb65df7d764af952eacadee60df</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>SatParameters *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>acd1d8a1dc86d4c0e02117cbb9e3f674d</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ada7a766ae7013e03ae3c90634af38d22</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a983f1d5469855684789e594c76f6ff5e</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5d0fc3a39a124846c7c8b40139cc80c0</anchor>
      <arglist>(const SatParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aeee4f4a3d73f9ef2a1dcd26ae312b5bc</anchor>
      <arglist>(const SatParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a19785c82a2483991b95b3ffbcd4c2d60</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8c3459512aaab547b347409cc325cda2</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a49bb75e2befe21afa0307b7d0c0452b0</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af4a604adc8e1840cd94d6de32cb0e2d3</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a39019f6e657462912af22ba5d6bb90df</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9ca12b6a1ff8f10f85559b0416440463</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac73a18b3427663e2549d5e21c9b909e3</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0401247b7ccc60f440834f79400577c2</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>restart_algorithms_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a75ea12358ac15a525596aa39da3bf603</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a17f2516b6cb73932b6431a467754c97f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::SatParameters_RestartAlgorithm</type>
      <name>restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6f1eea27610a9744333457be0510443f</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4595a19a4713f27b81d97b3a07b88338</anchor>
      <arglist>(int index, ::operations_research::sat::SatParameters_RestartAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a649423537b705b6efaea2c2049bffa58</anchor>
      <arglist>(::operations_research::sat::SatParameters_RestartAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; int &gt; &amp;</type>
      <name>restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>adde98dc970f6376b3548d1b3d74cc6ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; int &gt; *</type>
      <name>mutable_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6145a44b08812a703c9b205c8f7f3567</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_default_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4f9e587b77d231773ca277bff246beff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_default_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3b5a81677e6cc163c3913e9f83ae3d63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>default_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3631c23795ee76fb52cd04798a2dd415</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_default_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3f35c980529ab98b1a27395e28410ca0</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_default_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac930d4c88c8dd62f5ebed21d307a53c3</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_default_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad460bcf19bcfb1cf9e7d36cc832f5a6e</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>mutable_default_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aeca983c469ec5a7c9a155040bf790fe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::string *</type>
      <name>release_default_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad52b0ed823c5c768b125c9568bf5a379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_default_restart_algorithms</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4fcefde6fc8457f40a5b646e6cd62669</anchor>
      <arglist>(::std::string *default_restart_algorithms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_preferred_variable_order</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad9cfcec2147dca61c8e74a54f69edbad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_preferred_variable_order</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a13fa94fe576a74c66201757ebfb7ad5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::SatParameters_VariableOrder</type>
      <name>preferred_variable_order</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8dc12c4b807995d1aa4627e447b43877</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_preferred_variable_order</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a46a41f7be959128859f9f14ddc5f097d</anchor>
      <arglist>(::operations_research::sat::SatParameters_VariableOrder value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_max_sat_assumption_order</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa7650618aa4fe4d337f7646c339891d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_sat_assumption_order</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab012debdeac7f661961fce1b41a2a34f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::SatParameters_MaxSatAssumptionOrder</type>
      <name>max_sat_assumption_order</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3b4bcbab0e1731232d2c0a443d2d7119</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_sat_assumption_order</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa14ee618146695101ef7e6bfd69b0477</anchor>
      <arglist>(::operations_research::sat::SatParameters_MaxSatAssumptionOrder value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_random_branches_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a69ed15ec6026dfa46c8c8da6da848931</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_random_branches_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a524f65ee1c15bd43e8fa6d24e83e51bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>random_branches_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac54298c32a174441baaedbc174e56dc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_random_branches_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2d67ce107021e88c3c156d5a244ed62b</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_random_polarity_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a14917e5d77a88b0557aef5b6d73d721a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_random_polarity_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa293c388ba7c6f8fe9e1f90e1767da1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>random_polarity_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a980dd0dad9c150aeb156f26d8481b19d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_random_polarity_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a830be06bc76d1cfc2de6f1e2d8b350a5</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_pb_resolution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a452ba56aa4b446b26b702b8fd5a0cbc2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_pb_resolution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6cecd5c3387027dc79887afc37a1debe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_pb_resolution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7d726d6194c36ed64e583c496df7f395</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_pb_resolution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac5992a1984d9a84c783d833e943d6b87</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_minimize_reduction_during_pb_resolution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5c603dafeb96eed6a014658d88f0e920</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_minimize_reduction_during_pb_resolution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8c51fad5c136b7b6cf5ed0c49ace71ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minimize_reduction_during_pb_resolution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4dfa3625510be333847f19ecd1239a41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_minimize_reduction_during_pb_resolution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac948afe4059f6f36eb496e78335cb3ca</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_max_sat_reverse_assumption_order</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>afd5d859471f19b413da081a9533502c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_sat_reverse_assumption_order</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a102f9e3b46404f564525c2fd5131c217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>max_sat_reverse_assumption_order</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a483db0e7475b907348fae889ca7009a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_sat_reverse_assumption_order</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab0d636c2904b2819bb0aa6262b135a65</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_overload_checker_in_cumulative_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad018b89dea2159e6a881a6a96a6514ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_overload_checker_in_cumulative_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0a9db31587a59f4ffaa4dbb174df4424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_overload_checker_in_cumulative_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6ecaf50307219f2da780c0d94fca721d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_overload_checker_in_cumulative_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aec673646ee9ca4e2a72d531286640d0d</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_clause_cleanup_protection</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a93dc8db0c3ef1d4cbe06a81b635976eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_clause_cleanup_protection</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a27a2985040ab2fd525b837113294642d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::SatParameters_ClauseProtection</type>
      <name>clause_cleanup_protection</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab68a3e3c275ec350b98d747cc3c68dec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_clause_cleanup_protection</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1a21dd120b5c1811a15027ebb7e4c846</anchor>
      <arglist>(::operations_research::sat::SatParameters_ClauseProtection value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_clause_cleanup_ordering</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5ada19dd0a4d348ca4c768706688035d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_clause_cleanup_ordering</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8efeb31ff478af53dece575ddf3712e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::SatParameters_ClauseOrdering</type>
      <name>clause_cleanup_ordering</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4e07b1df49807ae6984a3cec5e912890</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_clause_cleanup_ordering</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a39475d439aa38ebe84bbfa3f68ae47aa</anchor>
      <arglist>(::operations_research::sat::SatParameters_ClauseOrdering value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_erwa_heuristic</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4d9114d2ac6f5686f37312a2dbd32cb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_erwa_heuristic</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a735dde6e294058b8d4f5c6116a51eaac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_erwa_heuristic</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8ea993e459628622948ba2f5a8319c5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_erwa_heuristic</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1031ae7a2d2fa7e98a94a5e9ddf4f573</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_also_bump_variables_in_conflict_reasons</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac159de93968b297fac81c7948991a6a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_also_bump_variables_in_conflict_reasons</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab875be7f29ab25ca13c091f4e4fc5f71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>also_bump_variables_in_conflict_reasons</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aff8890384ab9957b9a6582e163b5868d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_also_bump_variables_in_conflict_reasons</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a327dccfe7d0cc96dbc86f207134e1a9d</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_blocking_restart</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3df2f36e7b7b63d1922738aec516c726</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_blocking_restart</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a287555f322246bd57878f7632d12fb2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_blocking_restart</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a20f03fe926f9912336bfecde38b3d431</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_blocking_restart</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5b13453f8b580ed7b8e8369f653d5e7a</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_log_search_progress</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae6773193d40ed6c682adcf527716b69b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_log_search_progress</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2bda86fe30714cd506bce3de4f32a395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>log_search_progress</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9bb66488b1e39abfd99c601d13d73ffe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_search_progress</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac1a2d9752fe2878fe265b2b68a57c42c</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_strategy_change_increase_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af49c58eddefe486c4d3205d8c59a0f34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_strategy_change_increase_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0509d6fd2e4a2ae577e659e4f41d61cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strategy_change_increase_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a317783e0b74181b6562207fa709979a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_strategy_change_increase_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a32541e21965ec9413a7aa7c3377b162f</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_num_conflicts_before_strategy_changes</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a657b8b1a3d50afc4be6175d2a244f4d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_num_conflicts_before_strategy_changes</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae6b2df2e56502a6cde03525959bf8261</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>num_conflicts_before_strategy_changes</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4949c084392f4007e76d6c91b598a0c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_conflicts_before_strategy_changes</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab954d5ba1420dffde08f95a737070b05</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_search_branching</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>abb18c00f70cd1ba260c5972418c13f64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_search_branching</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab1037626aa53652711ac3042db4dee13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::SatParameters_SearchBranching</type>
      <name>search_branching</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac349e5bab7c4d219226d6fa0b3640cb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_search_branching</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a26ea5d1445e6356d6f0534be32aba7ec</anchor>
      <arglist>(::operations_research::sat::SatParameters_SearchBranching value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_initial_variables_activity</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a560f9b043fbbc8ee287035956760b6ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_initial_variables_activity</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4da5f70705c61d1f4a95d18ffa2bd75c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>initial_variables_activity</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a729c68650b549aea62fe937dc9a326be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_initial_variables_activity</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a304bd45d3c310cdc540b18bd754e8113</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_exploit_best_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9de3c5f96b0ca544acd7fb20ba31ad0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_exploit_best_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3443567f3260b0fd825d334b27e09e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exploit_best_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0ae0b2bc8aa340d565d20a48ca2993aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_exploit_best_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2b0c09acebdc1829d7df993790ec79d6</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_optimize_with_core</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>add5c5873bb09ddc8e12346ea1ba813d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_optimize_with_core</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af2e8ee84778686e9789a5ba0ce7c383f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>optimize_with_core</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8e7473ea41dbf33ccba88340165a41bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_optimize_with_core</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa38a51abe6aae43e843c8c1ae77611d3</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_optimize_with_max_hs</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2ba8ea927fd1ccb99979ed3a0354b246</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_optimize_with_max_hs</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1af4ec5318ae8d10197f7d734ef080a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>optimize_with_max_hs</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af3a1ed149e11916ac95cafbecc6e4142</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_optimize_with_max_hs</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7367690953b34a66ede243221b882cce</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_enumerate_all_solutions</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a32264920249bfae4bab1a09cfc63cc88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_enumerate_all_solutions</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a854f8cc2dbe640ec5ef9e8fb29b685fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enumerate_all_solutions</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a42c6626281bb07de74f2b48d5687bad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_enumerate_all_solutions</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae77ff8a4a6599aee304a5fa8fc8974c1</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_timetable_edge_finding_in_cumulative_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0986680bcf1538a55e9f4c34eb319b2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_timetable_edge_finding_in_cumulative_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1971b073e183edabaf7bc59f46358d0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_timetable_edge_finding_in_cumulative_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a953b222c7fcb34e9729a1e09928b7c8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_timetable_edge_finding_in_cumulative_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad2186802e41fbd4b40393594d7bb9911</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_only_add_cuts_at_level_zero</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a67656b86657f259cd2242eaf7e5840bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_only_add_cuts_at_level_zero</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a722f4187972fc8a2c4c49fa2011b40dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>only_add_cuts_at_level_zero</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6640268cf41dee98c18683cb710ca8c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_only_add_cuts_at_level_zero</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1fc15036affa6211d5d431a14b976b9b</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_add_knapsack_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>afa4aead81722bdb0056014bac13141c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_add_knapsack_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a04c63b40595db6488c1bfb0a3b101bac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_knapsack_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa9d1f7d5ab75524506aa61259a9def86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_add_knapsack_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a92921ca8bf6c096980da55da47422c40</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_add_cg_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a38608a2a8876aa04d1116fe98b1a3bf0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_add_cg_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2e7e06416c6d33832c3db6ff92ed7199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_cg_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a05b0283ab0ec514dc5491661dbc2e34b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_add_cg_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>acf1bfa02f21378b89106cd3f86406d70</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_search_randomization_tolerance</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa057214fddeb6e75d095b56a94c9403b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_search_randomization_tolerance</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a164e3ac70c57a482d49f4931d40f4bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>search_randomization_tolerance</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a35e52748cfd2aebf785980f151b32cd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_search_randomization_tolerance</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aaca922e8870efcfe27d122a82b369a87</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_num_search_workers</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1084ac9a4eddadaea6a7b3fca0ea6ce0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_num_search_workers</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a57ed4de8cbb62926aa513f2555a7ff1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>num_search_workers</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a20d149f7b5ab8da7326739acf96a0691</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_search_workers</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a43558c4a0596a883357bf880fc97538d</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_fill_tightened_domains_in_response</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a358af413cfd511dee33a72a78e05c2d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_fill_tightened_domains_in_response</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae68a4393badfcb1511441d4fd5f11846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fill_tightened_domains_in_response</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1acc23d23a7829cbee39c33156714b37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_fill_tightened_domains_in_response</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac56636f4118df9ae7b49a89ff73c6073</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_stop_after_first_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>add539afedb092c2b2d4bfbb323d572fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_stop_after_first_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae58a24e4bfca8efd6c1b75a21d6d1b5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop_after_first_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a78c6b78e31d41a45a9506692473f85b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stop_after_first_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4a0f153cf20dfb8ec439f6c10193130f</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_lns</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a33f975ecb6da863de946b7398f228e9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_lns</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>abcc5309b38ea9669f96fae65205c820d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_lns</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2db2d05db9b2cd0d43e898c5c7a99f2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_lns</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9ff124ca5208529e25e80dd038a833d6</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lns_focus_on_decision_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a283055babc73ebef42ca0b98f0b42613</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_lns_focus_on_decision_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2cd63c92bd839e841c0dd17b69c90cbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lns_focus_on_decision_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5b3eedeae3778d2f47b5e658e5894736</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_lns_focus_on_decision_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4e65354c4d93976325d953e366718d17</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_rins_lns</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>afe58ed279e3d20a901d37511a3f909e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_rins_lns</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af08e4ab996af1aa521993c004738bf4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_rins_lns</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4ff91e7794cb0ea0407949ddaa4f258d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_rins_lns</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af476cc00b893ebfeb5ab7e6d69e2ac92</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_randomize_search</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac10d3776f2e92ffa9fde04a56ae06145</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_randomize_search</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7a918a01963b3ec258f000e074fe37b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randomize_search</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aaecf2ed3801a14f4ef2aa8fa418eb8c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_randomize_search</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aeec72bea45ed9de54d9fc17cb511b8f7</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_combined_no_overlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0fac786be2bdbb5d93781523b3f4ce64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_combined_no_overlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ade4963c7a1a6d8c0b7ecc20ce142a94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_combined_no_overlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3fc6d6586318ccabe142e90b27d97507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_combined_no_overlap</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac3327bb59d47a20656eed1666e84d4c1</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_min_orthogonality_for_lp_constraints</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad7af5d2e5696028919b11bdfe008346b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_min_orthogonality_for_lp_constraints</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5f643d045e63b5873f1fa94bbecf0849</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>min_orthogonality_for_lp_constraints</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a043ad75614acafc414ffd4947fafaa34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_min_orthogonality_for_lp_constraints</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6d2f4faa402690f8463b8f25657bf5c0</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_mip_max_activity_exponent</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a68115cbd3b1924199858e2c261439276</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_mip_max_activity_exponent</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a86e972bdac7cf4b3129c5b8ca1bf9751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>mip_max_activity_exponent</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aff86b511d8b6786752926351510eea5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_mip_max_activity_exponent</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad7b83e8141859ebbde292bb0a5593848</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_initial_polarity</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a55850aeddb1632f4d2d32b5ae2eba9da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_initial_polarity</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2547a17b67f7b86ee17d6cff38f51e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::SatParameters_Polarity</type>
      <name>initial_polarity</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab8cb28da16ab4054c04f29aa8344e3bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_initial_polarity</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4fd96ffb9a098f7da94484dc9a42b2ba</anchor>
      <arglist>(::operations_research::sat::SatParameters_Polarity value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_minimization_algorithm</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae6c1fb9bd4beb319f8b099623ade7b9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_minimization_algorithm</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a722215b21a1eb801988c35f594451bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm</type>
      <name>minimization_algorithm</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad1a1c7311c39fb7f232f2c7dfc62aac0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_minimization_algorithm</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a16d6c3b9a0212e2833f71ecff1bf91e7</anchor>
      <arglist>(::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_clause_cleanup_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5a05a3198cba3da4f499a94bcb3ce803</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_clause_cleanup_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae8db44027f0fa813e3a411022d330737</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>clause_cleanup_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab0ccb4457e0ad167e46b6c3a06e6fa5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_clause_cleanup_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa6c6dac098960b53295cbf681794adc3</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_clause_cleanup_target</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ada787c10593d9bd85153d118f1e2a5d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_clause_cleanup_target</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2738833d93835a92cf657d50e1f9a5d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>clause_cleanup_target</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1e7bff24d803180e6c60f3bbc8399d2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_clause_cleanup_target</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a81576b47a1f47c5f43656a93ef2195b5</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_variable_activity_decay</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae41941f027549f65d64e1dc1104ec427</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_variable_activity_decay</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>adb2b78f7b832bc6cfa4ef2d5950a8a9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>variable_activity_decay</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1ab7be255f9a11320608a814dab947fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_activity_decay</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2905415a8af6aa9ad11c283d2b69d227</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_max_variable_activity_value</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>acd40d65c7a601067882e36a0204cc3a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_variable_activity_value</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5ac5befe3d1a6b7469f839d6e0ce4885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max_variable_activity_value</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6a89d4f794f345a38c89519ed2ba2daa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_variable_activity_value</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa8e130cd366acbb9459268e32c74b33b</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_clause_activity_decay</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>abf8484485f5cf2e48e33b1b020a45509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_clause_activity_decay</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a560291edbfbc41393633abb9e20170ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clause_activity_decay</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af18f073a1e84bb745fcb6bbf7a29c50b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_clause_activity_decay</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4056e3d075da45b212d1f16863eb788f</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_max_clause_activity_value</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a94c4134ed54093241cddaebfb55956bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_clause_activity_value</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aabd109345395ca1922df6105d1a9d8a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max_clause_activity_value</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3d789de270371a45e88644a3aef30e2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_clause_activity_value</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9c11974dcc3b6f5b85aec5777cf50938</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_glucose_max_decay</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2818fe9823201cee220befd3b021925d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_glucose_max_decay</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac50b21223e5197c319b0f5b195a415ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>glucose_max_decay</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a22c515ce5771ece8e310d275f01250e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_glucose_max_decay</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6dcdff4249400fd5368540713be3f8b0</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_glucose_decay_increment</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aeec669701e40645a7fa8bfb19e4aaf9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_glucose_decay_increment</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5bc5f4eb3ef83a29230e0e45ef5c9ed2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>glucose_decay_increment</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aade052995d2374250e7cbe687e83a0a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_glucose_decay_increment</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a569d7643d2bcc53bd9a96ac86c4840cd</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_glucose_decay_increment_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0a67015e554a7508a96d22855b72c1d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_glucose_decay_increment_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5c440b6cec4dd2336418834f7a6b3c26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>glucose_decay_increment_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2164f40a11d9c0fc18d3343f210662f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_glucose_decay_increment_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a157dd38edaf7918be0e4b459edbe0da1</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_restart_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab528b49e9311d739e41f71452d18a7ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_restart_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>abebc7fbe70ab8cbdbbdaaff5cc7e821b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>restart_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5be6deac1efe31d76db6726e660905e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_restart_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa31156bf26261533816877f72939b2d4</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_random_seed</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a652e9bcc32f0aca6f5b001647530c6c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_random_seed</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2627995032320b53ab21b83b0a42a4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>random_seed</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8793fe1ef6b2c3f25392fe5c5d02406c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_random_seed</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8f00b9736678a1480237eec03be56fdc</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_binary_minimization_algorithm</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad00d9960daccace7592dd09cb1f7a32c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_binary_minimization_algorithm</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af991ef9b25c2d9e0b50a20f56d415698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::SatParameters_BinaryMinizationAlgorithm</type>
      <name>binary_minimization_algorithm</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5a2a20f25b804c464dc05a077d2aea3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_binary_minimization_algorithm</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a32d2d2e2c489cad358ff440925713198</anchor>
      <arglist>(::operations_research::sat::SatParameters_BinaryMinizationAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_max_time_in_seconds</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>acb70ec53e2fbfce24b4daa28c28234ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_time_in_seconds</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a472fdb8907f0d63a137689a6ebaf9452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max_time_in_seconds</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0e2df6c1d4dac1eade627d27eb8ef90c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_time_in_seconds</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a22f22991bd7f54a5de6d7413670c3fae</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_max_number_of_conflicts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab67b7f2f1f74515809844d9c1dd820d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_number_of_conflicts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a871c3c25d81801477726175df429f33c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>max_number_of_conflicts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2b8343a6e7cc8d92d5a109f174fca34d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_number_of_conflicts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aec741a938e27028b5981dcbd5b34d09a</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_max_memory_in_mb</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a98af6d355d236e5019064bd6568aa03b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_memory_in_mb</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a07897b95903ebe91e548811cdac628c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>max_memory_in_mb</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9b2aea19ec06c2c4be018ff4c7e47e0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_memory_in_mb</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>acb651eaf2ec51630e6f667316f531def</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_phase_saving</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5a22883237835df1899680c39e8659e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_phase_saving</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac789d6c7627cb8bb50029478a1902aff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_phase_saving</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7c115ad36b8acca68ebd7fa4c43b599f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_phase_saving</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5fb4b17080a070e4a0ffd113b08f13e7</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_subsumption_during_conflict_analysis</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3fe58ea59aced6a80fb7115467b52366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_subsumption_during_conflict_analysis</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab75158069ed59aaf11552e68a32304eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>subsumption_during_conflict_analysis</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a78dcafedfc1c172f4cabfd673ab0aa66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_subsumption_during_conflict_analysis</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6d08144376c4d2708282b1b4f05b2027</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_treat_binary_clauses_separately</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8d2f08e836c02f7734b448884e752e82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_treat_binary_clauses_separately</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a25cb0e2a2ccc17d516c818085913de9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treat_binary_clauses_separately</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a84c4633786d2c47cf206fb51f196db2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_treat_binary_clauses_separately</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a46d0957a994186a33bda8a18825718a0</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_count_assumption_levels_in_lbd</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1c7c33b1ec87f1d7180cf94a7c0d9ecb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_count_assumption_levels_in_lbd</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aebc7547adfaddafac2d002b97130af78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>count_assumption_levels_in_lbd</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a142f1ac6bba8910786bbd7dae6746c78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_count_assumption_levels_in_lbd</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a580ab7d8dfaaaf29cab99db9c2d785dd</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_pb_cleanup_increment</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aace1d4b76ac84331576659d76fbee204</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_pb_cleanup_increment</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae6b730d49066570ee5d60b056baf7929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>pb_cleanup_increment</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6cbb2e430e3383fb9b99b67d52762fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_pb_cleanup_increment</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1de6629d3f45b80ff26d4bccc14b4ecc</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_pb_cleanup_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af177dc4936047691ad433a7d640e1530</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_pb_cleanup_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4cadd40582fd60f94ea274a501ace62f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pb_cleanup_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a84f08656ad47d865024b505172327b3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_pb_cleanup_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a33dafca132f425b24a0acd336244e6e9</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_max_sat_stratification</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af7c121d3e2f7942aa72f2b7aa2306b54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_sat_stratification</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a676d1e4254d425a50c6ee6e399a92f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm</type>
      <name>max_sat_stratification</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3d0f20419385d42ec4d41c11bf64643c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_sat_stratification</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab2874dc3d44b18d5a0ced1818e70d369</anchor>
      <arglist>(::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_presolve_bve_threshold</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aae816aa278e0eef64c3c82fd34155b83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_presolve_bve_threshold</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa13751ba3a7b8457b6deaaa168f79b2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>presolve_bve_threshold</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a73249750d34559a087ac41e5bdf54017</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_presolve_bve_threshold</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3bf9c24ff70bea71327a2b114c41bfe8</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_presolve_probing_deterministic_time_limit</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0719d0ab83f83913cc6ed45159462352</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_presolve_probing_deterministic_time_limit</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4c7d1d4e89ea2882b4d6fecabc305a99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>presolve_probing_deterministic_time_limit</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad5d1c0e05c689cef947022cf02ef253c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_presolve_probing_deterministic_time_limit</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3775d9fc573397d21b54330fbfd90f49</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_presolve_bve_clause_weight</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9ad426a407a899f4465eb75ffe5347bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_presolve_bve_clause_weight</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af7a16cb2b70ccd7174f02f2839c18a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>presolve_bve_clause_weight</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>adac48d8340e5d1e35f4ea7b62f574359</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_presolve_bve_clause_weight</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a84c96de45986c3680f738acfbe1019e1</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_clause_cleanup_lbd_bound</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af5a5fcd74ebf108e1b48ff75c50b6bb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_clause_cleanup_lbd_bound</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a96193482110fea743c54dfc903a7d929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>clause_cleanup_lbd_bound</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2f7f7060e4c4c613917889e877c27f97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_clause_cleanup_lbd_bound</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a95e7a399fd787d4385f1b816b1feed3d</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_presolve_blocked_clause</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9e79e320d91d0302e8b63d6e80b393b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_presolve_blocked_clause</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af3e049387370c472db3d1ce71e827f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>presolve_blocked_clause</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac79cf37d8aa6886804a81eac6ff33a4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_presolve_blocked_clause</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a95c875cb40876fa3e9f6cf93650e6593</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_presolve_use_bva</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a78038c00f6656576301de7754665b8b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_presolve_use_bva</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa55a957fb94ac214946c6793d6c2ef65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>presolve_use_bva</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af43b0ab37d3a1bc4972b29eb90686a15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_presolve_use_bva</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8a4f420cea0226ca20b74604a61bddd2</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_optimization_hints</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aba1f5eb52a39b2f28217082dfb034670</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_optimization_hints</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9aab6866816cf54407fd54582c5273d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_optimization_hints</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1531ac19e851bed12ea02f0f39831870</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_optimization_hints</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a222072ad9d1da0f2abbdf9d964ccbae7</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_minimize_core</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aaf5e7e2b8beed7c403d539ade27e6c61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_minimize_core</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ace09b6eac0574e22e50f262344e1347f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minimize_core</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab1743ecb3831f63271f0f2bf485b73b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_minimize_core</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5e0a4c638e042afcb3eb2dea50d1f147</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_restart_running_window_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1e0264d5bfed3f6ae8939fecae653ac1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_restart_running_window_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab1a4d21deac2e58b558ffa51b38cb8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>restart_running_window_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7d895b8a64cb84c9012eafb8039aacbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_restart_running_window_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad88983ceb72252974624c21b5b07c277</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_restart_dl_average_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae0df8d9e2542a960023416138144f01c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_restart_dl_average_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa153ae3e4cebd0cea0613cfd871449fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>restart_dl_average_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac3ab4a01e2b9ab820d05a9739e48b922</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_restart_dl_average_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af9f85d67c60935ad86e285d164f08451</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_blocking_restart_multiplier</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2cef0df4a7bc8d94e9112aacb02bb7ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_blocking_restart_multiplier</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a845d8935c3aa4cc2e3dda12a513d6389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>blocking_restart_multiplier</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0046fce1fe08613b45b64d4754a39048</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_blocking_restart_multiplier</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a32ae538a46fb4e2fac415fcd802a70c8</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_max_deterministic_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac395a32ae8fdbd8f97f4ed8925b23857</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_deterministic_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab5d5d31aebc607fc08249a4a9cd103e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max_deterministic_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6e17c1ac59d6077b10573699959321c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_deterministic_time</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1e10c985af96ea97e505e8a46fd8599b</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_blocking_restart_window_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab2491dc199f47aef147ada19b0350dd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_blocking_restart_window_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a159ce3755d4304de78d18d4054c5c0f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>blocking_restart_window_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac562190b40c8922ca90b23f9d7927bd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_blocking_restart_window_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac16bea982f01e50a6317d32d474339db</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_presolve_bva_threshold</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa12f85f1edac3ee8b135651b973189e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_presolve_bva_threshold</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a79820be6a45846d26727272a075e51cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>presolve_bva_threshold</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3791dcd2af8b19dd689fcbdbfd9c1a48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_presolve_bva_threshold</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>acabf4a4dde1b035f6df59e3843590703</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_restart_lbd_average_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad25b9f63a0f3c13fa0b1c71a98fc3ae9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_restart_lbd_average_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a821b1420ce44dfa1e933b0f458e1a986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>restart_lbd_average_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab5527bd7be13fbf0fc9ce737a3d1d0b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_restart_lbd_average_ratio</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a48ec41da62217bf918297510abd49fe6</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_find_multiple_cores</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6f092573145682ac8fb2f11b8bcaa6a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_find_multiple_cores</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a161ced07e4452a55e5015b39fb719a5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>find_multiple_cores</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa7cff1ef9161b5813a5c288229081ed7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_find_multiple_cores</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3654b833d9c55c4150966eb791a7f832</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_cover_optimization</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab0efdc6312c1d7e0716b468a8fa2d4fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_cover_optimization</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a91eba0cc0072303d649a463fb1deb715</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cover_optimization</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa62fa42cc92062e9b088e38a49bac1c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cover_optimization</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2ae64cbb21430f6f32bbec81aa0717d1</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_precedences_in_disjunctive_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a370696cf99fa031ee67927752475ae8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_precedences_in_disjunctive_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aaee4bda10cfc0fec0e4e788a72f11c31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_precedences_in_disjunctive_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2a0ccf77cd58ba4937c44a580f063238</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_precedences_in_disjunctive_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7cdff8beb1fe04edfb177e2ad1f489d9</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_disjunctive_constraint_in_cumulative_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a653c1af8aabc7bce4a7ab4f7e068ebfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_disjunctive_constraint_in_cumulative_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2d9a062a188135b7ba435535967c5204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_disjunctive_constraint_in_cumulative_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad38cd6ceca712bdb36dbf7d7be470997</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_disjunctive_constraint_in_cumulative_constraint</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>adecd25365b2276e87d1d78ef1c5206bd</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_linearization_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3fa28c852425b90a9484d30f46679a96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_linearization_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6df334d097afe2696bd1a173a80e8fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>linearization_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad4a07a8fb6acf0a027563d1d4a133a83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_linearization_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7f10929649ecda23f27a44c0ac975817</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_max_num_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1c3c67c4f76c82ea561567f09cc8c589</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_num_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a331deb162d70ca1793393c9931da0274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>max_num_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5c2a0955211d922f4a3aba089b85af80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_num_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9d0dfd588027e1ccf4e2a0b8d2846dc6</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_minimize_with_propagation_restart_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5e38be5fa903efc083e1dc8818ce4f28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_minimize_with_propagation_restart_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac527e419c766a18bc49a4e0466b8f3b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>minimize_with_propagation_restart_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1833d328fea0ceb1ec02765a3512d38c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_minimize_with_propagation_restart_period</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad628d7514b4068b42f9b9c0a7ec018d5</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_minimize_with_propagation_num_decisions</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac93ad9b7175538e185406f9661e16ab9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_minimize_with_propagation_num_decisions</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8d79b8045f0cca2d7686eaf02f5f82d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>minimize_with_propagation_num_decisions</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae1a4415a99796a9fd749e99e6b6a4f54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_minimize_with_propagation_num_decisions</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af1fa079c985591e5d0001ddcff49faeb</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_binary_search_num_conflicts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a70d41475d2fc1466eedd19e80151cd7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_binary_search_num_conflicts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7e149f88fc0075c98c16248252662d53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>binary_search_num_conflicts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae3833e782e4b08278db0e93a75be0c0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_binary_search_num_conflicts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a71bb9a8c458757ab5a41ccd90b0049b6</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lns_num_threads</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa16bd22e21ab9837d86ae62e74073b7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_lns_num_threads</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4fc3ba31a568695116ec3d82a0cf131d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>lns_num_threads</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad207affa2571674283639fa5693a1109</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_lns_num_threads</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a12df387cf27bf7466fe3e02b0d3cad4c</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_exploit_all_lp_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a01149d364c5dafc503cf3e065c684818</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_exploit_all_lp_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a69c75c42b89c78020d3aba350fad8c57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exploit_all_lp_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a42408080a77032f2b2201d06e58a0f6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_exploit_all_lp_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7aa58f43a87d551f9bc0a75c97df8476</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_exploit_objective</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac06d87416a568cfd3d2510fd93eb00dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_exploit_objective</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad218eff075b3081fbea55e698aea1169</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exploit_objective</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>acd5ac8d4f358bb1ea9c213b373065ced</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_exploit_objective</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4e91c83ef16a5db6d3c8f0976216fac6</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_cp_model_presolve</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac3e0972e9f62fb9d5df54bc988781a67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_cp_model_presolve</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa12dd9baffdee29099b29d2cce701f60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cp_model_presolve</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>afe03e03821950cf85145722fcef8edc2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cp_model_presolve</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6856f241c4ccd9a18b6c77d7be16e117</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_cp_model_use_sat_presolve</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a128494fff93d0582d869ad24897917b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_cp_model_use_sat_presolve</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a82fbe3478903f34425741affbdc2eb0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cp_model_use_sat_presolve</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab80c45c958e9500bac82b17d5100e2f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cp_model_use_sat_presolve</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1fb6a2768738dc5088a5197b6b9354fe</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_boolean_encoding_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a756b16f25abb7e1ffab126d2332e15d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_boolean_encoding_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a35ce99858f0afc9945bc4fe1f22e4e6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>boolean_encoding_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa67dd1d9130c57bf709b7b3603d7057e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_boolean_encoding_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a06724d9c7bcc779776da20675c5f6719</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_instantiate_all_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7b5a1d6c4d59f0409429736965a713d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_instantiate_all_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae2a8e08d0c4b1f8c420bbe26245509a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>instantiate_all_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a40084b6cd3b84973a6d0af0bb9cd319b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_instantiate_all_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>acbbdda6a89dce59207f8f63f673409a7</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_auto_detect_greater_than_at_least_one_of</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5a43541e065e0afa28ab7e0d3afd3d28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_auto_detect_greater_than_at_least_one_of</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2e219ada7d08f51818d997e7e0db7c18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>auto_detect_greater_than_at_least_one_of</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a72147df93c16bf7eb0ce8c1eb4f6c021</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_auto_detect_greater_than_at_least_one_of</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2b3c869376acb8cfc9c72fa2d6a4b807</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_share_objective_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa41424293281fe80b7a4e72e34def998</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_share_objective_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>acf7d32c05386dea647e4ddcb35d660f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>share_objective_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a448095398811fb6c477460b7fb6b36cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_share_objective_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac46e44880847d39e5e1d4d5c48bf81ce</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_share_level_zero_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9bfdf7076dea955c13fe197a6228e5d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_share_level_zero_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a079a98cf62a9c8dcb6c3d37b0fa2e518</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>share_level_zero_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad997788e114f1bec07d5ff4e7d0f08e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_share_level_zero_bounds</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5ac91626b814e4c587c15e04d4b19bfa</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_optional_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7f895da906479be37a0fa925c65a919e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_optional_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae47f567d8c8f82fada73347d29b253c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_optional_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7a5f4c6f5d6f57b15dd98ad63de8acf1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_optional_variables</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a88306976162c40099a868c7a44aae596</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_exact_lp_reason</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5e035ce620456899ec8de1b3f226c45b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_exact_lp_reason</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa771eb136ae84dd984dc9b10892633d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_exact_lp_reason</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a62d4b73c33078a073cbfeee9ff560998</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_exact_lp_reason</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a97156b400b2f40de83044bc1357358ee</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_cp_model_probing_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae26158b8feb367dc1255f7d2a2cf880a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_cp_model_probing_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9fb96d63468ceb1891f5624b3a2262af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>cp_model_probing_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a56e16db387858b22278343db567e05de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cp_model_probing_level</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a06a1176010691d9644aa6fb5a85bfcab</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_add_mir_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a376e6ea815537cd2e97feb2f0e691942</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_add_mir_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>adcf97ed1a1ea5ede79aeaf331c9592d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_mir_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab8cb2bad5c31fe58b2ee94344891f60e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_add_mir_cuts</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4ecfa46b49fb90be62cfc4a7ef4450dd</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_use_mir_rounding</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a63878829db966b5e438590bd50b14cf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_mir_rounding</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aab537a0adeb1c5d20511dbc7cdc49821</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_mir_rounding</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac79caa8b7a4c29ca5c8eb1bae0646b18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_mir_rounding</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a78e02a718d4f859c50b8914a9e4b0fdd</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_add_lp_constraints_lazily</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae27fc5f446a70f1960b94dd1669da9a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_add_lp_constraints_lazily</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad543207d30019dc1fe988d3af4374774</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_lp_constraints_lazily</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2019d199f858dd546ccd593b26ab198c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_add_lp_constraints_lazily</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad257f8729ea29346b8e9698272ba35f8</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_exploit_integer_lp_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ada1123197d9468202b3e32d3202c4ac7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_exploit_integer_lp_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8a698230c7b1915c3ffba4243745e9df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exploit_integer_lp_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7735e6e231740c615486fd50300c4292</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_exploit_integer_lp_solution</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8b0175b0d535952628e64fd8a17df1de</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_max_integer_rounding_scaling</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7afb62ad9e9d6be5a26d00b383affd49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_integer_rounding_scaling</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2d19d28ab90f0193d49b6d9dadf3b2da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>max_integer_rounding_scaling</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a60af9685480f6db8877875d1fea1a061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_integer_rounding_scaling</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2b7a438fe3f4521f16570f74fb048389</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_max_inactive_count</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7e28ac8ff60b0c553bc068f9c97a5833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_inactive_count</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad6e2cc39f1ffd9593d470b154f41f87a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>max_inactive_count</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa7d4e1ac370b64b682865b9f7de95c4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_inactive_count</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a93a9fe4e73991610bc81842b7d31a3ff</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_constraint_removal_batch_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>abaf3de71f74efcbf186d4cd6927d1b4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_constraint_removal_batch_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa3932668de1670b6b933659f6d0662c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>constraint_removal_batch_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8d64d46cbece5f00483662b8590283a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_constraint_removal_batch_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a713538029f2cd48b7a7f3dd2e6464d1e</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_pseudo_cost_reliability_threshold</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>adc59cdf3d720dff16eaea2dbf19028bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_pseudo_cost_reliability_threshold</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0dacbfbb1822ae81089ad93331f2e542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>pseudo_cost_reliability_threshold</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab4dba107d7ac74f7661c1ca42ef8766b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_pseudo_cost_reliability_threshold</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2a75515bb216f21bf399aa402981dc03</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_mip_max_bound</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a257509be4db1116c941dd94b856f2cd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_mip_max_bound</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a27794b668f9d30a6724b3aede96960c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mip_max_bound</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa6461a9fae2498fcfef87d62003aaddc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_mip_max_bound</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac7dce2260cf497d7bbebffa2f05aef75</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_mip_var_scaling</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>abb6257387749b0032b2efa236633182d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_mip_var_scaling</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>affcb6c0106f7088c7c3e0cdfc56d4857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mip_var_scaling</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad1cb1ba28f3f67e0ff6775beb10f2a1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_mip_var_scaling</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab1b440ae58ef6ff056f94df6dcdbd357</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_mip_wanted_precision</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ada287fe650af1cca5fabbc291f1ac4f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_mip_wanted_precision</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>abbeaa5c6c461596c03bbecc059219f32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mip_wanted_precision</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa064e3b6cf8c17ce47d96e43b4de4476</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_mip_wanted_precision</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>affa96fa5200f4c9bc31bd993491aa198</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_mip_check_precision</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9f2aabe7bd42a273829d8914606a2e6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_mip_check_precision</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6675a4da295058dccce7b0dc410a1e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mip_check_precision</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a20e09d2229f97e58fff20a1486511394</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_mip_check_precision</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a30429f43611d2decc0e537421f7c5c0f</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aaed79e80ca86d9fb3638f5a9e2b32ac2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SatParameters &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac474f81bae9a999247622271427161b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac19faad538e99354ef962f1c490fb1cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SatParameters *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8e5209e73e62a8eaf07549fca0ef17ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>VariableOrder_IsValid</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9a22b6196297096eb54a8d6375275112</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>VariableOrder_descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>afe4d4a18e63003d315d561d6e49ea2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>VariableOrder_Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a12cbd225eb2ca67e70f5a579546633a0</anchor>
      <arglist>(VariableOrder value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>VariableOrder_Parse</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a71447e0d785124feaec093711f57854b</anchor>
      <arglist>(const ::std::string &amp;name, VariableOrder *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Polarity_IsValid</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1143efde7d013f8220838ea2ae71c887</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>Polarity_descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a43c446efc51c8bd3e5fea028c66cd730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>Polarity_Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5a9c5543625d0b37fe4e64a809e45f52</anchor>
      <arglist>(Polarity value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Polarity_Parse</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0452cd51658f6c3edc48b14dca6fb143</anchor>
      <arglist>(const ::std::string &amp;name, Polarity *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ConflictMinimizationAlgorithm_IsValid</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3b399cf7366676017073c0f36773138c</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>ConflictMinimizationAlgorithm_descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aeb399103bedf4b050dc9ea68ebf46e1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>ConflictMinimizationAlgorithm_Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac4fdc023451067acb40ce0ab6acb13a9</anchor>
      <arglist>(ConflictMinimizationAlgorithm value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ConflictMinimizationAlgorithm_Parse</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ade8d4fe9dae2d95d04cbb75d94b882d8</anchor>
      <arglist>(const ::std::string &amp;name, ConflictMinimizationAlgorithm *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>BinaryMinizationAlgorithm_IsValid</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a99a3bc35f1ee438d5034f173476c2232</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>BinaryMinizationAlgorithm_descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8966e1478b1c92b8d3fb9b0ef2bd6c42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>BinaryMinizationAlgorithm_Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0020d12962e21d30b735dd18426d26d9</anchor>
      <arglist>(BinaryMinizationAlgorithm value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>BinaryMinizationAlgorithm_Parse</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a04afc825b2be6b6406f21a5e40d34119</anchor>
      <arglist>(const ::std::string &amp;name, BinaryMinizationAlgorithm *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ClauseProtection_IsValid</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad2d5ffae53df56c4630ffc343851142c</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>ClauseProtection_descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a32b6ca5af81080412353ca50282cc557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>ClauseProtection_Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4e7e26d7d49a1cfdfacaf2238608ef6e</anchor>
      <arglist>(ClauseProtection value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ClauseProtection_Parse</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a75c70671cc09c6f0c1df11731e11f441</anchor>
      <arglist>(const ::std::string &amp;name, ClauseProtection *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ClauseOrdering_IsValid</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab95be218b14b8d6d9bbf28a09f545a75</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>ClauseOrdering_descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aea6353f3cda72a34a89116be6087c164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>ClauseOrdering_Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a437df16b9ca15e73e188e94a5363c5b4</anchor>
      <arglist>(ClauseOrdering value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ClauseOrdering_Parse</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac4b379625407a03531940c603f6b33ea</anchor>
      <arglist>(const ::std::string &amp;name, ClauseOrdering *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RestartAlgorithm_IsValid</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6bc12f6092ceecd9403233f081e9ebcd</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>RestartAlgorithm_descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3dc05fa5cdc2f995e2218f7c9bf73a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>RestartAlgorithm_Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1c8b0f7a8aa9583ac016d9054f7b597c</anchor>
      <arglist>(RestartAlgorithm value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RestartAlgorithm_Parse</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3202c943977c622d095ec4ffbcceffc4</anchor>
      <arglist>(const ::std::string &amp;name, RestartAlgorithm *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>MaxSatAssumptionOrder_IsValid</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2ae770ff4ce1ef6d5c32cad224cd8fa0</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>MaxSatAssumptionOrder_descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>adc71dcb0b31c6d95033985af7135c87b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>MaxSatAssumptionOrder_Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aea935941ff08301dd73f60930c35aad0</anchor>
      <arglist>(MaxSatAssumptionOrder value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>MaxSatAssumptionOrder_Parse</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a696b6d3f48af46ab32e35eab6beb44ee</anchor>
      <arglist>(const ::std::string &amp;name, MaxSatAssumptionOrder *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>MaxSatStratificationAlgorithm_IsValid</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a266e70e69fc4191560e696d697d1f39b</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>MaxSatStratificationAlgorithm_descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5c5cb3a3fb9ffc034ba78b9d02accef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>MaxSatStratificationAlgorithm_Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8e7c15deb129bd4ce0e63c0817bfeda0</anchor>
      <arglist>(MaxSatStratificationAlgorithm value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>MaxSatStratificationAlgorithm_Parse</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a09be63eaddc70dc7e4d5b6cf0a0e5a26</anchor>
      <arglist>(const ::std::string &amp;name, MaxSatStratificationAlgorithm *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>SearchBranching_IsValid</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae849deb5401a33e85b973ef423548f83</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::EnumDescriptor *</type>
      <name>SearchBranching_descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a131679cbb21f9404089fba7c0beec697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::std::string &amp;</type>
      <name>SearchBranching_Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a138705335715574c8c51c90da336bd53</anchor>
      <arglist>(SearchBranching value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>SearchBranching_Parse</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a094f12329b6c0d449d2d74bd6a424bbd</anchor>
      <arglist>(const ::std::string &amp;name, SearchBranching *value)</arglist>
    </member>
    <member kind="variable">
      <type>static ::google::protobuf::internal::ExplicitlyConstructed&lt;::std::string &gt;</type>
      <name>_i_give_permission_to_break_this_code_default_default_restart_algorithms_</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a87cc48db7a45852491e2c497b1351c0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>afe1d2252f7a9c2589c01399d4453d51c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VariableOrder</type>
      <name>IN_ORDER</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aab7c39c7967989bc649796f7d0895f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VariableOrder</type>
      <name>IN_REVERSE_ORDER</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>abd72c94ebf8070bb83c7c65cb40344a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VariableOrder</type>
      <name>IN_RANDOM_ORDER</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7026e9d849b6edc6004041381574bed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VariableOrder</type>
      <name>VariableOrder_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a096aacfba17e165157532d06fb0d5a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VariableOrder</type>
      <name>VariableOrder_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a751655caacc2971f471ff5a696622a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>VariableOrder_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a22ed1e37a58cc754ceecaa75ff8869a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Polarity</type>
      <name>POLARITY_TRUE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4d725db13d7dfeb831b8fd3a7555b14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Polarity</type>
      <name>POLARITY_FALSE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa313ce97ef3038b27bdf7d51f02cc09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Polarity</type>
      <name>POLARITY_RANDOM</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5cf220ea3cfb9980aa790af3c9e9569f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Polarity</type>
      <name>POLARITY_WEIGHTED_SIGN</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac90816275d11367a0e0c32c5b26158a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Polarity</type>
      <name>POLARITY_REVERSE_WEIGHTED_SIGN</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa6742ee90c34b205a5c0cfe17191ab68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Polarity</type>
      <name>Polarity_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a84a5fee9d824f0d8aebb23185757de39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Polarity</type>
      <name>Polarity_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa34eda498b6cc1768de190f6b1bdc1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>Polarity_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad35f31dfec1e267469d3516355378631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ConflictMinimizationAlgorithm</type>
      <name>NONE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>acfe8f027464d9683d13a613f6e64a888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ConflictMinimizationAlgorithm</type>
      <name>SIMPLE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0dea1ec8fc4091058590032d8866a104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ConflictMinimizationAlgorithm</type>
      <name>RECURSIVE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab0cb198805b7f786d8812e735bb08a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ConflictMinimizationAlgorithm</type>
      <name>EXPERIMENTAL</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aeaef638996b6f51cebebbc73658f5aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ConflictMinimizationAlgorithm</type>
      <name>ConflictMinimizationAlgorithm_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9fdd8a0fb42b0abe3ade65879a54e858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ConflictMinimizationAlgorithm</type>
      <name>ConflictMinimizationAlgorithm_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a06b4cdfe9d6815efa2db7339340129b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ConflictMinimizationAlgorithm_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a99e141ddd096a6d07b42823fa6e8f3ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BinaryMinizationAlgorithm</type>
      <name>NO_BINARY_MINIMIZATION</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af40696f27c44fe19b067c6d8bb2da17b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BinaryMinizationAlgorithm</type>
      <name>BINARY_MINIMIZATION_FIRST</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a69007d20eb576d240318e5e7a6bde061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BinaryMinizationAlgorithm</type>
      <name>BINARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_REDUCTION</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa79b9c9d2c5a5f57f6dfe8063bcaed32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BinaryMinizationAlgorithm</type>
      <name>BINARY_MINIMIZATION_WITH_REACHABILITY</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a59f1b5df734beb3bba823a8903c87678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BinaryMinizationAlgorithm</type>
      <name>EXPERIMENTAL_BINARY_MINIMIZATION</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6918b20342fb3a7e1aed146137ab2f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BinaryMinizationAlgorithm</type>
      <name>BinaryMinizationAlgorithm_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aef8529ff207405baba83f4680ed0f383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BinaryMinizationAlgorithm</type>
      <name>BinaryMinizationAlgorithm_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>adf8dd60fb14b4f08cd5f651b38f79c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>BinaryMinizationAlgorithm_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5d3c53e24031b3a21e7147275ad29b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ClauseProtection</type>
      <name>PROTECTION_NONE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aefc25ec61b528fcd02226705d5ea6217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ClauseProtection</type>
      <name>PROTECTION_ALWAYS</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a941cb40b2f39ef4efeebb1e70f8ff937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ClauseProtection</type>
      <name>PROTECTION_LBD</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8efc4b1f266490d69e39018ae138949b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ClauseProtection</type>
      <name>ClauseProtection_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae316c121bce984d78d3b24c13a841f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ClauseProtection</type>
      <name>ClauseProtection_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6635ac1dde37a5f23419e6e377d1e4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ClauseProtection_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5aff806eddf4c716950dd02389957201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ClauseOrdering</type>
      <name>CLAUSE_ACTIVITY</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3993fcfa9890a765a3525ba8f53c7538</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ClauseOrdering</type>
      <name>CLAUSE_LBD</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a882ac7be48af6c9c5e4d9701b27faf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ClauseOrdering</type>
      <name>ClauseOrdering_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac65f112c37e68734baa6537ac4a904e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ClauseOrdering</type>
      <name>ClauseOrdering_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0e75cfa647164057bbd3b316a837fddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ClauseOrdering_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a07da5cc47f8e6cc6db6be5e055580ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const RestartAlgorithm</type>
      <name>NO_RESTART</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a039ae13cd6b782e1f99678d4d28015a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const RestartAlgorithm</type>
      <name>LUBY_RESTART</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3b12089e6ab77ba0ccce005404b6bdaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const RestartAlgorithm</type>
      <name>DL_MOVING_AVERAGE_RESTART</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0a52bb15631c83768272904bfcfe9624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const RestartAlgorithm</type>
      <name>LBD_MOVING_AVERAGE_RESTART</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a548bf4dbe7fe1edc79c4b0ff0ccb1e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const RestartAlgorithm</type>
      <name>FIXED_RESTART</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a72bdf170f7b41fc06597fbcc01fe3025</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const RestartAlgorithm</type>
      <name>RestartAlgorithm_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>abb7bcdf9aad20babd08b21fabc28848d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const RestartAlgorithm</type>
      <name>RestartAlgorithm_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8dbc16942213b9aaf1b2dc8f887ca2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>RestartAlgorithm_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae721a71cfc3a975c1204bdb7d4f008d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MaxSatAssumptionOrder</type>
      <name>DEFAULT_ASSUMPTION_ORDER</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad7b7f934e8517cf796868eae9b3d2754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MaxSatAssumptionOrder</type>
      <name>ORDER_ASSUMPTION_BY_DEPTH</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6c958cd2b6193a939404d328049b2c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MaxSatAssumptionOrder</type>
      <name>ORDER_ASSUMPTION_BY_WEIGHT</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a241a9b2e33328b7462841a00de8b98ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MaxSatAssumptionOrder</type>
      <name>MaxSatAssumptionOrder_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a70bb2afa1b27329c604e668f04d92e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MaxSatAssumptionOrder</type>
      <name>MaxSatAssumptionOrder_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1c83568d861a69277f8048192f6bbc05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MaxSatAssumptionOrder_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a549d159c9ca81f44357b8b0aaee3754d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MaxSatStratificationAlgorithm</type>
      <name>STRATIFICATION_NONE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a41af0908f9b89fe55649767609040acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MaxSatStratificationAlgorithm</type>
      <name>STRATIFICATION_DESCENT</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af8c3f740d6416c55d029b1fc1cc208f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MaxSatStratificationAlgorithm</type>
      <name>STRATIFICATION_ASCENT</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a52849202bd1f8caa584392c7894676da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MaxSatStratificationAlgorithm</type>
      <name>MaxSatStratificationAlgorithm_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aaeecf950f2739bbf56ce999d68d13309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MaxSatStratificationAlgorithm</type>
      <name>MaxSatStratificationAlgorithm_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3264acff21635894db666781f77205f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MaxSatStratificationAlgorithm_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6876ba2c6d0ad20aea70014f09f2f267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SearchBranching</type>
      <name>AUTOMATIC_SEARCH</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac9deaec5fe4bf4180c402e61d23b82f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SearchBranching</type>
      <name>FIXED_SEARCH</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4890ad17eafc5aa7b1dcd7818a18d601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SearchBranching</type>
      <name>PORTFOLIO_SEARCH</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>afb1ea4767376332394160940313806ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SearchBranching</type>
      <name>LP_SEARCH</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab4804e8357aac35b14a37dfd871d3ce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SearchBranching</type>
      <name>PSEUDO_COST_SEARCH</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1e2441ec2726b8957f3a9b0cc6ac5b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SearchBranching</type>
      <name>PORTFOLIO_WITH_QUICK_RESTART_SEARCH</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6eda43a2cf694cb7856dde222e1fc87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SearchBranching</type>
      <name>SearchBranching_MIN</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad6fefc3c15637bd5b72f5658cf70d80b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SearchBranching</type>
      <name>SearchBranching_MAX</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>adb4b9d057fde96f94f7c0bab1d203346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SearchBranching_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a93e71a28216f0a05511cc130748fb96e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRestartAlgorithmsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af406978849dbaf1f05a18efaad2f007a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kDefaultRestartAlgorithmsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa18b9339a967048dd17e6ad8966007ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPreferredVariableOrderFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac6096a631e14783bf6093a9fbc81946f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxSatAssumptionOrderFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a240437a4d6b5d1effdb6275738c5eaa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRandomBranchesRatioFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a09fc51778ff5af0e840ee8135e1b3b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRandomPolarityRatioFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3a81f3cc125d801cbeb65a65f7e80eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUsePbResolutionFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae02370c1bfb0e8d9839c92d8d057fb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMinimizeReductionDuringPbResolutionFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9349fac1453b77592ef8ab1fab57a10b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxSatReverseAssumptionOrderFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad2a4d61d0ffc23be2d34c48f81ec9cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseOverloadCheckerInCumulativeConstraintFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a415e27d44533108ee47e0c984306691e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kClauseCleanupProtectionFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8f3de5a600785985e5ddad0a80066333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kClauseCleanupOrderingFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a790c3a37c12afeb44e6b0b2dd08778b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseErwaHeuristicFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2e8655cf53b8967091193fb91734c7f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kAlsoBumpVariablesInConflictReasonsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aefca97e1e69617e21fee4c937df712e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseBlockingRestartFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a816fb45e88a2d65ae8974edd40278a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLogSearchProgressFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3fafefd6a11b06d24c3d86aabab96f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kStrategyChangeIncreaseRatioFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>afe812a51c52ba091a8b723ecb9eef7b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNumConflictsBeforeStrategyChangesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a208e33992f0ed37dc27aef55428300d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSearchBranchingFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae360fe68ef818842aeda8c5ffbd44325</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kInitialVariablesActivityFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>acbe59660690fe3b487d644239d169582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kExploitBestSolutionFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a22f1ca83c99ef1d393e1cadf067ce649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kOptimizeWithCoreFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad30000218a9902a47c3199f15e5acfcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kOptimizeWithMaxHsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad36f3824084eabd2707844617bcb0b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kEnumerateAllSolutionsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a726b7d0448386547c4584189bf39b0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseTimetableEdgeFindingInCumulativeConstraintFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aef0dc3877fb1c91c20a8894c0169f9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kOnlyAddCutsAtLevelZeroFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a62a00fdc77c5f05a27612544f1211a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kAddKnapsackCutsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a86a234a126daf33bb2c92c9c26316193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kAddCgCutsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0055ab3fd1ddc3d483982c86bc40addc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSearchRandomizationToleranceFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a69a80db1e62d7f5d68c64594af003633</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNumSearchWorkersFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a43fcfbbe1a76b248772e258ce94c3dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kFillTightenedDomainsInResponseFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>abfd68ddad1aeee5fb1a9a7998d673067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kStopAfterFirstSolutionFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8cfe5215106bf66580e10df762d8df14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseLnsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab09a7ef3e5f8c1cd0cfce826993f56d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLnsFocusOnDecisionVariablesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a28b7f6e706775e4aca56efa199f24895</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRinsLnsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a23df77ed9b4c43561c0b77d774186703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRandomizeSearchFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1c5b8a718fe62e6426ee9d44207ed459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseCombinedNoOverlapFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0fce1691547c5fac1bad1e5247a0ec08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMinOrthogonalityForLpConstraintsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a82c16fd139d1d22bc3e3e128a0b6367e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMipMaxActivityExponentFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>abcf76f881b9962d96f0baf096eae78be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kInitialPolarityFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a40b1f1fc705be587ab8403dcb72cc64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMinimizationAlgorithmFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a196fc810175e7ea00a062ce08900db5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kClauseCleanupPeriodFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>adc73d56348c84c4b8320476a068776d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kClauseCleanupTargetFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a96ff9c0cf9eeda87f5b74dc448d6f8a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVariableActivityDecayFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3a1dde65b02a8e3879b317f6297fc684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxVariableActivityValueFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8f444cb50707fe4ea62d3fea778a0101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kClauseActivityDecayFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a28f1a3da8023995652635d5e80e2e414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxClauseActivityValueFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>abf78313f09e9309d3737e0a45a008d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kGlucoseMaxDecayFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab102db024a333b6d30951a64c6c570f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kGlucoseDecayIncrementFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>adb991538acefb7b841eceda74bd09dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kGlucoseDecayIncrementPeriodFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab6bd36ab5e8ac74142aca989ed63d427</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRestartPeriodFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aed44c38247322dd8841dad88c93ced63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRandomSeedFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2ce767a0c9a98c33f7694d052d051538</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kBinaryMinimizationAlgorithmFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3dd7eda0cca39fe6162cdaab1feae91f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxTimeInSecondsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a6a3f411ee8002c8162f380d6a0108867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxNumberOfConflictsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a607fa966f475c19710044b12f6949bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxMemoryInMbFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a379946c64e5b975bd65828a5b53368e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUsePhaseSavingFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0b576e388d027f867ffcfa7c502110fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSubsumptionDuringConflictAnalysisFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8cf1dd5098d87cad2eec2b16b64de124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTreatBinaryClausesSeparatelyFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aafa7017995df0a226a5d767acaea64fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCountAssumptionLevelsInLbdFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af9971f7d7c6b62ada1b44fad08ecd3e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPbCleanupIncrementFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3886c59f2c1646fee2edfb881f3fc587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPbCleanupRatioFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ae5400508093140a13156f1ef01f418da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxSatStratificationFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a33faf4f3bcff96f0102884483264e7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPresolveBveThresholdFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9c50ae63bf0b2e21fb79208240cbdc85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPresolveProbingDeterministicTimeLimitFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a150c09000b2685971f8835fe40d895f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPresolveBveClauseWeightFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2a9eb3419a8c704edf57a5ce411214ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kClauseCleanupLbdBoundFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>afeda0c2eebd8b2dbf1b90cc22998e9d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPresolveBlockedClauseFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a38adc13c08d63cbd90fd628e1962c738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPresolveUseBvaFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>addfd4f6c3878fc8e598fefea7dd24176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseOptimizationHintsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4cbdfb50d91fbf0b4696c88475540857</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMinimizeCoreFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a4039a8baf98b25e39f40539ed26d3fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRestartRunningWindowSizeFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7e8a63a5ec12cfbc18ec13994eee4ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRestartDlAverageRatioFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a512767e3c3d5d19bf4a578d63a9b05a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kBlockingRestartMultiplierFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0ffa5f515b8f6f150435baaec6797bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxDeterministicTimeFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a22e17703669bb6aba37ca9f3f14adda0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kBlockingRestartWindowSizeFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a7c319281fb3e6e20b066ab9e06540f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPresolveBvaThresholdFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2ceb1aecb2eb3a62699db14f9b2c8673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRestartLbdAverageRatioFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa657344ae91604666c7dd3f07110dcf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kFindMultipleCoresFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a8a3ff5a9f7ca07ad320f8de27dd11a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCoverOptimizationFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2634c1499952d10cea22a5d1ab19c73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUsePrecedencesInDisjunctiveConstraintFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0358c4037b7b7cb9f643e2acccaa0a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseDisjunctiveConstraintInCumulativeConstraintFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa71d4a2192cbd114147053b8b2745543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLinearizationLevelFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aae8c81000a2228572ddc74e3e9c415d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxNumCutsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aefa6114bd3c7b0578efb5ec00614f3ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMinimizeWithPropagationRestartPeriodFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ad1cd45388a7e26653eab139dac6f1ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMinimizeWithPropagationNumDecisionsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a961fcd17f83b9be7e1f95c77452c572c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kBinarySearchNumConflictsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a3b5ecd6ba591e92b8d3474b6717fdb2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLnsNumThreadsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a90c8b989cc5e7f1c0c02a24718d5ff87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kExploitAllLpSolutionFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa6520cf3a4a925d78e5e58e9024356e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kExploitObjectiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5ac25d04135b98ac44a5c81890d5decf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCpModelPresolveFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a56caad7ec47914cfebe6ba0109399208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCpModelUseSatPresolveFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a960c984d17615b6a0a60b2301094266d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kBooleanEncodingLevelFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a647017b4c2949fff125306b7c209df3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kInstantiateAllVariablesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0bc0f8e47b7b03ac681ff57ada4217e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kAutoDetectGreaterThanAtLeastOneOfFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac9e4b7f758aeb090cb697e2c4554fa9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kShareObjectiveBoundsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9238452bb7b724e4d2985c484574c6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kShareLevelZeroBoundsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2729588aea2170294ae939f89d5730fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseOptionalVariablesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ab235b1dadc66cfdcc2028440e484fff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseExactLpReasonFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>ac7683b3a2936667b0717e99694dfab20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCpModelProbingLevelFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>afbf561236292602be18854f2bb02f29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kAddMirCutsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af2ca8644501d2e1dccf12eb02413fba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseMirRoundingFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9867f6aec9f6d3b99b7137234b4f331f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kAddLpConstraintsLazilyFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a216226e11c16f5aaf91b743a9498d75d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kExploitIntegerLpSolutionFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a890e3e04001aab3224a754f07592ec9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxIntegerRoundingScalingFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a2bf7fbe9acaffe79c4300ec8f3ae2162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxInactiveCountFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a32bffbc55e2a874adc8c1280963dff20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kConstraintRemovalBatchSizeFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>af1ce6e04c2532019f78de4d6d03235a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPseudoCostReliabilityThresholdFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1e22c32f0841fa785744eca0e5177c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMipMaxBoundFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a5495443c4f03536e063974b5a39d04e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMipVarScalingFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a9fc3c9ced470583594048a471748ec4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMipWantedPrecisionFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>aa559086c79e7d1dab18575ee351054e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMipCheckPrecisionFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0a19f4ba1b97ab1cd80e227b41e4fbae</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fsat_5fparameters_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a1f3d169deac565ec8fc486cd2aaf6270</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1SatParameters.html</anchorfile>
      <anchor>a0e1f473202adcb674fa3c816fdd7c707</anchor>
      <arglist>(SatParameters &amp;a, SatParameters &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SavingsFilteredDecisionBuilder::SavingsContainer</name>
    <filename>classSavingsFilteredDecisionBuilder_1_1SavingsContainer.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>SavingsFilteredDecisionBuilder::SavingsParameters</name>
    <filename>structSavingsFilteredDecisionBuilder_1_1SavingsParameters.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>neighbors_ratio</name>
      <anchorfile>structSavingsFilteredDecisionBuilder_1_1SavingsParameters.html</anchorfile>
      <anchor>a9b87637bdf8bb745a23976e9b559a8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_memory_usage_bytes</name>
      <anchorfile>structSavingsFilteredDecisionBuilder_1_1SavingsParameters.html</anchorfile>
      <anchor>a7d90515435ec6e9b43839c9ab9cb0fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_reverse_arcs</name>
      <anchorfile>structSavingsFilteredDecisionBuilder_1_1SavingsParameters.html</anchorfile>
      <anchor>ae5991151717961945329988d3f51303b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>arc_coefficient</name>
      <anchorfile>structSavingsFilteredDecisionBuilder_1_1SavingsParameters.html</anchorfile>
      <anchor>a20c144ff0287a9742bcd1e5a0b3fed1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SccCounterOutput</name>
    <filename>structSccCounterOutput.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>emplace_back</name>
      <anchorfile>structSccCounterOutput.html</anchorfile>
      <anchor>a98b2cfdab0fa5812eec11b4a5e85bf05</anchor>
      <arglist>(NodeIndex const *b, NodeIndex const *e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structSccCounterOutput.html</anchorfile>
      <anchor>a31eef251d309df342e2dd150389e2458</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>number_of_components</name>
      <anchorfile>structSccCounterOutput.html</anchorfile>
      <anchor>aa506bc8bf4c4be4615a22a7d1d1d1662</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SearchLimit</name>
    <filename>classoperations__research_1_1SearchLimit.html</filename>
    <base>operations_research::SearchMonitor</base>
    <member kind="function">
      <type></type>
      <name>SearchLimit</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>ae853c8ceb480c9d8e8ba355108c9b816</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SearchLimit</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a0fe1a712b9cd0ea7dbb96a590d1684f7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>crossed</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a5fce652e4e80c2ac089bdd70281feeb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Check</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a1cfadc6db5f71ebf750ab119a110d9f0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>aabfdc25c6657291757a2230513d51162</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a8f26a36c2c4d7738c37eba2ae7e26f3e</anchor>
      <arglist>(const SearchLimit *const limit)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SearchLimit *</type>
      <name>MakeClone</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a011a3a7171696f1f440d753dcd5a1136</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>aa184196d0761829d7df21643bc498a01</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a4d58c37975405a86ef02fd0fdd7ed34f</anchor>
      <arglist>(DecisionBuilder *const b) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a5e78de48144b2c4446fb2847a525a061</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a3ce36720ef2cd8490199ac815d07a1d1</anchor>
      <arglist>(Decision *const d) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a1e65e704ea5249bc9c346b46449ff1ba</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab98b6cd2d173adb819adff4e1839f10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac4f21fe0c304fc837d903feb65fe858f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9b300dfb35699cf80504c00f2cbe9153</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a775e4bc59c759621fdb0b6f129744296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SearchLog</name>
    <filename>classoperations__research_1_1SearchLog.html</filename>
    <base>operations_research::SearchMonitor</base>
    <member kind="function">
      <type></type>
      <name>SearchLog</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a83116fcc9628ff5947683d1b22c4366f</anchor>
      <arglist>(Solver *const s, OptimizeVar *const obj, IntVar *const var, double scaling_factor, std::function&lt; std::string()&gt; display_callback, int period)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SearchLog</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>aec010491a37dfd342f3dc881461734a5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>aeadd9144f22750344a8d9bb727195182</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>ad1c8c5d6118dd4ba3e27d8e38bcee0d2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a42dcd4deb1a7865add8800a8b4645c27</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a070cd3a6cc16d608bdd36d3acfcd6192</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a290b7238507e711ea719b38a65d1d002</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a5ea81d186550720183bf3e3ef120b339</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>aabfe35ed51f64c6386f38c97a4752e33</anchor>
      <arglist>(Decision *const decision) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>ae5f089b3b2b0731086bd6787416e7f41</anchor>
      <arglist>(Decision *const decision) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OutputDecision</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a3552cd62545e80d0ca632ac31911d0d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Maintain</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>afc544b08813308dcf1652885f7ad6dac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>aa432e517e9a910a0f84fab7b46627f10</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a8a93918c1aa6f9518b9f88ed71611069</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>ae853a2dfed7755b376ccbee1c534682f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a2f3ea4577e11fad619c2d7dcad1617cd</anchor>
      <arglist>(DecisionBuilder *const b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9cb45d67a60d4729f1e1fd4d0c6442db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9b300dfb35699cf80504c00f2cbe9153</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a775e4bc59c759621fdb0b6f129744296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OutputLine</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a06414d7293575b4b9ac5b7b7daa3b57d</anchor>
      <arglist>(const std::string &amp;line)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::Solver::SearchLogParameters</name>
    <filename>structoperations__research_1_1Solver_1_1SearchLogParameters.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>branch_period</name>
      <anchorfile>structoperations__research_1_1Solver_1_1SearchLogParameters.html</anchorfile>
      <anchor>a71a927cbad9edffb0f6bed715809c251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OptimizeVar *</type>
      <name>objective</name>
      <anchorfile>structoperations__research_1_1Solver_1_1SearchLogParameters.html</anchorfile>
      <anchor>aa0b92206253b0409db49ebda4632b90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IntVar *</type>
      <name>variable</name>
      <anchorfile>structoperations__research_1_1Solver_1_1SearchLogParameters.html</anchorfile>
      <anchor>ae40b4b440b5b9e79ed7cd50b444a5466</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scaling_factor</name>
      <anchorfile>structoperations__research_1_1Solver_1_1SearchLogParameters.html</anchorfile>
      <anchor>a61e516d58793110b2d8bca05ac810a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; std::string()&gt;</type>
      <name>display_callback</name>
      <anchorfile>structoperations__research_1_1Solver_1_1SearchLogParameters.html</anchorfile>
      <anchor>a95a779b76301c3b1241e93f26332adb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SearchMonitor</name>
    <filename>classoperations__research_1_1SearchMonitor.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>SearchMonitor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa13f15c14e3a5237526cf6215f3b3077</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SearchMonitor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a10ccf64fe0a40e01816b20818a32b8b6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a705ae4bfa396632c23d65f37793391f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab98b6cd2d173adb819adff4e1839f10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a2f3ea4577e11fad619c2d7dcad1617cd</anchor>
      <arglist>(DecisionBuilder *const b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aadfcba48c62683c6d6463a7adb9b0a28</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac4f21fe0c304fc837d903feb65fe858f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9cb45d67a60d4729f1e1fd4d0c6442db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9b300dfb35699cf80504c00f2cbe9153</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a775e4bc59c759621fdb0b6f129744296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>internal::ConnectedComponentsTypeHelper::SelectContainer</name>
    <filename>structinternal_1_1ConnectedComponentsTypeHelper_1_1SelectContainer.html</filename>
    <templarg>U</templarg>
    <templarg>E</templarg>
    <member kind="typedef">
      <type>std::set&lt; T, CompareOrHashT &gt;</type>
      <name>Set</name>
      <anchorfile>structinternal_1_1ConnectedComponentsTypeHelper_1_1SelectContainer.html</anchorfile>
      <anchor>a5dde23c75f6bb978eeb813de8c33e45c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; T, int, CompareOrHashT &gt;</type>
      <name>Map</name>
      <anchorfile>structinternal_1_1ConnectedComponentsTypeHelper_1_1SelectContainer.html</anchorfile>
      <anchor>a0ed154f290edff8b152633553a5448d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>internal::ConnectedComponentsTypeHelper::SelectContainer&lt; U, absl::enable_if_t&lt; std::is_integral&lt; decltype(std::declval&lt; const U &amp; &gt;()(std::declval&lt; const T &amp; &gt;()))&gt;::value &gt; &gt;</name>
    <filename>structinternal_1_1ConnectedComponentsTypeHelper_1_1SelectContainer_3_01U_00_01absl_1_1enable__if709ff45ae30ec82cc2c06c401b5d6cb4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>absl::flat_hash_set&lt; T, CompareOrHashT &gt;</type>
      <name>Set</name>
      <anchorfile>structinternal_1_1ConnectedComponentsTypeHelper_1_1SelectContainer_3_01U_00_01absl_1_1enable__if709ff45ae30ec82cc2c06c401b5d6cb4.html</anchorfile>
      <anchor>a439a1cb9d2121271a7db8e24700b8377</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>absl::flat_hash_map&lt; T, int, CompareOrHashT &gt;</type>
      <name>Map</name>
      <anchorfile>structinternal_1_1ConnectedComponentsTypeHelper_1_1SelectContainer_3_01U_00_01absl_1_1enable__if709ff45ae30ec82cc2c06c401b5d6cb4.html</anchorfile>
      <anchor>a59d3484159e1af75544ad7966e796f31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SequenceVar</name>
    <filename>classoperations__research_1_1SequenceVar.html</filename>
    <base>operations_research::PropagationBaseObject</base>
    <member kind="function">
      <type></type>
      <name>SequenceVar</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a5cd7df5031e4b9e89532c03f542078aa</anchor>
      <arglist>(Solver *const s, const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; IntVar * &gt; &amp;nexts, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SequenceVar</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a280b3b63fee8247cc2b89a5ec877497b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>af92814129c466409ff4c004002c2034d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DurationRange</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a12e4526c316b3d49b8cd8cb91a037118</anchor>
      <arglist>(int64 *const dmin, int64 *const dmax) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HorizonRange</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a55eba26b207c5fda44e8b94baa6d9d26</anchor>
      <arglist>(int64 *const hmin, int64 *const hmax) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ActiveHorizonRange</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a281b19bdc37eed61de45be3ad8745550</anchor>
      <arglist>(int64 *const hmin, int64 *const hmax) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeStatistics</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>aad89b1d091262e23caf515cae51ba10c</anchor>
      <arglist>(int *const ranked, int *const not_ranked, int *const unperformed) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankFirst</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>ae44ab42e06f43ced3bd04b251965b73f</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankNotFirst</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a245d9693519203fc1a9d406684829812</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankLast</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>aa0e28d22da71b3976d56f59a14e08854</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankNotLast</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a4e4a8cbd11cbf363fe073dca6e757b37</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputePossibleFirstsAndLasts</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>ac8f9d8f2220c77dd4f79a652e6aa7b88</anchor>
      <arglist>(std::vector&lt; int &gt; *const possible_firsts, std::vector&lt; int &gt; *const possible_lasts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a6993f8721564fc5be685998aa3e4ed47</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;rank_first, const std::vector&lt; int &gt; &amp;rank_last, const std::vector&lt; int &gt; &amp;unperformed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a9af118a9bace50fc7a94224578757a32</anchor>
      <arglist>(std::vector&lt; int &gt; *const rank_first, std::vector&lt; int &gt; *const rank_last, std::vector&lt; int &gt; *const unperformed) const</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>Interval</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>adcef8966bcacea28d9ad6e554bd92a4f</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>ae6327825d9ed07ea7e97ac731e4d6ff8</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>size</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a80930826abef932c86f9f751daa04ab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a7004fb329da93aea538284d1213d0cc3</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SequenceVarElement</name>
    <filename>classoperations__research_1_1SequenceVarElement.html</filename>
    <base>operations_research::AssignmentElement</base>
    <member kind="function">
      <type></type>
      <name>SequenceVarElement</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a40179b14fb9451e5d8f6fc3666a6caa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceVarElement</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>ac5f3f869b023af1f5580ed913bdb962f</anchor>
      <arglist>(SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a7aad1cd8d56d5d85aaad8face6643e64</anchor>
      <arglist>(SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>Clone</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a6f2f3905bb0616011690eca0f83dd589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a6459f3a116d5253c4080fd2a3d52585b</anchor>
      <arglist>(const SequenceVarElement &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a88093f53d27e3a7a7a183a615223ab54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a4019a1b4cf9db5ed6885421d9e038c41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a136038294620a9a9d575eae64a3019eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadFromProto</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>af1c4120e8b1b34d629b0b2fae26e2b26</anchor>
      <arglist>(const SequenceVarAssignment &amp;sequence_var_assignment_proto)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteToProto</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a25c73fd837475a0ae2ca740a1eb4d0aa</anchor>
      <arglist>(SequenceVarAssignment *sequence_var_assignment_proto) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>ForwardSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a4c16de890c82a38ac4d26499a2617a74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>BackwardSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a752ba08cda16ac39c27e6e110e76e7f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>Unperformed</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a23bf65206e3c559e50748433229155bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a9240cc020d1d179aeb4ff57993ac822a</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;forward_sequence, const std::vector&lt; int &gt; &amp;backward_sequence, const std::vector&lt; int &gt; &amp;unperformed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForwardSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>aa416720977aa00d0f25d352166f4f005</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;forward_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBackwardSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a7296d95d6ce7890ff1ace7779dee8755</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;backward_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUnperformed</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a60768b9a65cc2b1f9b22dded7572556d</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;unperformed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a5439b37d5c44ae4c1b22b85073a82d6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a363efa1fc4e42a235e80aa881aa56dd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a2dde19669941089f5262965a4de3fb8a</anchor>
      <arglist>(const SequenceVarElement &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a41b758288965e16fa33baf041c7d981b</anchor>
      <arglist>(const SequenceVarElement &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a065f45865ec10318174fad87f6b00075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a878af7bb76cdf04d84eb523d6deeb696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>aaa91977feff42f876d7cd00556ab94f7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SequenceVarLocalSearchHandler</name>
    <filename>classoperations__research_1_1SequenceVarLocalSearchHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>SequenceVarLocalSearchHandler</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>a10225ec8088a15a7b023e430f942ee8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceVarLocalSearchHandler</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>afe4c3c52a3f4f9af98a3e751c6f21823</anchor>
      <arglist>(const SequenceVarLocalSearchHandler &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceVarLocalSearchHandler</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>a14031a3e973566f504b4d125fb74e76a</anchor>
      <arglist>(SequenceVarLocalSearchOperator *op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToAssignment</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>aef9a34fb85f40837a20077b21ac8bb53</anchor>
      <arglist>(SequenceVar *var, const std::vector&lt; int &gt; &amp;value, bool active, std::vector&lt; int &gt; *assignment_indices, int64 index, Assignment *assignment) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValueFromAssignent</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>a837a3c961ef7db00cc4b4d0e4958b2bd</anchor>
      <arglist>(const Assignment &amp;assignment, SequenceVar *var, int64 index, std::vector&lt; int &gt; *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnRevertChanges</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>a3e6cc7fffb5d26c6b94576e88197a355</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnAddVars</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>aec17ad927d45e32c42f3847ff5175a19</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SequenceVarLocalSearchOperator</name>
    <filename>classoperations__research_1_1SequenceVarLocalSearchOperator.html</filename>
    <base>operations_research::VarLocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>SequenceVarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>a96001d1aefc31de08b25a4f43f949c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceVarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>acc524c64d6fc3e0fbf32f7a1fe3fb264</anchor>
      <arglist>(const std::vector&lt; SequenceVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SequenceVarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>a12207830e46d0711d7e2d54170215417</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>Sequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>a02492df6e37f41273650ff27bd25e3a5</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>OldSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>aaaf6617f0ee547eb84761a1d291d75a7</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForwardSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>a9000b96654d1467e831d8f020701429e</anchor>
      <arglist>(int64 index, const std::vector&lt; int &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBackwardSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>aa2f375549359ac7050eaed6f3562c42e</anchor>
      <arglist>(int64 index, const std::vector&lt; int &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Val &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>V *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const Val &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const Val &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; V * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnStart</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acea2a4d4db296445315d66aaec85ee81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a2951ae57e5fd3fce7d4f9b831594b460</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
      <name>backward_values_</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>a5c478f55875ccdb31b2aacaa8852d460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; V * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Val &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Val &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Val &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Handler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>SequenceVarLocalSearchHandler</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>ab80b964f556e6175e70741b63de9f94e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Set</name>
    <filename>classoperations__research_1_1Set.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Integer</type>
      <name>IntegerType</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a2eb0206e8f324178feddb08668851373</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Set</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a1af4b8873ead26e8375650d7cbd80ff9</anchor>
      <arglist>(Integer n)</arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>value</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>ad84aaa6dd878e39e09b522f9dd7653eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Set</type>
      <name>AddElement</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>aa0c538f9b81cb0081a115b5ea51b9d6e</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>Set</type>
      <name>RemoveElement</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>aa6d7b94f2dfe466cfe4fa7846b040721</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a25fd2252df71c9531341ea392d639b06</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Includes</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a16460bdbc6388e9895591c5c3d396869</anchor>
      <arglist>(Set other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Cardinality</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a24144feea74d47a81c7c1476b24e8e62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SmallestElement</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a7a026ad4d35f459e5ca13e30cea9ad21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Set</type>
      <name>RemoveSmallestElement</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a1f635310ba40e9118f83662f4839e104</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ElementRank</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a5af831720988b31639b578e73d727f4e</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>Set</type>
      <name>SmallestSingleton</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>aafdb1b510571bc337d0dee99f4ef7dea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SingletonRank</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>aa3639cb771e8dd36bb9092c869cae7c3</anchor>
      <arglist>(Set singleton) const</arglist>
    </member>
    <member kind="function">
      <type>ElementIterator&lt; Set &gt;</type>
      <name>begin</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>ab6cacc30b3640c31b723e42570c73bd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ElementIterator&lt; Set &gt;</type>
      <name>end</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a1cfc40ac6c93cea1957a96ea082010ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a0bdd9a18dc27c98ab0e7599fa35a039a</anchor>
      <arglist>(const Set &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SmallestElement</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a06cef107c255364827efeb88eb110e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Cardinality</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>aec3dd7ca92402871bc9f25f2a99c117e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Set</type>
      <name>FullSet</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a141358673ffd6a239cff71146df9b133</anchor>
      <arglist>(Integer card)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Set</type>
      <name>Singleton</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a4a7e7acabfbd596162ed619fcca5746f</anchor>
      <arglist>(Integer n)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Integer</type>
      <name>One</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>a1743557f4e470ddb1167fe1393fb67d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Integer</type>
      <name>Zero</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>ae9c419f7af4bb71f2ef3d9734e14b02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MaxCardinality</name>
      <anchorfile>classoperations__research_1_1Set.html</anchorfile>
      <anchor>acf527d4f2a9de5310586b357f76ef408</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SetRangeIterator</name>
    <filename>classoperations__research_1_1SetRangeIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>SetRange::SetType</type>
      <name>SetType</name>
      <anchorfile>classoperations__research_1_1SetRangeIterator.html</anchorfile>
      <anchor>ac33a8fa2bd3858cb38ac4aa7027b14f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetType::IntegerType</type>
      <name>IntegerType</name>
      <anchorfile>classoperations__research_1_1SetRangeIterator.html</anchorfile>
      <anchor>a8b736bbe536c9abc15d84d5fa462a506</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetRangeIterator</name>
      <anchorfile>classoperations__research_1_1SetRangeIterator.html</anchorfile>
      <anchor>ab10604e513e69c2e69885026aa4419f6</anchor>
      <arglist>(const SetType set)</arglist>
    </member>
    <member kind="function">
      <type>SetType</type>
      <name>operator *</name>
      <anchorfile>classoperations__research_1_1SetRangeIterator.html</anchorfile>
      <anchor>a91417bb16ed420eba66eeb88cad385a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1SetRangeIterator.html</anchorfile>
      <anchor>ae49d2a420e45ad8370e29906e66572ee</anchor>
      <arglist>(const SetRangeIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const SetRangeIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classoperations__research_1_1SetRangeIterator.html</anchorfile>
      <anchor>a2b617b0eee1cb874ce18d0fbfbcb0857</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SetRangeWithCardinality</name>
    <filename>classoperations__research_1_1SetRangeWithCardinality.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Set</type>
      <name>SetType</name>
      <anchorfile>classoperations__research_1_1SetRangeWithCardinality.html</anchorfile>
      <anchor>aee6525360117d00bf72c1c399cdaab77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetRangeWithCardinality</name>
      <anchorfile>classoperations__research_1_1SetRangeWithCardinality.html</anchorfile>
      <anchor>a361a8278313aa9ba0c4628b0da6590b1</anchor>
      <arglist>(int card, int max_card)</arglist>
    </member>
    <member kind="function">
      <type>SetRangeIterator&lt; SetRangeWithCardinality &gt;</type>
      <name>begin</name>
      <anchorfile>classoperations__research_1_1SetRangeWithCardinality.html</anchorfile>
      <anchor>a03ad5ce85e22b3acb0a25b8c09857b72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SetRangeIterator&lt; SetRangeWithCardinality &gt;</type>
      <name>end</name>
      <anchorfile>classoperations__research_1_1SetRangeWithCardinality.html</anchorfile>
      <anchor>a69748fc40a699f2458bf7099c39b5c7d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SimpleMaxFlow</name>
    <filename>classoperations__research_1_1SimpleMaxFlow.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a8a7acde49c4d55f2eb42e2b6869cdb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a8a7acde49c4d55f2eb42e2b6869cdb3da3b60465215ab4363dec64fd313771658</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSSIBLE_OVERFLOW</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a8a7acde49c4d55f2eb42e2b6869cdb3da18a3ff25435f10be68329d4b39de4700</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_INPUT</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a8a7acde49c4d55f2eb42e2b6869cdb3da2260e76ea3adc21a9cd21f46f232ebbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a8a7acde49c4d55f2eb42e2b6869cdb3da11ce6c709e3b39a368358f2ee79942d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a8a7acde49c4d55f2eb42e2b6869cdb3da3b60465215ab4363dec64fd313771658</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSSIBLE_OVERFLOW</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a8a7acde49c4d55f2eb42e2b6869cdb3da18a3ff25435f10be68329d4b39de4700</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_INPUT</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a8a7acde49c4d55f2eb42e2b6869cdb3da2260e76ea3adc21a9cd21f46f232ebbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a8a7acde49c4d55f2eb42e2b6869cdb3da11ce6c709e3b39a368358f2ee79942d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleMaxFlow</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>ada0b88e232c739108184deb35dd54b3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArcIndex</type>
      <name>AddArcWithCapacity</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a64c1cc700d51eca9eac6bec6542d0bfb</anchor>
      <arglist>(NodeIndex tail, NodeIndex head, FlowQuantity capacity)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>NumNodes</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a200b4dbff9102ee1232e05f569fc2427</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndex</type>
      <name>NumArcs</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a10899eb2ae1b242c4737e4c9e7ecdae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>Tail</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>aead7fdba72a6048caad9c20150368348</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>ab239080405c843687c20d1533b5512be</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Capacity</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a86dad6a200cad46b7d53305e2837cfb3</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a5ae2ad55f2fd8ce704fe695f835c2ed2</anchor>
      <arglist>(NodeIndex source, NodeIndex sink)</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>OptimalFlow</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a553204b2dccf205ff9c00c3c589d309b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Flow</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>aef35310ddd005652bb2b3db14c323ae9</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSourceSideMinCut</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>ae83c98d7dcf6a2d76a5d500273255fe6</anchor>
      <arglist>(std::vector&lt; NodeIndex &gt; *result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSinkSideMinCut</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a693abc3c55e13dbe2f836e562b5a9c0f</anchor>
      <arglist>(std::vector&lt; NodeIndex &gt; *result)</arglist>
    </member>
    <member kind="function">
      <type>FlowModel</type>
      <name>CreateFlowModelOfLastSolve</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a177f9e6c8a8c603e3cead358da5d1026</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcCapacity</name>
      <anchorfile>classoperations__research_1_1SimpleMaxFlow.html</anchorfile>
      <anchor>a57296b653813abdd8d711048e87d1212</anchor>
      <arglist>(ArcIndex arc, FlowQuantity capacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SimpleMinCostFlow</name>
    <filename>classoperations__research_1_1SimpleMinCostFlow.html</filename>
    <base>operations_research::MinCostFlowBase</base>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a44ab1b2f3c5251267bce749661e4e6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a7ba4907297a99141ebd2bc890d5a591c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ab78b8e2734f0e777e79b8e5f93948101</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457af323941c683086f71ce1e7cae7a0a1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBALANCED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ad79843de8fcdec97ba2ce9b83d6cf3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a030d97dcea9960e3d1f127024b0e2168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_COST_RANGE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a41523b94852c3cb55c86ce0e291e3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a44ab1b2f3c5251267bce749661e4e6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a7ba4907297a99141ebd2bc890d5a591c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ab78b8e2734f0e777e79b8e5f93948101</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457af323941c683086f71ce1e7cae7a0a1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBALANCED</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457ad79843de8fcdec97ba2ce9b83d6cf3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_RESULT</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a030d97dcea9960e3d1f127024b0e2168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_COST_RANGE</name>
      <anchorfile>classoperations__research_1_1MinCostFlowBase.html</anchorfile>
      <anchor>ae5cad0c7d9c3eddbc7c3aefbee060457a41523b94852c3cb55c86ce0e291e3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleMinCostFlow</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>a4f442c73b242e40a793d529df4e44d07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArcIndex</type>
      <name>AddArcWithCapacityAndUnitCost</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>a632cc069a03f2d9873715467c09a3810</anchor>
      <arglist>(NodeIndex tail, NodeIndex head, FlowQuantity capacity, CostValue unit_cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNodeSupply</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>a7410b695f7e06dd3de7e6920bc28a3ac</anchor>
      <arglist>(NodeIndex node, FlowQuantity supply)</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>af4eeb2bca251bf02604bcbea5c304421</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>SolveMaxFlowWithMinCost</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>a443e6d29a83127237379abb898a26195</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CostValue</type>
      <name>OptimalCost</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>aaec6a152673412884a7c0d1b59991a70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>MaximumFlow</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>a49270938ce4794ae76f8a25c23ddef65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Flow</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>ac2a7f803ea909ac1f3225f2607f1f33b</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>NumNodes</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>ac80325e043df267da7b4f9e0799bba54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndex</type>
      <name>NumArcs</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>aad61644a352f9eccbce03deffa6f6313</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>Tail</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>a492bdbfb9459995c0f0c41c1cbd0b1bd</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>a4792c687fa3c6fc576f0495e542ee6e5</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Capacity</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>a6f1a6fedf4eff7e8b015564e0a4fc786</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
    <member kind="function">
      <type>FlowQuantity</type>
      <name>Supply</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>a034e472c35933cd3b6c6fc02985f54f7</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function">
      <type>CostValue</type>
      <name>UnitCost</name>
      <anchorfile>classoperations__research_1_1SimpleMinCostFlow.html</anchorfile>
      <anchor>a98af872df7cb24c5d3074cc44a16f9a7</anchor>
      <arglist>(ArcIndex arc) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SimpleRevFIFO</name>
    <filename>classoperations__research_1_1SimpleRevFIFO.html</filename>
    <templarg>T</templarg>
    <class kind="class">operations_research::SimpleRevFIFO::Iterator</class>
    <member kind="function">
      <type></type>
      <name>SimpleRevFIFO</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>afe165ef59bdd847273347b78397eed2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Push</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a4f48d3ad864fe70677b0e3aa3e2d79e8</anchor>
      <arglist>(Solver *const s, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PushIfNotTop</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a8a687b3e2756711e361d82db748ed33b</anchor>
      <arglist>(Solver *const s, T val)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>Last</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>acd419b7fa3414e82f57ef97193948841</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>MutableLast</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a75bdce2821c6d39a9631e72e6851f65d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>LastValue</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a1e4317305a0bc003c6d51548c36d69ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLastValue</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a1cd3644228ae5a0f0ec3862d91276470</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleRevFIFO&lt; operations_research::Demon * &gt;</name>
    <filename>classoperations__research_1_1SimpleRevFIFO.html</filename>
    <member kind="function">
      <type></type>
      <name>SimpleRevFIFO</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>afe165ef59bdd847273347b78397eed2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Push</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a4f48d3ad864fe70677b0e3aa3e2d79e8</anchor>
      <arglist>(Solver *const s, operations_research::Demon * val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PushIfNotTop</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a8a687b3e2756711e361d82db748ed33b</anchor>
      <arglist>(Solver *const s, operations_research::Demon * val)</arglist>
    </member>
    <member kind="function">
      <type>const operations_research::Demon * *</type>
      <name>Last</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>acd419b7fa3414e82f57ef97193948841</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>operations_research::Demon * *</type>
      <name>MutableLast</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a75bdce2821c6d39a9631e72e6851f65d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const operations_research::Demon * &amp;</type>
      <name>LastValue</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a1e4317305a0bc003c6d51548c36d69ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLastValue</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a1cd3644228ae5a0f0ec3862d91276470</anchor>
      <arglist>(const operations_research::Demon * &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SmallRevBitSet</name>
    <filename>classoperations__research_1_1SmallRevBitSet.html</filename>
    <member kind="function">
      <type></type>
      <name>SmallRevBitSet</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>a0984b7441a23c75de696103cadc044b5</anchor>
      <arglist>(int64 size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToOne</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>a427373fdc21062991efa27f991862ff6</anchor>
      <arglist>(Solver *const solver, int64 pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToZero</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>a22f35c8d356a6bc1dfb95bb36da6d37a</anchor>
      <arglist>(Solver *const solver, int64 pos)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Cardinality</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>a689636d2882047089282038c7736a240</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityZero</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>a42ea531fee4409ffb3be7b17cdb434ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityOne</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>ad7bc8a8c7fae5202eb61c2e5c9964108</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetFirstOne</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>a62c1065eed9c23d62fe6febf90ea020d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SolutionCollector</name>
    <filename>classoperations__research_1_1SolutionCollector.html</filename>
    <base>operations_research::SearchMonitor</base>
    <class kind="struct">operations_research::SolutionCollector::SolutionData</class>
    <member kind="function">
      <type></type>
      <name>SolutionCollector</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a9e64163be6305d1ff5330b472f70a7bb</anchor>
      <arglist>(Solver *const solver, const Assignment *assignment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SolutionCollector</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a86e579ea08eacd273a1328c93ebb2d9b</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SolutionCollector</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a3497b80aeb8089fd23eff150d1ca832d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a13b2487c422d35cd36e9bfbc2810c652</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a9f32dc165d6a4c1c09121ecd666a85b2</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a85477416a409ca8c8e4e2cd12166673b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ae8d7a53aab1c924d2ce086d56c14aed9</anchor>
      <arglist>(IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a51ce54667ab06c9c32857f928476d220</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a7dd03e41cfdcfb608c9cbe2c7595ce0d</anchor>
      <arglist>(SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a06d633a79efa310261266714930356bf</anchor>
      <arglist>(const std::vector&lt; SequenceVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddObjective</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a9661ec736470edba26f92dfac906a114</anchor>
      <arglist>(IntVar *const objective)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a3e34da6922cd5c7c03ef9186de8fcf36</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solution_count</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a7e431c9d2ecc17d670c7d39ae12dbb1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>solution</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ae8960240e82f61c3f93c1a81842d29f0</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>wall_time</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a6705ad4a1718e453d0f969901cd77cea</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>branches</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a44ccf194f93a5b1fb2dd15f821d070a1</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>failures</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a17269925652c762db15e61d86b2d9b72</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>objective_value</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a99f5a376a7479ced58f234f6d696094f</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a78e202559c958cf7249d3e8ce6ab1b27</anchor>
      <arglist>(int n, IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartValue</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a5f3395e17a51ad230b73c965e4387d39</anchor>
      <arglist>(int n, IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndValue</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a5014e4129cfdbc7b0f7f6c06b0283fd2</anchor>
      <arglist>(int n, IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationValue</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ae6465359ff5ec74c5f4dcbc0d6e4a3df</anchor>
      <arglist>(int n, IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedValue</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ae47681f11a043b56dab58e533f017cef</anchor>
      <arglist>(int n, IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>ForwardSequence</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a02862f4b1f6f2c81e51e1d54da1a8533</anchor>
      <arglist>(int n, SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>BackwardSequence</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ad5f73f593628e7d72088fb9e3b5a369d</anchor>
      <arglist>(int n, SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>Unperformed</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ab70120f761b82d383eb431bc1cff51b6</anchor>
      <arglist>(int n, SequenceVar *const var) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab98b6cd2d173adb819adff4e1839f10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a2f3ea4577e11fad619c2d7dcad1617cd</anchor>
      <arglist>(DecisionBuilder *const b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aadfcba48c62683c6d6463a7adb9b0a28</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac4f21fe0c304fc837d903feb65fe858f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9cb45d67a60d4729f1e1fd4d0c6442db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9b300dfb35699cf80504c00f2cbe9153</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a775e4bc59c759621fdb0b6f129744296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushSolution</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a917706361bb737a32be97259dae4c3f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Push</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a424f3f1c33e8a55ec2ad31d66b4fa226</anchor>
      <arglist>(const SolutionData &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PopSolution</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a467ca023ad6d3a5c4ffbdba1391f80cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SolutionData</type>
      <name>BuildSolutionDataForCurrentState</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a4a8231d856858b0158109777f3ae57df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>FreeSolution</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a40ada0142b3eb38469bea03d0b9d51d4</anchor>
      <arglist>(Assignment *solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_index</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a5cc8f57cec90beaa0f351e63f1fb24d9</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; Assignment &gt;</type>
      <name>prototype_</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ae75c29baf023cfde70a58b085efecf5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SolutionData &gt;</type>
      <name>solution_data_</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ae4523b9fc891602c62af24e4961dfe74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Assignment * &gt;</type>
      <name>recycle_solutions_</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ad6d087dbee567cc2bf17ee84424a85fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::SolutionCollector::SolutionData</name>
    <filename>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</anchorfile>
      <anchor>af59523edfd6fd990b377a75dda905104</anchor>
      <arglist>(const SolutionData &amp;data) const</arglist>
    </member>
    <member kind="variable">
      <type>Assignment *</type>
      <name>solution</name>
      <anchorfile>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</anchorfile>
      <anchor>a0e535f078ff1680ca4c2610d3d0c2afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>time</name>
      <anchorfile>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</anchorfile>
      <anchor>ae5d1c739b13b73a1975928b4d184807b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>branches</name>
      <anchorfile>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</anchorfile>
      <anchor>ad72f24766540ebd09df0a41869945bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>failures</name>
      <anchorfile>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</anchorfile>
      <anchor>a40ee8d9d06d28d7e8c6c63b2a7b407fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>objective_value</name>
      <anchorfile>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</anchorfile>
      <anchor>affb63b3dbea54e1f5445aef70012f935</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SolutionPool</name>
    <filename>classoperations__research_1_1SolutionPool.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>SolutionPool</name>
      <anchorfile>classoperations__research_1_1SolutionPool.html</anchorfile>
      <anchor>a0c1b8aceb7d2732914ade32de14cfc41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SolutionPool</name>
      <anchorfile>classoperations__research_1_1SolutionPool.html</anchorfile>
      <anchor>acfd2afc60305bddd7927b7f406dce492</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classoperations__research_1_1SolutionPool.html</anchorfile>
      <anchor>a9fb836da69e3c48b8ea240c0aee64d61</anchor>
      <arglist>(Assignment *const assignment)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RegisterNewSolution</name>
      <anchorfile>classoperations__research_1_1SolutionPool.html</anchorfile>
      <anchor>a2e49e36a6c729756e59287fb8a3a3bcd</anchor>
      <arglist>(Assignment *const assignment)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetNextSolution</name>
      <anchorfile>classoperations__research_1_1SolutionPool.html</anchorfile>
      <anchor>a695368c209531f7ae73419543a3d63cd</anchor>
      <arglist>(Assignment *const assignment)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>SyncNeeded</name>
      <anchorfile>classoperations__research_1_1SolutionPool.html</anchorfile>
      <anchor>ab71086e9d6cbca14023cd54a03bd1eff</anchor>
      <arglist>(Assignment *const local_assignment)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Solver</name>
    <filename>classoperations__research_1_1Solver.html</filename>
    <class kind="struct">operations_research::Solver::IntegerCastInfo</class>
    <class kind="struct">operations_research::Solver::SearchLogParameters</class>
    <member kind="enumeration">
      <type></type>
      <name>IntVarStrategy</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VAR_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8bab82ee292f55491e6068a560434f9a649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VAR_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baccdbce6c50c85d4ed2c507dbc5691116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_FIRST_UNBOUND</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba8f69d3fc74e6a3faaa9be2583ce8fce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_RANDOM</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba2547ec2e47ea5c8da65a39817a04f220</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_LOWEST_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba1b2865e3429fc5b1956da5f601ae0ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_HIGHEST_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baf654ef2638f1ed2cd22cee830695a2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_LOWEST_MAX</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba8954f01caaa3b482d349a3ed6c254155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_HIGHEST_MAX</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baf1eadfb5ea6dc853f075589cded04314</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_LOWEST_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba2edce2c3cb946cfafd4541b442b3c511</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_HIGHEST_MAX</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba76e76e12dcb8935b6a7713f849a11df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8babcab6960ac4a67fbb73fb94aa5e752e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_SIZE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8babce047aa9c6aa994057ae76e535d59df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_REGRET_ON_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baf25b88c6fb8a0b956dd3812af864e2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_PATH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba46e6f2fa2b646a2114a32d816ba399ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IntValueStrategy</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VALUE_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a3291dae3d9aa520fe52d1ffaa2a2eadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VALUE_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a78588d0b2a789c20c1252eaffed29e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_MIN_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659ab68b8c2566158157a2ba1660aae07553</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_MAX_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a13d07bd4fac1cf9de979eaa59bb9089b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_RANDOM_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659ab75b213a2a3871a9946a74610e388b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_CENTER_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a0484f76eaad7b381c13bfd4ccd47ef68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_LOWER_HALF</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a5abe444845850bb7a0f2f5c87cef2763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_UPPER_HALF</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a094a0fbeabae8b18ca5367f2564a0896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EvaluatorStrategy</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afabd2f40b8da33b224a5cafd2a053a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_STATIC_GLOBAL_BEST</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afabd2f40b8da33b224a5cafd2a053a21ad2e527283c597c714aa93e9fa72ee0e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_DYNAMIC_GLOBAL_BEST</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afabd2f40b8da33b224a5cafd2a053a21a4c35b22102e37b5ca3d0e62cffcf93d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SequenceStrategy</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEQUENCE_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaaaf8c34e2288277212469f187b5cc268b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEQUENCE_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaa2824d95f6832660bf47a077680403b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SLACK_RANK_FORWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaaeb08eb7c7c4cd0b65331584e4ae7bedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_RANDOM_RANK_FORWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaa139097881c016328ab920b3505100887</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IntervalStrategy</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424a1bd1a37995f05ae93089ba0475799682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424ae24e4970fab2a37e23eaa50c783fd6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_SET_TIMES_FORWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424a0ad27937b9a501b07827886abd97a8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_SET_TIMES_BACKWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424a3892d13c5d6ce4a93609e4eb176195a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LocalSearchOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TWOOPT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a6954bf415a41a3e683060ce706cec2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OROPT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a721d9e61cd2a9b9c221793b9b8086b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RELOCATE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4ae38682b404f0255b45c6c5a3d4d31399</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXCHANGE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a27e459c0332eecea29a0b793ec635b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CROSS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a5dcd871e02933eb704b45ea8ea68a852</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAKEACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a41dc08543fce010d8ce65df80935ff38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAKEINACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a1a2beb32468f536c96644b3faa9c8d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAKECHAININACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aa2d880da72318dcffa237e4f2100c58c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SWAPACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aeac9baf3ea4fa072bb9e4eccf691205d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTENDEDSWAPACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a99c891d39d424a087b7fd551b27906ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PATHLNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aae749f308386810f29338c96daf0e4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FULLPATHLNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a3efd902ca50bb59867c6aaf3fbf20e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNACTIVELNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a5dbb9333b0dd7a380a85b4e1bd298667</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCREMENT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aed2205097d136a425fa309dcfc71586e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECREMENT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4ad5eb45c9651dc49f7e2f0f9bf251dd40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLELNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a3a1a321416e317c8ed906573a937ffc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EvaluatorLocalSearchOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LK</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1aae6bcc97b395e12e9a8e54093a327512</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSPOPT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1ac712194c4e0edea857001e9cf2ed5811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSPLNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1a29c43618e41fc69d29d248c0031d5af1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LocalSearchFilterBound</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0ac146aa5e02ea92fc5666c258910c049e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0a7b0d93c6324068fe1984836247bc1104</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EQ</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0a1ed30b8b721fbabcd346c23b61ba8f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DemonPriority</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELAYED_PRIORITY</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4af8769149902a8a2b168069cb93cc6370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_PRIORITY</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4ae5f79fc80ef9ae665bcd7c0e55c02aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL_PRIORITY</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4a4f432957a8b27277538d5ee856201a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BinaryIntervalRelation</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AFTER_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9a6498f37a4ad4a85e8309080a357cb587</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AFTER_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9aa98eb73b7940d0127b133f170976fb0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AT_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9abaaae5f195366a4e2aeae19bb2f0ae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AT_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9ad02b3b6c25bdd69c2735af0dcd7c3aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AFTER_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9ad5a5ac7b999f4c37d11206e531125988</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AFTER_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9ae80d18ceaf9ae55ad39559b85b745628</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AT_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9aea2183489b4cb88c3e43e90e8f96eb61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AT_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9a5fbb5a6ea281c2affbcd2fc79c1d7c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAYS_IN_SYNC</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9a4d3f223d92b1ac90127546c396f6cd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnaryIntervalRelation</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AFTER</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60dac88ebc55bfbf4a9ad97391ef97b4d6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da294a4a33adc6833aa24adfd0d8eb44f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_BEFORE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da9cc048da4ce5362c5a58866161a219bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AFTER</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da5228c64950eccf096f9847d100100b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60dab88a6a21271bd5f34e12ada996c0bfee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_BEFORE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da21ce390ff5a9625cc07569f7629b2a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CROSS_DATE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da79c510d187e0d3ef01df628731231ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AVOID_DATE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da6ea2fea7afd48b130486b2b48b5ae418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DecisionModification</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CHANGE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847aa8dfadb94521ac7979525ae94f618d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEEP_LEFT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847a7a7d1379ff946fd786c118c3358ce438</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEEP_RIGHT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847a1322e52b2ac49d3b2975acb1f4603cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KILL_BOTH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847af16daaa1fec927c823d4d0441f4c742b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SWITCH_BRANCHES</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847a9bbb245ecd3725f5a67fd4c8466ee678</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MarkerType</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENTINEL</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215a6a8779a3d27000ed1e11b3549c0470ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLE_MARKER</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215aa5148450bdc2fa1d4b40c2dd70b6dd3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOICE_POINT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215a68e4780981758b35943123d19ea5c070</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REVERSIBLE_ACTION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215ab8ed3456ae15444c88849d08123e4c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SolverState</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTSIDE_SEARCH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95ac05654b6a7479316478744b3ce4a50df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_ROOT_NODE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a0e9b4a7467a4d4f1a7da211e6c59251e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_SEARCH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a066908e143fd988a03767f05e682acaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AT_SOLUTION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95ad487136b6f055fa3fadfd6a3c12aa3a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_MORE_SOLUTIONS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a401b0c79d1fa9261524343fce4dd5439</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROBLEM_INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a30b34e2664f9b1e2fb0d1347d7a87674</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OptimizationDirection</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SET</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171befadd112fa680436644573a4d6e6e955906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAXIMIZATION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171befa76db89f0caee82059523e2f233c31433</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINIMIZATION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171befaf042b1d4c82247d9ff0ca476800d8fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(int64)&gt;</type>
      <name>IndexEvaluator1</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1040bdf484009e1a00e60ebb055ad1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(int64, int64)&gt;</type>
      <name>IndexEvaluator2</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0243986dd2db4b6e1bda331329ae529b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(int64, int64, int64)&gt;</type>
      <name>IndexEvaluator3</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1f24a08006b3142731a258d856f13e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(int64)&gt;</type>
      <name>IndexFilter1</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7e47d3b978e31e6273a63dc52fcf3379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; IntVar *(int64)&gt;</type>
      <name>Int64ToIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6183a217e1ddf504a4fd3f49788b73db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(Solver *solver, const std::vector&lt; IntVar * &gt; &amp;vars, int64 first_unbound, int64 last_unbound)&gt;</type>
      <name>VariableIndexSelector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a360a918948e4a8ae01a49899c5a9438e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(const IntVar *v, int64 id)&gt;</type>
      <name>VariableValueSelector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>addc64b89be5f633952a7735861cc9901</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(int64, int64, int64)&gt;</type>
      <name>VariableValueComparator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af24d476da11ebf69fae9d4890447cc95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(int64)&gt;</type>
      <name>ObjectiveWatcher</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>acb354925d9ed2803b56953a9a9ec59df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; DecisionModification()&gt;</type>
      <name>BranchSelector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a704132f8c12e3bbbd0590308a58ee744</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(Solver *)&gt;</type>
      <name>Action</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a87ca0b6abf9c8724900387f5aa557c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>Closure</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aab58d22b2215e79f8e3a9424fe186239</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VAR_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8bab82ee292f55491e6068a560434f9a649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VAR_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baccdbce6c50c85d4ed2c507dbc5691116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_FIRST_UNBOUND</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba8f69d3fc74e6a3faaa9be2583ce8fce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_RANDOM</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba2547ec2e47ea5c8da65a39817a04f220</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_LOWEST_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba1b2865e3429fc5b1956da5f601ae0ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_HIGHEST_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baf654ef2638f1ed2cd22cee830695a2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_LOWEST_MAX</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba8954f01caaa3b482d349a3ed6c254155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_HIGHEST_MAX</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baf1eadfb5ea6dc853f075589cded04314</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_LOWEST_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba2edce2c3cb946cfafd4541b442b3c511</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_HIGHEST_MAX</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba76e76e12dcb8935b6a7713f849a11df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8babcab6960ac4a67fbb73fb94aa5e752e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_SIZE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8babce047aa9c6aa994057ae76e535d59df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_REGRET_ON_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baf25b88c6fb8a0b956dd3812af864e2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_PATH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba46e6f2fa2b646a2114a32d816ba399ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VALUE_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a3291dae3d9aa520fe52d1ffaa2a2eadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VALUE_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a78588d0b2a789c20c1252eaffed29e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_MIN_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659ab68b8c2566158157a2ba1660aae07553</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_MAX_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a13d07bd4fac1cf9de979eaa59bb9089b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_RANDOM_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659ab75b213a2a3871a9946a74610e388b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_CENTER_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a0484f76eaad7b381c13bfd4ccd47ef68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_LOWER_HALF</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a5abe444845850bb7a0f2f5c87cef2763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_UPPER_HALF</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a094a0fbeabae8b18ca5367f2564a0896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_STATIC_GLOBAL_BEST</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afabd2f40b8da33b224a5cafd2a053a21ad2e527283c597c714aa93e9fa72ee0e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_DYNAMIC_GLOBAL_BEST</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afabd2f40b8da33b224a5cafd2a053a21a4c35b22102e37b5ca3d0e62cffcf93d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEQUENCE_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaaaf8c34e2288277212469f187b5cc268b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEQUENCE_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaa2824d95f6832660bf47a077680403b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SLACK_RANK_FORWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaaeb08eb7c7c4cd0b65331584e4ae7bedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_RANDOM_RANK_FORWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaa139097881c016328ab920b3505100887</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424a1bd1a37995f05ae93089ba0475799682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424ae24e4970fab2a37e23eaa50c783fd6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_SET_TIMES_FORWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424a0ad27937b9a501b07827886abd97a8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_SET_TIMES_BACKWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424a3892d13c5d6ce4a93609e4eb176195a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TWOOPT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a6954bf415a41a3e683060ce706cec2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OROPT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a721d9e61cd2a9b9c221793b9b8086b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RELOCATE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4ae38682b404f0255b45c6c5a3d4d31399</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXCHANGE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a27e459c0332eecea29a0b793ec635b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CROSS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a5dcd871e02933eb704b45ea8ea68a852</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAKEACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a41dc08543fce010d8ce65df80935ff38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAKEINACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a1a2beb32468f536c96644b3faa9c8d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAKECHAININACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aa2d880da72318dcffa237e4f2100c58c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SWAPACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aeac9baf3ea4fa072bb9e4eccf691205d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTENDEDSWAPACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a99c891d39d424a087b7fd551b27906ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PATHLNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aae749f308386810f29338c96daf0e4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FULLPATHLNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a3efd902ca50bb59867c6aaf3fbf20e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNACTIVELNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a5dbb9333b0dd7a380a85b4e1bd298667</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCREMENT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aed2205097d136a425fa309dcfc71586e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECREMENT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4ad5eb45c9651dc49f7e2f0f9bf251dd40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLELNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a3a1a321416e317c8ed906573a937ffc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LK</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1aae6bcc97b395e12e9a8e54093a327512</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSPOPT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1ac712194c4e0edea857001e9cf2ed5811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSPLNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1a29c43618e41fc69d29d248c0031d5af1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0ac146aa5e02ea92fc5666c258910c049e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0a7b0d93c6324068fe1984836247bc1104</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EQ</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0a1ed30b8b721fbabcd346c23b61ba8f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELAYED_PRIORITY</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4af8769149902a8a2b168069cb93cc6370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_PRIORITY</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4ae5f79fc80ef9ae665bcd7c0e55c02aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL_PRIORITY</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4a4f432957a8b27277538d5ee856201a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AFTER_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9a6498f37a4ad4a85e8309080a357cb587</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AFTER_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9aa98eb73b7940d0127b133f170976fb0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AT_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9abaaae5f195366a4e2aeae19bb2f0ae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AT_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9ad02b3b6c25bdd69c2735af0dcd7c3aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AFTER_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9ad5a5ac7b999f4c37d11206e531125988</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AFTER_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9ae80d18ceaf9ae55ad39559b85b745628</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AT_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9aea2183489b4cb88c3e43e90e8f96eb61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AT_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9a5fbb5a6ea281c2affbcd2fc79c1d7c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAYS_IN_SYNC</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9a4d3f223d92b1ac90127546c396f6cd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AFTER</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60dac88ebc55bfbf4a9ad97391ef97b4d6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da294a4a33adc6833aa24adfd0d8eb44f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_BEFORE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da9cc048da4ce5362c5a58866161a219bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AFTER</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da5228c64950eccf096f9847d100100b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60dab88a6a21271bd5f34e12ada996c0bfee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_BEFORE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da21ce390ff5a9625cc07569f7629b2a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CROSS_DATE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da79c510d187e0d3ef01df628731231ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AVOID_DATE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da6ea2fea7afd48b130486b2b48b5ae418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CHANGE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847aa8dfadb94521ac7979525ae94f618d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEEP_LEFT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847a7a7d1379ff946fd786c118c3358ce438</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEEP_RIGHT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847a1322e52b2ac49d3b2975acb1f4603cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KILL_BOTH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847af16daaa1fec927c823d4d0441f4c742b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SWITCH_BRANCHES</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847a9bbb245ecd3725f5a67fd4c8466ee678</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENTINEL</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215a6a8779a3d27000ed1e11b3549c0470ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLE_MARKER</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215aa5148450bdc2fa1d4b40c2dd70b6dd3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOICE_POINT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215a68e4780981758b35943123d19ea5c070</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REVERSIBLE_ACTION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215ab8ed3456ae15444c88849d08123e4c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTSIDE_SEARCH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95ac05654b6a7479316478744b3ce4a50df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_ROOT_NODE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a0e9b4a7467a4d4f1a7da211e6c59251e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_SEARCH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a066908e143fd988a03767f05e682acaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AT_SOLUTION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95ad487136b6f055fa3fadfd6a3c12aa3a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_MORE_SOLUTIONS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a401b0c79d1fa9261524343fce4dd5439</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROBLEM_INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a30b34e2664f9b1e2fb0d1347d7a87674</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SET</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171befadd112fa680436644573a4d6e6e955906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAXIMIZATION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171befa76db89f0caee82059523e2f233c31433</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINIMIZATION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171befaf042b1d4c82247d9ff0ca476800d8fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Solver</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af4d2c143bd1e769ab96a69a8ab855136</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Solver</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1aceea22f252449e417cc4bf7ec749d8</anchor>
      <arglist>(const std::string &amp;name, const ConstraintSolverParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Solver</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a663bdb75f27a96e424ad2a7a4ba397ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverParameters</type>
      <name>parameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adb77a0b4b40ea4e8282cf78b54717cd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SaveValue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>add51e06535f44461347658d8ce59979a</anchor>
      <arglist>(T *o)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>RevAlloc</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a01e1a27e5e6c03b48faab541885737ca</anchor>
      <arglist>(T *object)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>RevAllocArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a45ce1ff8007e76e844d2ec32e740b3d9</anchor>
      <arglist>(T *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9c522a6cff91adae19af5cce7d8e411f</anchor>
      <arglist>(Constraint *const c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddCastConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e06358629a979e64e62158816f6759a</anchor>
      <arglist>(CastConstraint *const constraint, IntVar *const target_var, IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveAndCommit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4610adb8edc9b5804370b55e84d9c99b</anchor>
      <arglist>(DecisionBuilder *const db, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveAndCommit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a85fd9d56a17aa81fcb33410f8e6f5e49</anchor>
      <arglist>(DecisionBuilder *const db)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveAndCommit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a879bcbe8ed7dcfbc3d93f35b09402423</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveAndCommit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a960a0af1bd12b441511189d394df3d9f</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveAndCommit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aed9077a5e312e08f6a0e472a718f7b7e</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckAssignment</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a779da92d4afffabdb868318665298d59</anchor>
      <arglist>(Assignment *const solution)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae39c8f6f3ee87c9a3d74bc8a446db697</anchor>
      <arglist>(Constraint *const ct)</arglist>
    </member>
    <member kind="function">
      <type>SolverState</type>
      <name>state</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad8d269e222a882295b43ebf8dc4ec83a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Fail</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a45534161a4dda7e1997bc0effd606648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddBacktrackAction</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a67a3f35a5b19a1ebdf4217b483068ad7</anchor>
      <arglist>(Action a, bool fast)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad3a0dd883b4adb63646503b62dabbc23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>absl::Time</type>
      <name>Now</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a543e7aa911009e1c4a6c33e82e49e582</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>wall_time</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a53fae091a4dac1829b8947ff7426aa4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>branches</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa843d980b4526a9b051e98e7f3425b40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>solutions</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a89a5139453ffd5edd1992c82bd95f675</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>unchecked_solutions</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad68a982dad17396ac23877b5c80f7b7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>demon_runs</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6905ce95ac75e188d838c0a230888f2</anchor>
      <arglist>(DemonPriority p) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>failures</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2047abfd3e0cf6919d67a4a6ccd1d3cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>neighbors</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a440a3d529f66bbb818d953beb362a825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>filtered_neighbors</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab3e7525b57ce27119e4eb32fe24eedca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>accepted_neighbors</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a644bf665c00f8b9447bdcb5f18590ee9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>stamp</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af9873f0b909de865b771b6168eafc78b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>fail_stamp</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1bcd30f46029ec27d32f9718c5a0d2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OptimizationDirection</type>
      <name>optimization_direction</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a045309e1ee229240071692a4e889f3e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_optimization_direction</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae49d5791dd8bb104be6a25c30cf59de6</anchor>
      <arglist>(OptimizationDirection direction)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6a699e2d6f96a64244119ee9718e0f71</anchor>
      <arglist>(int64 min, int64 max, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab9d315e6a471d8a04eaa98917054d955</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac720f3b8bc3842a02a7cafbacad4681a</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;values, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2568563e12ef73217f0fd5bf6d39fa2d</anchor>
      <arglist>(int64 min, int64 max)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a00b09770cb4927e6aee85cfe6c6d377f</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad39c478a66b0db95fba8e6ebca74b24d</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeBoolVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa3ff89872a2c6fee13814091c63102b5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeBoolVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a941c7c212362540d900af004c16692a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntConst</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a462cc213ea47b1e4c772e0332cb12249</anchor>
      <arglist>(int64 val, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntConst</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab97c5326b6add25e4c5d54babad46ddc</anchor>
      <arglist>(int64 val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeIntVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8b9acf693b1584dd7c7113ba7cea2527</anchor>
      <arglist>(int var_count, int64 vmin, int64 vmax, const std::string &amp;name, std::vector&lt; IntVar * &gt; *vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeIntVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa9e1f52efcf6a0d6b5ba577b01e2706b</anchor>
      <arglist>(int var_count, int64 vmin, int64 vmax, std::vector&lt; IntVar * &gt; *vars)</arglist>
    </member>
    <member kind="function">
      <type>IntVar **</type>
      <name>MakeIntVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac34e896913439db6a03de167e3ee2fb9</anchor>
      <arglist>(int var_count, int64 vmin, int64 vmax, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeBoolVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8307ead1637b1c665169d0dc1f822549</anchor>
      <arglist>(int var_count, const std::string &amp;name, std::vector&lt; IntVar * &gt; *vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeBoolVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8c1971dc963ec7f0accc3ac2ca8baaee</anchor>
      <arglist>(int var_count, std::vector&lt; IntVar * &gt; *vars)</arglist>
    </member>
    <member kind="function">
      <type>IntVar **</type>
      <name>MakeBoolVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6b62b87038d1d458fdcbd254ca79f52</anchor>
      <arglist>(int var_count, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeSum</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8b4e4af37e3d9c1f667992bcec34630c</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeSum</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a43aa3f6af9681069773a02a50aabef9e</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeSum</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7486c6901b9f6ef3d5e1c902c0e487f6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeScalProd</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a58f99f85567010c8726801175b285bfe</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;coefs)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeScalProd</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a69c2dcf09c273e401997d2615a7b1074</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;coefs)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeDifference</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6ef8634dceaef579006ab4db28f1f684</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeDifference</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b7a84df4c046f10f588aee00edd0330</anchor>
      <arglist>(int64 value, IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeOpposite</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0fe164a682eb2272efa0f483373b9db8</anchor>
      <arglist>(IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeProd</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6da70a11e2bce1a688259a2e0ab6c9d</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeProd</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a33d87f6845a515cb76a08e49e2c1ee5a</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeDiv</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a95f09c393e1c513ff4bc15522a854633</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeDiv</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a05799e4c5afbcabaa3961c12db34bf51</anchor>
      <arglist>(IntExpr *const numerator, IntExpr *const denominator)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeAbs</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a57875170b22abd8ca8c499be11659af1</anchor>
      <arglist>(IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeSquare</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a547a1c1bd3b8df3a759661e60fbb3e9d</anchor>
      <arglist>(IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakePower</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af0f7c0067b5a3a79cfff03d48e9eeb94</anchor>
      <arglist>(IntExpr *const expr, int64 n)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aea4e904944dd8850347309110ee64c36</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values, IntVar *const index)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab338b8352e875cd05be1bed6799e9b72</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;values, IntVar *const index)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a17d3059be586754680e67e64a0cf015b</anchor>
      <arglist>(IndexEvaluator1 values, IntVar *const index)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMonotonicElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa729df413387f7bb5b6b54bf7b21f340</anchor>
      <arglist>(IndexEvaluator1 values, bool increasing, IntVar *const index)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2440cbe2c75ec63595aa274a570e8c35</anchor>
      <arglist>(IndexEvaluator2 values, IntVar *const index1, IntVar *const index2)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a852eafbea6eb6a018330000dd2d9c97f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const index)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a54b78213201d4e352531f56943b8fe70</anchor>
      <arglist>(Int64ToIntVar vars, int64 range_start, int64 range_end, IntVar *argument)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeIndexExpression</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6e6d2b77130f2557bd0b0c77f19710dc</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIfThenElseCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac6ac3661a9add716fade6fecf1645805</anchor>
      <arglist>(IntVar *const condition, IntExpr *const then_expr, IntExpr *const else_expr, IntVar *const target_var)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMin</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0047bb3bb4cdff41ece9cfaad2ad108b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMin</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab3cde3e28e3984c155cbba13b40e1ccf</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMin</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4141a92538b1f2b29ab06ed5efeaa56c</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMin</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae73edb2aba9061969c9b8df65573accf</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMax</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abebae695ae85e01fe4c176c5a056c9b9</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMax</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adfa6d7bf42c29f8a3d6e3efe8cb76015</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMax</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a20b29f3a61a50103b8ae87ef2c48ef1f</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMax</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a079b4fb579593a5ec3e8d04084afd2af</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeConvexPiecewiseExpr</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7133f1f0ea6afd334b2091e3d5a668d0</anchor>
      <arglist>(IntExpr *expr, int64 early_cost, int64 early_date, int64 late_date, int64 late_cost)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeSemiContinuousExpr</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0c3ee759e1618eb55ca895c8f6878e57</anchor>
      <arglist>(IntExpr *const expr, int64 fixed_charge, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakePiecewiseLinearExpr</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aaa52f2620322c849e2142fdfc0eb4213</anchor>
      <arglist>(IntExpr *expr, const PiecewiseLinearFunction &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeModulo</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad80dd1ae1e4b2a33944cf207f2a63458</anchor>
      <arglist>(IntExpr *const x, int64 mod)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeModulo</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3ada9dc08dfcaedfe2ec4fad458e6040</anchor>
      <arglist>(IntExpr *const x, IntExpr *const mod)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeConditionalExpression</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3ae4ede3b7a68624006b888b97fae3c5</anchor>
      <arglist>(IntVar *const condition, IntExpr *const expr, int64 unperformed_value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeTrueConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abdbfec794188ed5074d0cb2f611124ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeFalseConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad0b048792bdbf3cd5699eb82a9b57e76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeFalseConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2ee398114b19c34ffc10d3b204d2ce5b</anchor>
      <arglist>(const std::string &amp;explanation)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsEqualCstCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab170e1ca8e081b65e7ee595be5fb9e81</anchor>
      <arglist>(IntExpr *const var, int64 value, IntVar *const boolvar)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsEqualCstVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a655735058a06195cc28f25d2564fc8ca</anchor>
      <arglist>(IntExpr *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsEqualCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aae6f147ee2f7bf03fa728868ae2d670d</anchor>
      <arglist>(IntExpr *const v1, IntExpr *v2, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsEqualVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a52c3bdf647a8bcea13c4da9330c3a9d3</anchor>
      <arglist>(IntExpr *const v1, IntExpr *v2)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a44c97dfc4f51c14779ea29f76c662036</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aead2a0ad32553226f600207c04d1f952</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3e66bcd4f419d69270d7260559585d1</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsDifferentCstCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0bd00b719a0d7571e3bbc3bb93f64eb6</anchor>
      <arglist>(IntExpr *const var, int64 value, IntVar *const boolvar)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsDifferentCstVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9a9e58a1e346c571e52c2d491f8b3748</anchor>
      <arglist>(IntExpr *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsDifferentVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a91764cdc9186294ec25adb3dec886515</anchor>
      <arglist>(IntExpr *const v1, IntExpr *const v2)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsDifferentCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afdd94e94c4d4b8950d20f1ebf7fd238d</anchor>
      <arglist>(IntExpr *const v1, IntExpr *const v2, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa99c80d3aa788f16d966b7b5af4be7e2</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1026486ac57179fbcdbe51b2de00a79</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a385a87783158b8335290c35c527870d6</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsLessOrEqualCstCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a452f6de4ae9e08677c8303dfd7c3292f</anchor>
      <arglist>(IntExpr *const var, int64 value, IntVar *const boolvar)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsLessOrEqualCstVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7b555e672930179b244785a8f97b3b8f</anchor>
      <arglist>(IntExpr *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsLessOrEqualVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6f96ee767c7b6bd0e190c86d995e88c</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsLessOrEqualCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a84a1c30c400cb98e95fca1f74d064c80</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a53ea0cb612f72835754ca2d0c5a3c51c</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae2f48cbdadc39938cdf5476a65ee1533</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8319da1d80eccb258d4a1d8928cb757d</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsGreaterOrEqualCstCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8f5eee399d887d3f3f0bfebec6096cc3</anchor>
      <arglist>(IntExpr *const var, int64 value, IntVar *const boolvar)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsGreaterOrEqualCstVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4f85930982b76fe71ed525a692957515</anchor>
      <arglist>(IntExpr *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsGreaterOrEqualVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5bdf15368dacb3a71e78ed7f7ca38ce3</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsGreaterOrEqualCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa6f53d2a5d18750d91f16db45700c3af</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab836ebc6f5a7daa6e9e5e2bd08cd50f3</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a404647b2bfe0a59f5a8e276ede47e029</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a08d49b63062128ccc840c9bfea837e4b</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsGreaterCstCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a85403f4ea76885802e486103ef5d6615</anchor>
      <arglist>(IntExpr *const v, int64 c, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsGreaterCstVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6cea2e744a27c3ee4567c65216f36c39</anchor>
      <arglist>(IntExpr *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsGreaterVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3f704993474818667273f078cd273863</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsGreaterCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6a8f7bc1b42272024cb04882c410894b</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeGreater</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8d6fbba2ba47eda46d4565e4a0ca69cf</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeGreater</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af381a6c62cc7867dfe806e0a9d895b49</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeGreater</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a44bdef4eba494ff998502a253667ead2</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsLessCstCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adab85b93ce8b5ea9a14b5a5969adcc14</anchor>
      <arglist>(IntExpr *const v, int64 c, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsLessCstVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a932daaf79abd6438cab1c6c8acb71e0f</anchor>
      <arglist>(IntExpr *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsLessVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af26049e7a0c0bd0a3d3b826579a839ff</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsLessCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8986fc6e352ee5b9601831e6466b923c</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLess</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1d3505710b6b1b66c738695d877aef8b</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLess</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4fba36c87ce9ffe943c6ce30c44aeb13</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLess</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae8aa22da252f3a13e099c0662b55c88e</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeSumLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a124e2377182b7f2be763fc2c009f2fe6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeSumGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0dd7452d63d18c1e4591ce9468e38026</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeSumEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abb5ced4ea25c0dfaa7f5a5a8258423da</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeSumEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3da69851ef4adc166f034ae20098bed</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abc4f50009f6abdfa5430c828c2119d76</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;coefficients, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a88aefead29b277a625b47c7648fd9e83</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;coefficients, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6143cbf362cd00c1bc8194dab4954a27</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;coefficients, IntVar *const target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6829a80b0964217e3db30d53e28abd48</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;coefficients, IntVar *const target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab00ece9bae955aa3eed634a3df54e8b0</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;coeffs, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abed45c8b36664314ce24ff741ad210b3</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;coeffs, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a674a604bf7823571ae7ba12dbd939290</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;coefficients, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a99da5ab42e9e01e110ce5534a5e636aa</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;coefficients, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeMinEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a707908bc6f7b50d0a3ea6a6814912b03</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const min_var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeMaxEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a18ff54edbaad4a3da9eb7b1112194d1a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const max_var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeElementEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad2d2769a8cae1736dec41abe50d6a711</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;vals, IntVar *const index, IntVar *const target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeElementEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9007cd118fc848c0393e3e48dc8c6329</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;vals, IntVar *const index, IntVar *const target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeElementEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae4b4097e4ada19def8c04e680b630019</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const index, IntVar *const target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeElementEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ada1ed4983419cdd1cafb48022668f4e5</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const index, int64 target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeAbsEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6c2937a3cb434bc01c01d454419fcb95</anchor>
      <arglist>(IntVar *const var, IntVar *const abs_var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIndexOfConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a07f7fa906a3c321c3095969fca1c6ff5</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const index, int64 target)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintInitialPropagateCallback</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7c32391ccea4cf45797ccb99d3b4ea2f</anchor>
      <arglist>(Constraint *const ct)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintInitialPropagateCallback</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a92be45d90f748f1228f09b9585deefcf</anchor>
      <arglist>(Constraint *const ct)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeActionDemon</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a70a1f8ef1f9c2d029d134917e60bf363</anchor>
      <arglist>(Action action)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeClosureDemon</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1b2eed669b8c881a2d596f63bb68150c</anchor>
      <arglist>(Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeBetweenCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a997571dcb78d0c1cedd3e5cb6a8afbd3</anchor>
      <arglist>(IntExpr *const expr, int64 l, int64 u)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNotBetweenCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1b0628976e99904e7c4ae72618c9772e</anchor>
      <arglist>(IntExpr *const expr, int64 l, int64 u)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsBetweenCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a776893abf62ec0dbf9b80a5faf0aa455</anchor>
      <arglist>(IntExpr *const expr, int64 l, int64 u, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsBetweenVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6d314aa714607f1c12b3f3b75928f250</anchor>
      <arglist>(IntExpr *const v, int64 l, int64 u)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7cb2726d3860a2ca7d7097d58beaa58f</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a37b10a542773716ddb4cad5e45dc4601</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNotMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a687be895b4cfd73ad06992a8e6115eef</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNotMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a454a133de98f3b4258d03cf9efd1e80c</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNotMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a49ae8505daa94f323aea651ec37c5280</anchor>
      <arglist>(IntExpr *const expr, std::vector&lt; int64 &gt; starts, std::vector&lt; int64 &gt; ends)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNotMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1b9d2cb1b637067fa79896d1abd28141</anchor>
      <arglist>(IntExpr *const expr, std::vector&lt; int &gt; starts, std::vector&lt; int &gt; ends)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNotMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a03c63143b4354ef99642e5035da5a8da</anchor>
      <arglist>(IntExpr *expr, SortedDisjointIntervalList intervals)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abe0c38990d5922ce0b7b8674c5c9cdd8</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int64 &gt; &amp;values, IntVar *const boolvar)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1a0c9b7ea2dab4d150a3ff7bb571f2f7</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int &gt; &amp;values, IntVar *const boolvar)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsMemberVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a495f20c9f679b71c617a627c3041eba2</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsMemberVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6c6e9c0c5bef3038b1d8cc47c9e14995</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeAtMost</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af10e474564d080f7949e680215224176</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; vars, int64 value, int64 max_count)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCount</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2fc4c2534a45caa04ad4e11ba7b10a52</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 value, int64 max_count)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCount</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5ad100b150f29d18c0fc4deaf0d45a53</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 value, IntVar *const max_count)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8f39cd51e795db7a44e418fafbabf93f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;values, const std::vector&lt; IntVar * &gt; &amp;cards)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2d2e0f524f98cda7bca9472ab2b4d7c8</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;values, const std::vector&lt; IntVar * &gt; &amp;cards)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8cbe8846e14fe3645bf1a9dbd1c06a6f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;cards)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5e416047eddcc9ad587a1f317152c2a2</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 card_min, int64 card_max, int64 card_size)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2be5b31a87bef04348fade0e1ec238ff</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;card_min, const std::vector&lt; int64 &gt; &amp;card_max)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a20c8085d1885978ae71321f2143ab2ec</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;card_min, const std::vector&lt; int &gt; &amp;card_max)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5bac1c5911f45688f1945c7747b9423b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;values, const std::vector&lt; int64 &gt; &amp;card_min, const std::vector&lt; int64 &gt; &amp;card_max)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4efa8bf8e7ef9a276a90a29d9e38116d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;values, const std::vector&lt; int &gt; &amp;card_min, const std::vector&lt; int &gt; &amp;card_max)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDeviation</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aced209d10277f701930a1e46f95465e7</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const deviation_var, int64 total_sum)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeAllDifferent</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a63eadebc6faf0538523bfc4dcbc39d97</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeAllDifferent</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a17d2b1ffa5a83f1256c2a825aad714d6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, bool stronger_propagation)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeAllDifferentExcept</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a305fcf51481e580ce845a7c1642fb63a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 escape_value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeSortingConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af46c19361350e8714e3749c9d70047cf</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;sorted)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLexicalLess</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a82743e5fcfb142e69798225fc83305ca</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;left, const std::vector&lt; IntVar * &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLexicalLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae2bcfbbfd2ccd50e71d9b7c2b466a9c2</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;left, const std::vector&lt; IntVar * &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeInversePermutationConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a59f3825b2c4fc01c7be8d7e523211d68</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;left, const std::vector&lt; IntVar * &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIndexOfFirstMaxValueConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a65a1027f9fa77f54095277f7ef10cfca</anchor>
      <arglist>(IntVar *index, const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIndexOfFirstMinValueConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1f15c77df41fd565ee016cfde6185052</anchor>
      <arglist>(IntVar *index, const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNullIntersect</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aad9eb1217dc7ff8f54cf10a3391410b6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;first_vars, const std::vector&lt; IntVar * &gt; &amp;second_vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNullIntersectExcept</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af285b462fedc4cf35d36faff5fc78e21</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;first_vars, const std::vector&lt; IntVar * &gt; &amp;second_vars, int64 escape_value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNoCycle</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3a2e8e7abcce51fb754da16c477fca45</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, const std::vector&lt; IntVar * &gt; &amp;active, IndexFilter1 sink_handler=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNoCycle</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a03badde3aa8f608b4c6ddf722d140f67</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, const std::vector&lt; IntVar * &gt; &amp;active, IndexFilter1 sink_handler, bool assume_paths)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCircuit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac69bf81e7f8a9d08453ca8dae9619092</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeSubCircuit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a149da4f0a5e14223dd41d0b647b8f392</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathCumul</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a67e272ab8675e00ddeaf04d21bf87ce3</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, const std::vector&lt; IntVar * &gt; &amp;active, const std::vector&lt; IntVar * &gt; &amp;cumuls, const std::vector&lt; IntVar * &gt; &amp;transits)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDelayedPathCumul</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a16cf34d9d8c3f46d7d1414b8c0e3b0c8</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, const std::vector&lt; IntVar * &gt; &amp;active, const std::vector&lt; IntVar * &gt; &amp;cumuls, const std::vector&lt; IntVar * &gt; &amp;transits)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathCumul</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2bbc92456fe591e913634424090c145c</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, const std::vector&lt; IntVar * &gt; &amp;active, const std::vector&lt; IntVar * &gt; &amp;cumuls, IndexEvaluator2 transit_evaluator)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathCumul</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a15799ba1c679eb15e7dc748ee70db18f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, const std::vector&lt; IntVar * &gt; &amp;active, const std::vector&lt; IntVar * &gt; &amp;cumuls, const std::vector&lt; IntVar * &gt; &amp;slacks, IndexEvaluator2 transit_evaluator)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathConnected</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a65bedad451869cdc814f87ceb68f2a7c</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; nexts, std::vector&lt; int64 &gt; sources, std::vector&lt; int64 &gt; sinks, std::vector&lt; IntVar * &gt; status)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathPrecedenceConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abdda7108c8185b3dcea12523567b96a4</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; nexts, const std::vector&lt; std::pair&lt; int, int &gt;&gt; &amp;precedences)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathPrecedenceConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6fcaf1e64be8290c5cf5bd1e4b75fc88</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; nexts, const std::vector&lt; std::pair&lt; int, int &gt;&gt; &amp;precedences, const std::vector&lt; int &gt; &amp;lifo_path_starts, const std::vector&lt; int &gt; &amp;fifo_path_starts)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathTransitPrecedenceConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a39c7db7afb0e10783e0f9f18a9045139</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; nexts, std::vector&lt; IntVar * &gt; transits, const std::vector&lt; std::pair&lt; int, int &gt;&gt; &amp;precedences)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeMapDomain</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a95b306294d94049874328a4c02f320b4</anchor>
      <arglist>(IntVar *const var, const std::vector&lt; IntVar * &gt; &amp;actives)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeAllowedAssignments</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa4bb610f8e4708b2ea925c37db2b7f66</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const IntTupleSet &amp;tuples)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeTransitionConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae4b9d3730dc01f9b766e69d411f190a6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const IntTupleSet &amp;transition_table, int64 initial_state, const std::vector&lt; int64 &gt; &amp;final_states)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeTransitionConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a84119caadb86e0b3439c6c1b58006744</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const IntTupleSet &amp;transition_table, int64 initial_state, const std::vector&lt; int &gt; &amp;final_states)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonOverlappingBoxesConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3e4a18958cd72c63d679d1feea501e98</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;x_vars, const std::vector&lt; IntVar * &gt; &amp;y_vars, const std::vector&lt; IntVar * &gt; &amp;x_size, const std::vector&lt; IntVar * &gt; &amp;y_size)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonOverlappingBoxesConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adc171d708698c071972da2392513e974</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;x_vars, const std::vector&lt; IntVar * &gt; &amp;y_vars, const std::vector&lt; int64 &gt; &amp;x_size, const std::vector&lt; int64 &gt; &amp;y_size)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonOverlappingBoxesConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa8ba312556cc46a8f523d5301f75f8c2</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;x_vars, const std::vector&lt; IntVar * &gt; &amp;y_vars, const std::vector&lt; int &gt; &amp;x_size, const std::vector&lt; int &gt; &amp;y_size)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonOverlappingNonStrictBoxesConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab235bf1af3430d5b19cf811be7c2da0f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;x_vars, const std::vector&lt; IntVar * &gt; &amp;y_vars, const std::vector&lt; IntVar * &gt; &amp;x_size, const std::vector&lt; IntVar * &gt; &amp;y_size)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonOverlappingNonStrictBoxesConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0f3dbc73a9cfbe92feedf9f0cfd58043</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;x_vars, const std::vector&lt; IntVar * &gt; &amp;y_vars, const std::vector&lt; int64 &gt; &amp;x_size, const std::vector&lt; int64 &gt; &amp;y_size)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonOverlappingNonStrictBoxesConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5fdaec772223aa02f8ea5679458f484f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;x_vars, const std::vector&lt; IntVar * &gt; &amp;y_vars, const std::vector&lt; int &gt; &amp;x_size, const std::vector&lt; int &gt; &amp;y_size)</arglist>
    </member>
    <member kind="function">
      <type>Pack *</type>
      <name>MakePack</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4140a32d9cc0d4700ef8cd391e20f635</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int number_of_bins)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af3cf859de88467c7340a3ada0fe79620</anchor>
      <arglist>(int64 start_min, int64 start_max, int64 duration, bool optional, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeFixedDurationIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a84df9e10dbd2548f4ffebba134c41a31</anchor>
      <arglist>(int count, int64 start_min, int64 start_max, int64 duration, bool optional, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7f312d4dd096765774c8d9415f8881b2</anchor>
      <arglist>(IntVar *const start_variable, int64 duration, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5a4df4a5ef95d1c8b3d33a4669fa07a4</anchor>
      <arglist>(IntVar *const start_variable, int64 duration, IntVar *const performed_variable, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeFixedDurationIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa09de251c6c45166301981e0b18dab83</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;start_variables, int64 duration, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeFixedDurationIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a29f5c8bb3b77cb4274ad8a120e22b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;start_variables, const std::vector&lt; int64 &gt; &amp;durations, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeFixedDurationIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0aa7f9ec8b5634c0d028c869c3a38636</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;start_variables, const std::vector&lt; int &gt; &amp;durations, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeFixedDurationIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a17b8f29ea80c3496fb7768fc6b12df8c</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;start_variables, const std::vector&lt; int64 &gt; &amp;durations, const std::vector&lt; IntVar * &gt; &amp;performed_variables, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeFixedDurationIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a08f6f320bf7f336932b9571c27421895</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;start_variables, const std::vector&lt; int &gt; &amp;durations, const std::vector&lt; IntVar * &gt; &amp;performed_variables, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedInterval</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abc3ebe43e811c7fb172f962a78305a2e</anchor>
      <arglist>(int64 start, int64 duration, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac87d5128f0c386531d6bc37d847e9379</anchor>
      <arglist>(int64 start_min, int64 start_max, int64 duration_min, int64 duration_max, int64 end_min, int64 end_max, bool optional, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a406c32061db9fd011adb31709eab75ea</anchor>
      <arglist>(int count, int64 start_min, int64 start_max, int64 duration_min, int64 duration_max, int64 end_min, int64 end_max, bool optional, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeMirrorInterval</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2b941bb1e1090e457abd3b2da7e45b09</anchor>
      <arglist>(IntervalVar *const interval_var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationStartSyncedOnStartIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afb8890710339634b60f2c59043a2b4dd</anchor>
      <arglist>(IntervalVar *const interval_var, int64 duration, int64 offset)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationStartSyncedOnEndIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a14b79fb7c8d45f40452921f13bdcf3a1</anchor>
      <arglist>(IntervalVar *const interval_var, int64 duration, int64 offset)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationEndSyncedOnStartIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7c7cdd60d6c9e3bc141dfc36595bdd7f</anchor>
      <arglist>(IntervalVar *const interval_var, int64 duration, int64 offset)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationEndSyncedOnEndIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a561299bd3b4d1875e1a627084c4f3dc2</anchor>
      <arglist>(IntervalVar *const interval_var, int64 duration, int64 offset)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeIntervalRelaxedMin</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0a9ab7660c16c45e3a04547107a1f44f</anchor>
      <arglist>(IntervalVar *const interval_var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeIntervalRelaxedMax</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5664b23c751cead631f08318bdeeb63a</anchor>
      <arglist>(IntervalVar *const interval_var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIntervalVarRelation</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a44750e41a0195b2790202338c3798ce1</anchor>
      <arglist>(IntervalVar *const t, UnaryIntervalRelation r, int64 d)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIntervalVarRelation</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3edcfc8477f3c8885744ec5b22b99d3f</anchor>
      <arglist>(IntervalVar *const t1, BinaryIntervalRelation r, IntervalVar *const t2)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIntervalVarRelationWithDelay</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a01d92f3ca676da6aecf64fd91fbcf1b5</anchor>
      <arglist>(IntervalVar *const t1, BinaryIntervalRelation r, IntervalVar *const t2, int64 delay)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeTemporalDisjunction</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>acb0a02a6acc71bb5c26f5db75be94d43</anchor>
      <arglist>(IntervalVar *const t1, IntervalVar *const t2, IntVar *const alt)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeTemporalDisjunction</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2ada569684adb7dd2eea5c9b5b0cafa6</anchor>
      <arglist>(IntervalVar *const t1, IntervalVar *const t2)</arglist>
    </member>
    <member kind="function">
      <type>DisjunctiveConstraint *</type>
      <name>MakeDisjunctiveConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1097997c1048eba4ed6b2ba1bc3d3a1</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>DisjunctiveConstraint *</type>
      <name>MakeStrictDisjunctiveConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afab240c5c40998926973f668308d3e28</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCumulative</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a91cc6755dcf8a72ebdccea585239b223</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; int64 &gt; &amp;demands, int64 capacity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCumulative</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a762485ce728e2fd41b101b09c8db02e6</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; int &gt; &amp;demands, int64 capacity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCumulative</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a72fb5ada4cdcdf76a5d5e4731ebc3c2c</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; int64 &gt; &amp;demands, IntVar *const capacity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCumulative</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1321c1b607289aaa82a344d24fdea55e</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; int &gt; &amp;demands, IntVar *const capacity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCumulative</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a76734321a899562cc4f7d806383071d9</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; IntVar * &gt; &amp;demands, int64 capacity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCumulative</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6e1b58978a0854b687265db806211e5</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; IntVar * &gt; &amp;demands, IntVar *const capacity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCover</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a31446874c1dc3fd6e1e81b85f0be282f</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;vars, IntervalVar *const target_var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a069a42e0658c46afe924eced6e1ac41d</anchor>
      <arglist>(IntervalVar *const var1, IntervalVar *const var2)</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>MakeAssignment</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a44616760a35fb4c8a0811c487108a773</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>MakeAssignment</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac776afa0917dd7752a7b88c14fde0cd0</anchor>
      <arglist>(const Assignment *const a)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeFirstSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a93bb10313227a60f812842b3da04d276</anchor>
      <arglist>(const Assignment *const assignment)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeFirstSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a18656e1529d449a029580307f65978e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeLastSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aed4fa5966b4a38f68b03d4d8f9803dc7</anchor>
      <arglist>(const Assignment *const assignment)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeLastSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aecb0b69911306ae5b8aa6a69839812e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeBestValueSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1f477deb432653548d529105d333b51e</anchor>
      <arglist>(const Assignment *const assignment, bool maximize)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeBestValueSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6f54c6d9ba0109d05171888ed2c631a</anchor>
      <arglist>(bool maximize)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeNBestValueSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af56a95588607d60cd6908739164c2455</anchor>
      <arglist>(const Assignment *const assignment, int solution_count, bool maximize)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeNBestValueSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a593f8b4c527e40ad9251b0837304152f</anchor>
      <arglist>(int solution_count, bool maximize)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeAllSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a19dc14c4d315bd718d14cfad2f81603b</anchor>
      <arglist>(const Assignment *const assignment)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeAllSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af2dd63ac2ae9f837cfab35b13176dc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeMinimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2ebf87279a0ec3e2342579e72f2bd34f</anchor>
      <arglist>(IntVar *const v, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeMaximize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adf3a1f03acad746f2abe8bf5d2d6f93d</anchor>
      <arglist>(IntVar *const v, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2359ce77356b72617d07f9fe15e64b8e</anchor>
      <arglist>(bool maximize, IntVar *const v, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeWeightedMinimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5d2f031cb8202d7b1cfe534e3c8e1918</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;sub_objectives, const std::vector&lt; int64 &gt; &amp;weights, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeWeightedMinimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a16ec0eb1cb1e1e5727cb9a438c782f80</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;sub_objectives, const std::vector&lt; int &gt; &amp;weights, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeWeightedMaximize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aeb7ec77351bcc3b896fbd6f034749427</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;sub_objectives, const std::vector&lt; int64 &gt; &amp;weights, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeWeightedMaximize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adbfc772159be0180a934c3ad0400c483</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;sub_objectives, const std::vector&lt; int &gt; &amp;weights, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeWeightedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa41f52a032f36aa8f26b00cceb8b6793</anchor>
      <arglist>(bool maximize, const std::vector&lt; IntVar * &gt; &amp;sub_objectives, const std::vector&lt; int64 &gt; &amp;weights, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeWeightedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa3f616323e1424ae9534f462fd4d327c</anchor>
      <arglist>(bool maximize, const std::vector&lt; IntVar * &gt; &amp;sub_objectives, const std::vector&lt; int &gt; &amp;weights, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeTabuSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a741958c282764f0093800613f9a49eb7</anchor>
      <arglist>(bool maximize, IntVar *const v, int64 step, const std::vector&lt; IntVar * &gt; &amp;vars, int64 keep_tenure, int64 forbid_tenure, double tabu_factor)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeGenericTabuSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3488d384fcd80a6dbc3347c6b8dfb222</anchor>
      <arglist>(bool maximize, IntVar *const v, int64 step, const std::vector&lt; IntVar * &gt; &amp;tabu_vars, int64 forbid_tenure)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSimulatedAnnealing</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aaba6e77a62dd706b07a0c993f6e0a945</anchor>
      <arglist>(bool maximize, IntVar *const v, int64 step, int64 initial_temperature)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeGuidedLocalSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a01b92dc5c74e94c0decb3883663b6a21</anchor>
      <arglist>(bool maximize, IntVar *const objective, IndexEvaluator2 objective_function, int64 step, const std::vector&lt; IntVar * &gt; &amp;vars, double penalty_factor)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeGuidedLocalSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2cfbc3030bc56c8304fe783ae8ae4b58</anchor>
      <arglist>(bool maximize, IntVar *const objective, IndexEvaluator3 objective_function, int64 step, const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, double penalty_factor)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeLubyRestart</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac4587ad555a3768febcd111ac7481b58</anchor>
      <arglist>(int scale_factor)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeConstantRestart</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa4558615a9df31d326b9e04902cc362a</anchor>
      <arglist>(int frequency)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeTimeLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9b761ffa2c4aa399c1247b642a5e1d54</anchor>
      <arglist>(int64 time_in_ms)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeBranchesLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af9171596e98a897628f751924979a3ab</anchor>
      <arglist>(int64 branches)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeFailuresLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aff9d2ee8b32e16581d3b5838f1d56e21</anchor>
      <arglist>(int64 failures)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeSolutionsLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5d25b8d216afddbe19a9713a0398e2d2</anchor>
      <arglist>(int64 solutions)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae094ccae48e0e5942835f318aee30f58</anchor>
      <arglist>(int64 time, int64 branches, int64 failures, int64 solutions)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3d08b54aaf3da19b34b63904dc0e49cf</anchor>
      <arglist>(int64 time, int64 branches, int64 failures, int64 solutions, bool smart_time_check)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b1e2510dcf2e4f604ddfbaef8f60637</anchor>
      <arglist>(int64 time, int64 branches, int64 failures, int64 solutions, bool smart_time_check, bool cumulative)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2e33ac4d5e07c7ab4963803696530568</anchor>
      <arglist>(const RegularLimitParameters &amp;proto)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimitParameters</type>
      <name>MakeDefaultRegularLimitParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae91967e7ceb0016a3bc1d177a17c1ef9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SearchLimit *</type>
      <name>MakeLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8da743507b97db5ad0efc1b6a3778c1c</anchor>
      <arglist>(SearchLimit *const limit_1, SearchLimit *const limit_2)</arglist>
    </member>
    <member kind="function">
      <type>SearchLimit *</type>
      <name>MakeCustomLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af8fa7be9bf993f9441d56aaaa8213eb5</anchor>
      <arglist>(std::function&lt; bool()&gt; limiter)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab46fa9dd348f4228f9b830fcf8ab0ca6</anchor>
      <arglist>(int branch_period)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8df50a46fcee0db11765a1deb8999163</anchor>
      <arglist>(int branch_period, IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a03ad41e00e671685f0facb4fd0a0962e</anchor>
      <arglist>(int branch_period, std::function&lt; std::string()&gt; display_callback)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af6f709df7448e8e9d313ed535dd6cd07</anchor>
      <arglist>(int branch_period, IntVar *var, std::function&lt; std::string()&gt; display_callback)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0b2094b7ab019831ca36641ab212f06b</anchor>
      <arglist>(int branch_period, OptimizeVar *const opt_var)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad6f9344fc20ffc674979bfa0de5eaa76</anchor>
      <arglist>(int branch_period, OptimizeVar *const opt_var, std::function&lt; std::string()&gt; display_callback)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a67d072fc54c4fe627607e0a7569946b4</anchor>
      <arglist>(SearchLogParameters parameters)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchTrace</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a608fbd51b0f1c5b6fa65be4b5fc9e4a6</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeEnterSearchCallback</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4d7cd9490b4b727b513fa325aa118561</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeExitSearchCallback</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9358d9ba39e033777f5d862f76f8531b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeAtSolutionCallback</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a131e1a06b2ee488ac26d6e2c84a187c1</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>ModelVisitor *</type>
      <name>MakePrintModelVisitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3755a91175b0918171b5758e15e34208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ModelVisitor *</type>
      <name>MakeStatisticsModelVisitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3a509ada6c8ab1ca9924a548e9614344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ModelVisitor *</type>
      <name>MakeVariableDegreeVisitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af45183dc5bc39eda3d7a7ed11e0e7f31</anchor>
      <arglist>(absl::flat_hash_map&lt; const IntVar *, int &gt; *const map)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSymmetryManager</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3023ac289117048d22e69d76b5f6640e</anchor>
      <arglist>(const std::vector&lt; SymmetryBreaker * &gt; &amp;visitors)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSymmetryManager</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a54a9b6e1e086b0bfb25cce07881f0efd</anchor>
      <arglist>(SymmetryBreaker *const v1)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSymmetryManager</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a378307b06b35c4d90f4a6b7dfd6834c8</anchor>
      <arglist>(SymmetryBreaker *const v1, SymmetryBreaker *const v2)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSymmetryManager</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6d548d220ea1071e403ad8c020a17eb1</anchor>
      <arglist>(SymmetryBreaker *const v1, SymmetryBreaker *const v2, SymmetryBreaker *const v3)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSymmetryManager</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa06f9d86f581df760944266d0a87e10d</anchor>
      <arglist>(SymmetryBreaker *const v1, SymmetryBreaker *const v2, SymmetryBreaker *const v3, SymmetryBreaker *const v4)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeAssignVariableValue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4d59a6ca10783bbd71c02450cd300167</anchor>
      <arglist>(IntVar *const var, int64 val)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeVariableLessOrEqualValue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac2ec1f48c0928a10193dbd01c9a2ca7e</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeVariableGreaterOrEqualValue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7439b7f22691d89b1743cd176973904e</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeSplitVariableDomain</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae92ae7da7adbe8c74cfca8bda16b3ab4</anchor>
      <arglist>(IntVar *const var, int64 val, bool start_with_lower_half)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeAssignVariableValueOrFail</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad7e8f831f8fe5c00526fc38f30c4ab8d</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeAssignVariableValueOrDoNothing</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9816b2778045704456abd21374c9174d</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeAssignVariablesValues</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad7fbe491c3a389f2cd649301689375f5</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeFailDecision</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adf86f33f53f99f73d5f0a459e11e2a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeDecision</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a915268f135681d8a8eeafe9feb4efc5f</anchor>
      <arglist>(Action apply, Action refute)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Compose</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5deb6524933e21a8cd1c3563f5cd3c4d</anchor>
      <arglist>(DecisionBuilder *const db1, DecisionBuilder *const db2)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Compose</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0678bd634283f24b4cc75000cbe612d5</anchor>
      <arglist>(DecisionBuilder *const db1, DecisionBuilder *const db2, DecisionBuilder *const db3)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Compose</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aec9360236e67493740460f551fe111bc</anchor>
      <arglist>(DecisionBuilder *const db1, DecisionBuilder *const db2, DecisionBuilder *const db3, DecisionBuilder *const db4)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Compose</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a328f038f34eedae7990d27f8c9bb996c</anchor>
      <arglist>(const std::vector&lt; DecisionBuilder * &gt; &amp;dbs)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Try</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>add5cfd638da3fe013e6d86aef1426009</anchor>
      <arglist>(DecisionBuilder *const db1, DecisionBuilder *const db2)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Try</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1d8848a280917d6997a2d3de658b2857</anchor>
      <arglist>(DecisionBuilder *const db1, DecisionBuilder *const db2, DecisionBuilder *const db3)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Try</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abf8de10f7e440c1fb6b492e4c7308481</anchor>
      <arglist>(DecisionBuilder *const db1, DecisionBuilder *const db2, DecisionBuilder *const db3, DecisionBuilder *const db4)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Try</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab4a543a73df7517f3463c3d052dd3ca0</anchor>
      <arglist>(const std::vector&lt; DecisionBuilder * &gt; &amp;dbs)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2f30468d938065d5e3ae986a09b66df4</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVarStrategy var_str, IntValueStrategy val_str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a467564162c4a4aa124322b9ccedc2058</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator1 var_evaluator, IntValueStrategy val_str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afd64c73a1c4f09eb1a1d6416e701385a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVarStrategy var_str, IndexEvaluator2 value_evaluator)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afb949c1a7e3a780db3c5b9d785287f0b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVarStrategy var_str, VariableValueComparator var_val1_val2_comparator)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aaf08f4bbd7284b048f9f2784bdbbeba7</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator1 var_evaluator, IndexEvaluator2 value_evaluator)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5582150203f7e8de280e0c0b28671b54</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVarStrategy var_str, IndexEvaluator2 value_evaluator, IndexEvaluator1 tie_breaker)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1006f1b85832700ba13e925166a52ff</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator1 var_evaluator, IndexEvaluator2 value_evaluator, IndexEvaluator1 tie_breaker)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeDefaultPhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2b8fff361dacff8b29be507fc704d0b1</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeDefaultPhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4a27cb0b44ac37da13b3cdff83b5c91a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const DefaultPhaseParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab7d8889dbd810d56da90bf78ef0e064e</anchor>
      <arglist>(IntVar *const v0, IntVarStrategy var_str, IntValueStrategy val_str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a08a7ba25496b357edbb2fe061cbc5183</anchor>
      <arglist>(IntVar *const v0, IntVar *const v1, IntVarStrategy var_str, IntValueStrategy val_str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1aa9157dfdbac8dc4400ae4217b3c506</anchor>
      <arglist>(IntVar *const v0, IntVar *const v1, IntVar *const v2, IntVarStrategy var_str, IntValueStrategy val_str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4cfc3952a57d9ee97a75dcc26e1e0ee4</anchor>
      <arglist>(IntVar *const v0, IntVar *const v1, IntVar *const v2, IntVar *const v3, IntVarStrategy var_str, IntValueStrategy val_str)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeScheduleOrPostpone</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a31d7d8bb2bb4f992ef1ec9d41434091c</anchor>
      <arglist>(IntervalVar *const var, int64 est, int64 *const marker)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeScheduleOrExpedite</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a76d57c8fe9937093475ce43cdfe2412d</anchor>
      <arglist>(IntervalVar *const var, int64 est, int64 *const marker)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeRankFirstInterval</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1ce9ae264e0bbde4bcd8c5b9fd97a7e2</anchor>
      <arglist>(SequenceVar *const sequence, int index)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeRankLastInterval</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a878714df7b35afc923456d2608205377</anchor>
      <arglist>(SequenceVar *const sequence, int index)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7b585451d6b7ebdbc4e1acb775ab8245</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator2 eval, EvaluatorStrategy str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afc349a3f4dbd992954ba7000455d638d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator2 eval, IndexEvaluator1 tie_breaker, EvaluatorStrategy str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aaef09aa8cff9b5db0a5f657b57850631</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, IntervalStrategy str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a71507e80076ddeccf4d211186aeb4017</anchor>
      <arglist>(const std::vector&lt; SequenceVar * &gt; &amp;sequences, SequenceStrategy str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeDecisionBuilderFromAssignment</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aea8c7f5b1272ab68b5cb2f864029a233</anchor>
      <arglist>(Assignment *const assignment, DecisionBuilder *const db, const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeConstraintAdder</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9110719b65ea5b817d9da02a742270fe</anchor>
      <arglist>(Constraint *const ct)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSolveOnce</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a983c4e29e7048bcbcd8b7e170089df83</anchor>
      <arglist>(DecisionBuilder *const db)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSolveOnce</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab091d0e817419c2ee12166f0c9f1ea61</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const monitor1)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSolveOnce</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5842f839ef68fb09ae24f57b63f3f1fb</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const monitor1, SearchMonitor *const monitor2)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSolveOnce</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abf8db57f12b7dd5e3becf8df4320dcf3</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const monitor1, SearchMonitor *const monitor2, SearchMonitor *const monitor3)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSolveOnce</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a530f539d891e99b2cfe266da5003cf9b</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const monitor1, SearchMonitor *const monitor2, SearchMonitor *const monitor3, SearchMonitor *const monitor4)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSolveOnce</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a020962ddeab9ac9aa4518518084f389d</anchor>
      <arglist>(DecisionBuilder *const db, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeNestedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adbf9d5aec9bc8016844cdb07a9f56bfa</anchor>
      <arglist>(DecisionBuilder *const db, Assignment *const solution, bool maximize, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeNestedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a76f310ac98c73d170b9b15141fe92da0</anchor>
      <arglist>(DecisionBuilder *const db, Assignment *const solution, bool maximize, int64 step, SearchMonitor *const monitor1)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeNestedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aaa02661c1005ae173772adaba7ee7d11</anchor>
      <arglist>(DecisionBuilder *const db, Assignment *const solution, bool maximize, int64 step, SearchMonitor *const monitor1, SearchMonitor *const monitor2)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeNestedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3a04899527bc125ff7060994354227cb</anchor>
      <arglist>(DecisionBuilder *const db, Assignment *const solution, bool maximize, int64 step, SearchMonitor *const monitor1, SearchMonitor *const monitor2, SearchMonitor *const monitor3)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeNestedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac322ea52fe54d4a70e3ac4d8e58e9371</anchor>
      <arglist>(DecisionBuilder *const db, Assignment *const solution, bool maximize, int64 step, SearchMonitor *const monitor1, SearchMonitor *const monitor2, SearchMonitor *const monitor3, SearchMonitor *const monitor4)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeNestedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a01289d8708da19dbb62a2ef0917ef0bd</anchor>
      <arglist>(DecisionBuilder *const db, Assignment *const solution, bool maximize, int64 step, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeRestoreAssignment</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4ee11d297238c4b366eacbe02fe2ed23</anchor>
      <arglist>(Assignment *assignment)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeStoreAssignment</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0f974867e7b4d7f51f9ae33bea50ba02</anchor>
      <arglist>(Assignment *assignment)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5a4f58391d4317f078f4940adaeea72e</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, LocalSearchOperators op)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abd5bcef297383ebf40b32edbe29d82c0</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, LocalSearchOperators op)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a538593eed20666ff33b3e5d9a2d86da7</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator3 evaluator, EvaluatorLocalSearchOperators op)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aea0ae4d2591729881ebd1b4873301835</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, IndexEvaluator3 evaluator, EvaluatorLocalSearchOperators op)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeRandomLnsOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5ca2c3302d7fda338f6c59adbb8c7979</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int number_of_variables)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeRandomLnsOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad62313497138859a3fdba4607f804b36</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int number_of_variables, int32 seed)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeMoveTowardTargetOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a566bbd1c5497546294c96367cffa47f8</anchor>
      <arglist>(const Assignment &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeMoveTowardTargetOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac6632ca7448c86141f21e2e5867b04fa</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;variables, const std::vector&lt; int64 &gt; &amp;target_values)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>ConcatenateOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab97f6b20657cd0f589db096d9d6da855</anchor>
      <arglist>(const std::vector&lt; LocalSearchOperator * &gt; &amp;ops)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>ConcatenateOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a44a67355e58a5bf8298ea4f8c62e251c</anchor>
      <arglist>(const std::vector&lt; LocalSearchOperator * &gt; &amp;ops, bool restart)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>ConcatenateOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1de7a854b822925248e0b074b463a13f</anchor>
      <arglist>(const std::vector&lt; LocalSearchOperator * &gt; &amp;ops, std::function&lt; int64(int, int)&gt; evaluator)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>RandomConcatenateOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aba8c3c31b4420581c108861a64014df2</anchor>
      <arglist>(const std::vector&lt; LocalSearchOperator * &gt; &amp;ops)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>RandomConcatenateOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a06572fa7669fd21f6e8b5155b07ab602</anchor>
      <arglist>(const std::vector&lt; LocalSearchOperator * &gt; &amp;ops, int32 seed)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeNeighborhoodLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8ebee4942752665dac914898d2c1ff49</anchor>
      <arglist>(LocalSearchOperator *const op, int64 limit)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeLocalSearchPhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6c4750d9d038ef7c4fac71b6f3d12f46</anchor>
      <arglist>(Assignment *const assignment, LocalSearchPhaseParameters *const parameters)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeLocalSearchPhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac6b950aa021832c45692f2be48544d73</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, DecisionBuilder *const first_solution, LocalSearchPhaseParameters *const parameters)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeLocalSearchPhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab0ffe9f4df595a6ed7c40ec952eb3d4d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, DecisionBuilder *const first_solution, DecisionBuilder *const first_solution_sub_decision_builder, LocalSearchPhaseParameters *const parameters)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeLocalSearchPhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aea7a84a32885f37c9867daab48b0c4f3</anchor>
      <arglist>(const std::vector&lt; SequenceVar * &gt; &amp;vars, DecisionBuilder *const first_solution, LocalSearchPhaseParameters *const parameters)</arglist>
    </member>
    <member kind="function">
      <type>SolutionPool *</type>
      <name>MakeDefaultSolutionPool</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aae471dd402e8c4860b84b50a17012364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchPhaseParameters *</type>
      <name>MakeLocalSearchPhaseParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0f79c92d6b10f900f213b483162466e6</anchor>
      <arglist>(LocalSearchOperator *const ls_operator, DecisionBuilder *const sub_decision_builder)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchPhaseParameters *</type>
      <name>MakeLocalSearchPhaseParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa2e2d27ac4fb6b74d727e08d31d6c94a</anchor>
      <arglist>(LocalSearchOperator *const ls_operator, DecisionBuilder *const sub_decision_builder, RegularLimit *const limit)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchPhaseParameters *</type>
      <name>MakeLocalSearchPhaseParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae91e0a142911a2c740cf89243d6eb119</anchor>
      <arglist>(LocalSearchOperator *const ls_operator, DecisionBuilder *const sub_decision_builder, RegularLimit *const limit, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchPhaseParameters *</type>
      <name>MakeLocalSearchPhaseParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a7fa99e9c07bce34dbd8e5f37db6a65</anchor>
      <arglist>(SolutionPool *const pool, LocalSearchOperator *const ls_operator, DecisionBuilder *const sub_decision_builder)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchPhaseParameters *</type>
      <name>MakeLocalSearchPhaseParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afed2405db5bb99b23dfddb4873814648</anchor>
      <arglist>(SolutionPool *const pool, LocalSearchOperator *const ls_operator, DecisionBuilder *const sub_decision_builder, RegularLimit *const limit)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchPhaseParameters *</type>
      <name>MakeLocalSearchPhaseParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad1b3f8d7a2345b6aa8400220d62d865c</anchor>
      <arglist>(SolutionPool *const pool, LocalSearchOperator *const ls_operator, DecisionBuilder *const sub_decision_builder, RegularLimit *const limit, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchFilter *</type>
      <name>MakeVariableDomainFilter</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5ac432327eb7d81e8521da4936f9a12b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeSumObjectiveFilter</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a845c613a7ca1a56f898c0b8eedc86a24</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator2 values, IntVar *const objective, Solver::LocalSearchFilterBound filter_enum)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeSumObjectiveFilter</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7c88b8b189ee310004876db8974e598f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator2 values, ObjectiveWatcher delta_objective_callback, IntVar *const objective, Solver::LocalSearchFilterBound filter_enum)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeSumObjectiveFilter</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a37f3b91e08faaa9c16b0940aac3f342a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, Solver::IndexEvaluator3 values, IntVar *const objective, Solver::LocalSearchFilterBound filter_enum)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeSumObjectiveFilter</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>accca1f9d148525f7eb246880c1c23f43</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, Solver::IndexEvaluator3 values, ObjectiveWatcher delta_objective_callback, IntVar *const objective, Solver::LocalSearchFilterBound filter_enum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TopPeriodicCheck</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6ffc56653b5ef9643ce87d05c9ebd8d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TopProgressPercent</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a121897bbc632a6e27428666949b781e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PushState</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6d2ae179cd6e66dc4cfd14307126b2cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PopState</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a67a90d3f386c8530100f810ef54a240a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SearchDepth</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1694a1680e59545addfa46bf8512218c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SearchLeftDepth</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5804f6bd3c4bc743ed902d467aa11343</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SolveDepth</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abbf76a02f141b5d555d37f047be49155</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBranchSelector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0333a30480e11666e6b67162d05b2144</anchor>
      <arglist>(BranchSelector bs)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeApplyBranchSelector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a51f15897d3435634cc78f1a18a67530f</anchor>
      <arglist>(BranchSelector bs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SaveAndSetValue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6b4182ad46462a9374c84063249eef45</anchor>
      <arglist>(T *adr, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SaveAndAdd</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a63132523df4ebdb9948c120d12b8d802</anchor>
      <arglist>(T *adr, T val)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Rand64</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5166877a2d94e773fc8abf433b086d82</anchor>
      <arglist>(int64 size)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>Rand32</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5ed39d9055b446d626bad476ace74cac</anchor>
      <arglist>(int32 size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReSeed</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a977f97618d061bd656919818a3e5b63c</anchor>
      <arglist>(int32 seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExportProfilingOverview</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a10095177497184eb69d38915b04e2b82</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>LocalSearchProfile</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a64fd8adbc00c3bed16bf4b824dfd3e2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CurrentlyInSolve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a06878b72d0eb67da9c177f29468a721c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>constraints</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0683bc1537d5fbc81ae0a2f0c271cd75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1c39e5b63288d7be78e1b70eeec4ee54</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>balancing_decision</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ade277831f6962ff6979f8a2e6558cef5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_fail_intercept</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a173ed9d464551149bbb92274ddb129e9</anchor>
      <arglist>(std::function&lt; void()&gt; fail_intercept)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_fail_intercept</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a57300a63dc9978b1a14a74e1698a8920</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DemonProfiler *</type>
      <name>demon_profiler</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9f660afd82319498e83cb630a71dedd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUseFastLocalSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afa66a85cec14980401bb16d4f4a84aa1</anchor>
      <arglist>(bool use_fast_local_search)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseFastLocalSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4f085aa9a85c0d17046a1410e46de3c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>acf6d57032f4a4c2ea638066179385b5e</anchor>
      <arglist>(const PropagationBaseObject *object) const</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>RegisterDemon</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aacf8c33542c5f879ab9e1e21717c6fa6</anchor>
      <arglist>(Demon *const demon)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>RegisterIntExpr</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aaa99adf81f8caaf01fd593e95c33ae50</anchor>
      <arglist>(IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>RegisterIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a66ac2efcb889501c994e3355d5a331ba</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>RegisterIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a70e56c3a6b9f72cd1237a48eda01d330</anchor>
      <arglist>(IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>Search *</type>
      <name>ActiveSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afd4223d7e392bacabeacbd256cfd6b47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ModelCache *</type>
      <name>Cache</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab2055a138f98b721cf76d2656a3b90f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InstrumentsDemons</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aeb2e6947882d148bfaece200f5c6b131</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsProfilingEnabled</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa916897f2e52eefc110e225ffd8d23e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocalSearchProfilingEnabled</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0f576f70d8fae8d5d498ec142490f8e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InstrumentsVariables</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af6888b151e4711476ed1e0d64732ac44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NameAllVariables</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3267baa7f21b8bda6b5ac4bced87fbae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>model_name</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6b43cb3f57f637e3c0633bac1d805564</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PropagationMonitor *</type>
      <name>GetPropagationMonitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9c8cdc1822429bc21c4523cee66b730d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPropagationMonitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a51c801ef84c5843e4b9a1ba489a15f0f</anchor>
      <arglist>(PropagationMonitor *const monitor)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchMonitor *</type>
      <name>GetLocalSearchMonitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1559c74f56ae49a7c49ebe359b3631cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddLocalSearchMonitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af723a41e416b056f0ab17c114498e675</anchor>
      <arglist>(LocalSearchMonitor *monitor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSearchContext</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a91ddc514b7b8418b66575323f56ac418</anchor>
      <arglist>(Search *search, const std::string &amp;search_context)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>SearchContext</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab5f100b79eb45ff9d1e65d6743c3724c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>SearchContext</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a71e90f91c2ab98ce233949f90abd987f</anchor>
      <arglist>(const Search *search) const</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>GetOrCreateLocalSearchState</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3d0f049e3e28448b276346341717d945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearLocalSearchState</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abb7ca3d6a720b538c57845e8573b45a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBooleanVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aea82a4efd98d6523154ab7c8fa9125d3</anchor>
      <arglist>(IntExpr *const expr, IntVar **inner_var, bool *is_negated) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsProduct</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a763e42ec89318fb1fc36098a60eca516</anchor>
      <arglist>(IntExpr *const expr, IntExpr **inner_expr, int64 *coefficient)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>CastExpression</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a191609e0de3a43db88f862257151974e</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FinishCurrentSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa17bdea653a78104b916a01addc085e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RestartCurrentSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad140a06463178d92b516e34762903b2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShouldFail</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ada8d3fd4401506308d77417b72c66dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CheckFail</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a489b5750b870a190187805c835ae9001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3ce9d85b90e2416f59ee89b13579c725</anchor>
      <arglist>(DecisionBuilder *const db, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aab76d0849165f2c5b70ca910114607cd</anchor>
      <arglist>(DecisionBuilder *const db)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ade33b8a9dce522094d5ce4b53fd5299d</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aae3ef7a28da87aeb3fbd258210f805c7</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a18f600b8b9594c59d9da9fb1b93cfa9b</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adadd60fc9e9d63a293b606376a171578</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3, SearchMonitor *const m4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a67ed18b7174df0eb483834276f19ce73</anchor>
      <arglist>(DecisionBuilder *const db, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a92bf29bae6bb68ecae8d09e477183689</anchor>
      <arglist>(DecisionBuilder *const db)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0e93535e454db167f3b2bac3ffc18610</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a77376dffe41cb00920902a485c137b75</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a309a2fb045ca55e103b3705b3ad3ba39</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b0d44ae2db74b96268885785bd9c328</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3, SearchMonitor *const m4)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NextSolution</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a11ed2a5d7bb8fb1a8967fee572ab9c47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a13e7e93a66ce0f15343c48c66d615e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EndSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab95c7f997dbe36deb51e7c0213bdf445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstraintSolverParameters</type>
      <name>DefaultSolverParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad47d47ea8e05e2187fcb81ae1dea508a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>MemoryUsage</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3d8a500d9eb0df0d74daffa348a4ffef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>tmp_vector_</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aad709b2db0bb964c2cdeeb0d47414297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNumPriorities</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad4faf53cefb2c2cdb8892b978a4b93a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>BaseIntExpr</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7de3703a8816dad121d3fd166c07a79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Constraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a697ed9eaa8955d595a023663ab1e8418</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>DemonProfiler</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a17a56adc8ee57642c3f00a1778319192</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>FindOneNeighbor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a68ccd69d2cb81ad9b176a007275fde0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>IntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a34419e55556ff4e92b447fe895bdb9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PropagationBaseObject</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>acd6c49bd62ce1a1777a1c0e644f1186e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Queue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a47dfc6f2bc0d50a6e7c92eb00d97b064</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SearchMonitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aac32a6eabe1d316d7ff5f92fedd1ec5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SearchLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abb737b44b0a0335d550d2a740ba00236</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>RoutingModel</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab7aef297f0c654af26dc7108c9ee6c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LocalSearchProfiler</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a622500a4c7e11bbc4b8a5e5de2c84f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SimpleRevFIFO</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a830db5e85473a2e0a7392ac6bbc538d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>RevImmutableMultiMap</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a523b4c1786dd34b9d1fa2579b91b4c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>InternalSaveBooleanVarValue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1a981ab215cf0097502d1dd4f3a542ac</anchor>
      <arglist>(Solver *const, IntVar *const)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3ce9d85b90e2416f59ee89b13579c725</anchor>
      <arglist>(DecisionBuilder *const db, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aab76d0849165f2c5b70ca910114607cd</anchor>
      <arglist>(DecisionBuilder *const db)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ade33b8a9dce522094d5ce4b53fd5299d</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aae3ef7a28da87aeb3fbd258210f805c7</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a18f600b8b9594c59d9da9fb1b93cfa9b</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adadd60fc9e9d63a293b606376a171578</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3, SearchMonitor *const m4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a67ed18b7174df0eb483834276f19ce73</anchor>
      <arglist>(DecisionBuilder *const db, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a92bf29bae6bb68ecae8d09e477183689</anchor>
      <arglist>(DecisionBuilder *const db)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0e93535e454db167f3b2bac3ffc18610</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a77376dffe41cb00920902a485c137b75</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a309a2fb045ca55e103b3705b3ad3ba39</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b0d44ae2db74b96268885785bd9c328</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3, SearchMonitor *const m4)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NextSolution</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a11ed2a5d7bb8fb1a8967fee572ab9c47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a13e7e93a66ce0f15343c48c66d615e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EndSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab95c7f997dbe36deb51e7c0213bdf445</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SortedDisjointIntervalList</name>
    <filename>classoperations__research_1_1SortedDisjointIntervalList.html</filename>
    <class kind="struct">operations_research::SortedDisjointIntervalList::IntervalComparator</class>
    <member kind="typedef">
      <type>std::set&lt; ClosedInterval, IntervalComparator &gt;</type>
      <name>IntervalSet</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>aa2245d981f2499b2948864f9e717b638</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntervalSet::iterator</type>
      <name>Iterator</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>aad3f138b3bec53adabe26c6d8a3f8b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SortedDisjointIntervalList</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>a1d800ef9b7bcda7b2bd88941e63e9c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SortedDisjointIntervalList</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>a1112195975448318ee0d3a0ca17d8077</anchor>
      <arglist>(const std::vector&lt; ClosedInterval &gt; &amp;intervals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SortedDisjointIntervalList</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>a85b8188b348ebff82e5ff38ef49da201</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;starts, const std::vector&lt; int64 &gt; &amp;ends)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SortedDisjointIntervalList</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>ac2174bbccd9beafcfc3e3009264b968f</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;starts, const std::vector&lt; int &gt; &amp;ends)</arglist>
    </member>
    <member kind="function">
      <type>SortedDisjointIntervalList</type>
      <name>BuildComplementOnInterval</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>ac13367be885072fd7068f25fc9b726af</anchor>
      <arglist>(int64 start, int64 end)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>InsertInterval</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>a3ff158f563c55210b76f860b30274daf</anchor>
      <arglist>(int64 start, int64 end)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>GrowRightByOne</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>aede8a3e747198ce6223d9f2ed788a3b3</anchor>
      <arglist>(int64 value, int64 *newly_covered)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InsertIntervals</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>ab2f22ce88ed4581b3e4859a2e4504e9e</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;starts, const std::vector&lt; int64 &gt; &amp;ends)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InsertIntervals</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>ad937d5864aa7a209f5c565a49daad904</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;starts, const std::vector&lt; int &gt; &amp;ends)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumIntervals</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>a6d5b1054cf1c7338bfd929bf2460140c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>FirstIntervalGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>a32e16ab60594417366e26339a1db03f3</anchor>
      <arglist>(int64 value) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>LastIntervalLessOrEqual</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>a0b57e677ac61bf5768d95bc64c0a4e4a</anchor>
      <arglist>(int64 value) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>a403ba2c2147b5f9086ca988671dd00fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Iterator</type>
      <name>begin</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>aa0c89218fd155f0cbe89cbfa05e35afc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Iterator</type>
      <name>end</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>ae7c2e3e4d3cddf60fd1e5340a956e716</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ClosedInterval &amp;</type>
      <name>last</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>a25eab92a71b4bb1fa45e9ce37c9b51f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>ab770345669a4b37c7df83dee5ebceb04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1SortedDisjointIntervalList.html</anchorfile>
      <anchor>a92df806fd079d25dbff73b57d36485f0</anchor>
      <arglist>(SortedDisjointIntervalList &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::StarGraphBase</name>
    <filename>classoperations__research_1_1StarGraphBase.html</filename>
    <templarg>NodeIndexType</templarg>
    <templarg>ArcIndexType</templarg>
    <templarg>DerivedGraph</templarg>
    <class kind="class">operations_research::StarGraphBase::ArcIterator</class>
    <class kind="class">operations_research::StarGraphBase::NodeIterator</class>
    <class kind="class">operations_research::StarGraphBase::OutgoingArcIterator</class>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa8a10d242f7088bfdee282e1246e00b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac0ae30f08a54ea67bf295b446157aed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a03cebcf1fdf356a8217ae2879100d324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a51a5033049b63ee5ce35b531b8474f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8aad937029f57b70efe059b908241685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a6aecaff5cd6eea0a7c93de644b8defc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7e2435063a7df2859f5b589852a8d4d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>LookUpArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad24fe35c2e3798137b42e1bc1c35e587</anchor>
      <arglist>(const NodeIndexType tail, const NodeIndexType head) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aac64d5e43f89177ab46f7ef763bb3c64</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NodeDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a5d2e4d934a8eb290a6298480d48faa52</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ArcDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30a3055f6669fd7739fd7acea16c4571</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a2c3f7aa31326efb573187d321679cba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7174acc6507b365096d7122ef430b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kFirstNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a2c2ac42ee1d86e253e0a85f3f1321824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kFirstArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a3693e89df768c2f25a31d4b4ee64ee3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kMaxNumNodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aebc1c53cc0d7242f47f0cf971a105e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kMaxNumArcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a043c924d609639e1cc5bea7d4a5a7fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StarGraphBase</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad1ce86785b174a8e247332d8043dbde0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StarGraphBase</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac513d8f4923fdd3e75eb7db1cadaade7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7cf8fa1e0a3abc8179da6309a86097f5</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>StartArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa58e05a2a30eb0b2b38cc366bba1d1ae</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>NextNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8038f289c7e5558d1b4d264677c0f4be</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30864ddfe33af3fe52a64d35bf298503</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ae83c0a0706d7c6bf85e08719e818c813</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>max_num_nodes_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a539adfb6a1003d4270e0f2c8fe6705b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>max_num_arcs_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa219b1703090300ed69dc9f5f6f54ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad9877f4f6b0822e2cb6aa9c4fe60ceb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a76da9f41f6215acb4ec4dd8da00c0e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; NodeIndexType &gt;</type>
      <name>head_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a1d032dcb17aa589d9a386fe04499654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>first_incident_arc_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>af1a0166faa8ccde14511e9fc547febac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StarGraphBase&lt; NodeIndexType, ArcIndexType, EbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</name>
    <filename>classoperations__research_1_1StarGraphBase.html</filename>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa8a10d242f7088bfdee282e1246e00b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac0ae30f08a54ea67bf295b446157aed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a03cebcf1fdf356a8217ae2879100d324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a51a5033049b63ee5ce35b531b8474f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8aad937029f57b70efe059b908241685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a6aecaff5cd6eea0a7c93de644b8defc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7e2435063a7df2859f5b589852a8d4d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>LookUpArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad24fe35c2e3798137b42e1bc1c35e587</anchor>
      <arglist>(const NodeIndexType tail, const NodeIndexType head) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aac64d5e43f89177ab46f7ef763bb3c64</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NodeDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a5d2e4d934a8eb290a6298480d48faa52</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ArcDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30a3055f6669fd7739fd7acea16c4571</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a2c3f7aa31326efb573187d321679cba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7174acc6507b365096d7122ef430b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kFirstNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a2c2ac42ee1d86e253e0a85f3f1321824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kFirstArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a3693e89df768c2f25a31d4b4ee64ee3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kMaxNumNodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aebc1c53cc0d7242f47f0cf971a105e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kMaxNumArcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a043c924d609639e1cc5bea7d4a5a7fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StarGraphBase</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad1ce86785b174a8e247332d8043dbde0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StarGraphBase</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac513d8f4923fdd3e75eb7db1cadaade7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7cf8fa1e0a3abc8179da6309a86097f5</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>StartArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa58e05a2a30eb0b2b38cc366bba1d1ae</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>NextNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8038f289c7e5558d1b4d264677c0f4be</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30864ddfe33af3fe52a64d35bf298503</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ae83c0a0706d7c6bf85e08719e818c813</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>max_num_nodes_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a539adfb6a1003d4270e0f2c8fe6705b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>max_num_arcs_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa219b1703090300ed69dc9f5f6f54ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad9877f4f6b0822e2cb6aa9c4fe60ceb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a76da9f41f6215acb4ec4dd8da00c0e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; NodeIndexType &gt;</type>
      <name>head_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a1d032dcb17aa589d9a386fe04499654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>first_incident_arc_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>af1a0166faa8ccde14511e9fc547febac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StarGraphBase&lt; NodeIndexType, ArcIndexType, ForwardEbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</name>
    <filename>classoperations__research_1_1StarGraphBase.html</filename>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa8a10d242f7088bfdee282e1246e00b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac0ae30f08a54ea67bf295b446157aed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a03cebcf1fdf356a8217ae2879100d324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a51a5033049b63ee5ce35b531b8474f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8aad937029f57b70efe059b908241685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a6aecaff5cd6eea0a7c93de644b8defc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7e2435063a7df2859f5b589852a8d4d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>LookUpArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad24fe35c2e3798137b42e1bc1c35e587</anchor>
      <arglist>(const NodeIndexType tail, const NodeIndexType head) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aac64d5e43f89177ab46f7ef763bb3c64</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NodeDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a5d2e4d934a8eb290a6298480d48faa52</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ArcDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30a3055f6669fd7739fd7acea16c4571</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a2c3f7aa31326efb573187d321679cba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7174acc6507b365096d7122ef430b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kFirstNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a2c2ac42ee1d86e253e0a85f3f1321824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kFirstArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a3693e89df768c2f25a31d4b4ee64ee3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kMaxNumNodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aebc1c53cc0d7242f47f0cf971a105e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kMaxNumArcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a043c924d609639e1cc5bea7d4a5a7fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StarGraphBase</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad1ce86785b174a8e247332d8043dbde0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StarGraphBase</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac513d8f4923fdd3e75eb7db1cadaade7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7cf8fa1e0a3abc8179da6309a86097f5</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>StartArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa58e05a2a30eb0b2b38cc366bba1d1ae</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>NextNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8038f289c7e5558d1b4d264677c0f4be</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30864ddfe33af3fe52a64d35bf298503</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ae83c0a0706d7c6bf85e08719e818c813</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>max_num_nodes_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a539adfb6a1003d4270e0f2c8fe6705b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>max_num_arcs_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa219b1703090300ed69dc9f5f6f54ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad9877f4f6b0822e2cb6aa9c4fe60ceb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a76da9f41f6215acb4ec4dd8da00c0e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; NodeIndexType &gt;</type>
      <name>head_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a1d032dcb17aa589d9a386fe04499654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>first_incident_arc_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>af1a0166faa8ccde14511e9fc547febac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StarGraphBase&lt; NodeIndexType, ArcIndexType, ForwardStaticGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</name>
    <filename>classoperations__research_1_1StarGraphBase.html</filename>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa8a10d242f7088bfdee282e1246e00b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac0ae30f08a54ea67bf295b446157aed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a03cebcf1fdf356a8217ae2879100d324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a68a1d993a6371e6fbf6a8ffe5c944a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_num_nodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a51a5033049b63ee5ce35b531b8474f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_num_arcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8aad937029f57b70efe059b908241685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>max_end_node_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a6aecaff5cd6eea0a7c93de644b8defc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7e2435063a7df2859f5b589852a8d4d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad69ccdbdbceba88bf784e2add4964b5b</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>LookUpArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad24fe35c2e3798137b42e1bc1c35e587</anchor>
      <arglist>(const NodeIndexType tail, const NodeIndexType head) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aac64d5e43f89177ab46f7ef763bb3c64</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NodeDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a5d2e4d934a8eb290a6298480d48faa52</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ArcDebugString</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30a3055f6669fd7739fd7acea16c4571</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a2c3f7aa31326efb573187d321679cba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7174acc6507b365096d7122ef430b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kFirstNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a2c2ac42ee1d86e253e0a85f3f1321824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kFirstArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a3693e89df768c2f25a31d4b4ee64ee3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kMaxNumNodes</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aebc1c53cc0d7242f47f0cf971a105e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kMaxNumArcs</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a043c924d609639e1cc5bea7d4a5a7fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StarGraphBase</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad1ce86785b174a8e247332d8043dbde0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StarGraphBase</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ac513d8f4923fdd3e75eb7db1cadaade7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a7cf8fa1e0a3abc8179da6309a86097f5</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>StartArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa58e05a2a30eb0b2b38cc366bba1d1ae</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeIndexType</type>
      <name>NextNode</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a8038f289c7e5558d1b4d264677c0f4be</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>NextArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a30864ddfe33af3fe52a64d35bf298503</anchor>
      <arglist>(const ArcIndexType arc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArcIndexType</type>
      <name>FirstOutgoingArc</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ae83c0a0706d7c6bf85e08719e818c813</anchor>
      <arglist>(const NodeIndexType node) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>max_num_nodes_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a539adfb6a1003d4270e0f2c8fe6705b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>max_num_arcs_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>aa219b1703090300ed69dc9f5f6f54ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>ad9877f4f6b0822e2cb6aa9c4fe60ceb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a76da9f41f6215acb4ec4dd8da00c0e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; NodeIndexType &gt;</type>
      <name>head_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>a1d032dcb17aa589d9a386fe04499654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector&lt; ArcIndexType &gt;</type>
      <name>first_incident_arc_</name>
      <anchorfile>classoperations__research_1_1StarGraphBase.html</anchorfile>
      <anchor>af1a0166faa8ccde14511e9fc547febac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CheapestInsertionFilteredDecisionBuilder::StartEndValue</name>
    <filename>structCheapestInsertionFilteredDecisionBuilder_1_1StartEndValue.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structCheapestInsertionFilteredDecisionBuilder_1_1StartEndValue.html</anchorfile>
      <anchor>a0c85e075940ea179577a2e090395b446</anchor>
      <arglist>(const StartEndValue &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>distance</name>
      <anchorfile>structCheapestInsertionFilteredDecisionBuilder_1_1StartEndValue.html</anchorfile>
      <anchor>ad144ade2ac271bf7f285bad778774b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vehicle</name>
      <anchorfile>structCheapestInsertionFilteredDecisionBuilder_1_1StartEndValue.html</anchorfile>
      <anchor>a843944b58d95caa2634a4c6b2792da2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::StaticGraph</name>
    <filename>classutil_1_1StaticGraph.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>BaseGraph&lt; NodeIndexType, ArcIndexType, false &gt;</base>
    <class kind="class">util::StaticGraph::OutgoingArcIterator</class>
    <member kind="typedef">
      <type>NodeIndexType</type>
      <name>NodeIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>adb271cf4bcf2de5b5bbe300d7054af29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArcIndexType</type>
      <name>ArcIndex</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0eba6e5899924388644dfa2258ae8929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticGraph</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>afe7f293d20a6f38c859af7c51ab1b105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticGraph</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>abb5850c4145abf3dad76d25668368505</anchor>
      <arglist>(NodeIndexType num_nodes, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Head</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>aefeec121033f3271585a059f0b5fbd3c</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>Tail</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>a9615f3c590e39f40ca5158bd4f37b5b4</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>OutDegree</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>a7241e6e63df39df439a5ebb4fe28773e</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingArcIterator &gt;</type>
      <name>OutgoingArcs</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>aa7eeb525aab90ef2bab82eb69687f600</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; OutgoingArcIterator &gt;</type>
      <name>OutgoingArcsStartingFrom</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>aa6626536ee02fe83aa26ff7bbcfc8ae7</anchor>
      <arglist>(NodeIndexType node, ArcIndexType from) const</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; NodeIndexType const  * &gt;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>a160bf25732e2b1a19e8bf6d853014070</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReserveNodes</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>a9b1c856f35140cb8902b94374a43d368</anchor>
      <arglist>(NodeIndexType bound) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReserveArcs</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>a98f11aaa1013df49976fcb5433538ff5</anchor>
      <arglist>(ArcIndexType bound) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNode</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>aa2a879f538b488698183a860bdb88596</anchor>
      <arglist>(NodeIndexType node)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>AddArc</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>a10d877b38553e9d2d0ce6fcfc4427df4</anchor>
      <arglist>(NodeIndexType tail, NodeIndexType head)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Build</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>a0b8444bcee7138b5702880a882d29283</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Build</name>
      <anchorfile>classutil_1_1StaticGraph.html</anchorfile>
      <anchor>abfa63fa219b3d8c73a324977312182eb</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>num_nodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a0f551c921fa0b5aaa334a6e36f61db4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>num_arcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aefb468e4d4a3128c91b3bad9f5b314c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; NodeIndex &gt;</type>
      <name>AllNodes</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a32ba4a5ca9a4b89f750eb2dc56518b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerRange&lt; ArcIndex &gt;</type>
      <name>AllForwardArcs</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abcfd7c21143e5ed38573c0dd60826dd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNodeValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>abf853acea86e01356f53055f77661770</anchor>
      <arglist>(NodeIndexType node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArcValid</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a2097ccda3b1ad27e2c82166979018bda</anchor>
      <arglist>(ArcIndexType arc) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType</type>
      <name>node_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a463d57480c9563a7a707c5d0928c9946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>arc_capacity</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a92ffd852b2ab2e5241f9832e71a2de71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab731ca5c638e7b1b0a2c459c94a90f55</anchor>
      <arglist>(NodeIndexType node_capacity, ArcIndexType arc_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeCapacities</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa3bd051d1e141b09dda17aa9b5f24f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GroupForwardArcsByFunctor</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a07214b96597069d781e27b1dd17ef83e</anchor>
      <arglist>(const A &amp;a, B *b)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType</type>
      <name>max_end_arc_index</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a346b8a5811f0e287e1ebce2de2c1ad28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeIndexType</type>
      <name>kNilNode</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ab1292c82a3f43be3bd57b63a05fe0214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArcIndexType</type>
      <name>kNilArc</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ad5b77846f77c2771e840820812ad5521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeCumulativeSum</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>ac47030fcb75a3220f8cf9ed79697056e</anchor>
      <arglist>(std::vector&lt; ArcIndexType &gt; *v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BuildStartAndForwardHead</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a63fd586eed6c345866317e2f0faf377e</anchor>
      <arglist>(SVector&lt; NodeIndexType &gt; *head, std::vector&lt; ArcIndexType &gt; *start, std::vector&lt; ArcIndexType &gt; *permutation)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>num_nodes_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a473db46afec1eabf0762411830dee30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeIndexType</type>
      <name>node_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a424bd34a9767e7edeaf3a60ecd3cb000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>num_arcs_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>af16f99d41856a7b22ae8a226ef09abff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArcIndexType</type>
      <name>arc_capacity_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>a895e891d1ad52ce3efcfeb7ba11194c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>const_capacities_</name>
      <anchorfile>classutil_1_1BaseGraph.html</anchorfile>
      <anchor>aa980e5526b9ded17a83928fc339c71e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::SVector</name>
    <filename>classutil_1_1SVector.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>SVector</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>ac342b96ebd12c4cc505567c0d5342fd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SVector</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>aa05f6afa9ff06e13079eff039632f0cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SVector</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a4ca50715f87be0dd9925dd46e2810436</anchor>
      <arglist>(const SVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>afc485e5858e15ce8ec376ca7640ede1e</anchor>
      <arglist>(const SVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SVector</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>abba34108f60eb020d0cc94ea8bd24c8f</anchor>
      <arglist>(SVector &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a9e1927755201f418ac04ac1ad4b4660d</anchor>
      <arglist>(SVector &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a6270e7d8614fca867c7f935b7a3e9cd3</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a01c346b7779b313b6ff1099a10946ed0</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>af0059304ee5c601207e97b1c742d5e84</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a06ed1003be01209763bb15e923399fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a25fc0f822d7e2a5eedab230ed56be07f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>acee1cc8d243acbdad8d30f97c5d54a5f</anchor>
      <arglist>(SVector&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a287f9791ba2e68e137d53fc038bbe432</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>ac34dbebcbd795b04b51dbfd96292d671</anchor>
      <arglist>(const T &amp;left=T(), const T &amp;right=T())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>afaad0723c70ab98c88d4a0441e1f98e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>capacity</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a5d3d8b4f10e9d40e85fbd54d04c33611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max_size</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>add718a46fe9ba1db673f69b2c02ec2a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_and_dealloc</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a36d88784d1f797dcf76845c47d74a4da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SVector&lt; ArcIndexType &gt;</name>
    <filename>classutil_1_1SVector.html</filename>
    <member kind="function">
      <type></type>
      <name>SVector</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>ac342b96ebd12c4cc505567c0d5342fd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SVector</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a4ca50715f87be0dd9925dd46e2810436</anchor>
      <arglist>(const SVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SVector</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>abba34108f60eb020d0cc94ea8bd24c8f</anchor>
      <arglist>(SVector &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SVector</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>aa05f6afa9ff06e13079eff039632f0cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>afc485e5858e15ce8ec376ca7640ede1e</anchor>
      <arglist>(const SVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a9e1927755201f418ac04ac1ad4b4660d</anchor>
      <arglist>(SVector &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a6270e7d8614fca867c7f935b7a3e9cd3</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const ArcIndexType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a01c346b7779b313b6ff1099a10946ed0</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>af0059304ee5c601207e97b1c742d5e84</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a06ed1003be01209763bb15e923399fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArcIndexType *</type>
      <name>data</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a25fc0f822d7e2a5eedab230ed56be07f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>acee1cc8d243acbdad8d30f97c5d54a5f</anchor>
      <arglist>(SVector&lt; ArcIndexType &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a287f9791ba2e68e137d53fc038bbe432</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>ac34dbebcbd795b04b51dbfd96292d671</anchor>
      <arglist>(const ArcIndexType &amp;left=ArcIndexType(), const ArcIndexType &amp;right=ArcIndexType())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>afaad0723c70ab98c88d4a0441e1f98e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>capacity</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a5d3d8b4f10e9d40e85fbd54d04c33611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max_size</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>add718a46fe9ba1db673f69b2c02ec2a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_and_dealloc</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a36d88784d1f797dcf76845c47d74a4da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SVector&lt; NodeIndexType &gt;</name>
    <filename>classutil_1_1SVector.html</filename>
    <member kind="function">
      <type></type>
      <name>SVector</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>ac342b96ebd12c4cc505567c0d5342fd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SVector</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a4ca50715f87be0dd9925dd46e2810436</anchor>
      <arglist>(const SVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SVector</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>abba34108f60eb020d0cc94ea8bd24c8f</anchor>
      <arglist>(SVector &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SVector</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>aa05f6afa9ff06e13079eff039632f0cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>afc485e5858e15ce8ec376ca7640ede1e</anchor>
      <arglist>(const SVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a9e1927755201f418ac04ac1ad4b4660d</anchor>
      <arglist>(SVector &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a6270e7d8614fca867c7f935b7a3e9cd3</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const NodeIndexType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a01c346b7779b313b6ff1099a10946ed0</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>af0059304ee5c601207e97b1c742d5e84</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a06ed1003be01209763bb15e923399fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeIndexType *</type>
      <name>data</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a25fc0f822d7e2a5eedab230ed56be07f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>acee1cc8d243acbdad8d30f97c5d54a5f</anchor>
      <arglist>(SVector&lt; NodeIndexType &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a287f9791ba2e68e137d53fc038bbe432</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>ac34dbebcbd795b04b51dbfd96292d671</anchor>
      <arglist>(const NodeIndexType &amp;left=NodeIndexType(), const NodeIndexType &amp;right=NodeIndexType())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>afaad0723c70ab98c88d4a0441e1f98e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>capacity</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a5d3d8b4f10e9d40e85fbd54d04c33611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max_size</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>add718a46fe9ba1db673f69b2c02ec2a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_and_dealloc</name>
      <anchorfile>classutil_1_1SVector.html</anchorfile>
      <anchor>a36d88784d1f797dcf76845c47d74a4da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SwapIndexPairOperator</name>
    <filename>classoperations__research_1_1SwapIndexPairOperator.html</filename>
    <base>operations_research::IntVarLocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>SwapIndexPairOperator</name>
      <anchorfile>classoperations__research_1_1SwapIndexPairOperator.html</anchorfile>
      <anchor>a0ac93cd1cb2105295c385323478b158b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;path_vars, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SwapIndexPairOperator</name>
      <anchorfile>classoperations__research_1_1SwapIndexPairOperator.html</anchorfile>
      <anchor>aa5f7f593d6a8b735f7c9653a3262cab9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1SwapIndexPairOperator.html</anchorfile>
      <anchor>aa898c7fe71ea8c1bf1d16ac656037c01</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnStart</name>
      <anchorfile>classoperations__research_1_1SwapIndexPairOperator.html</anchorfile>
      <anchor>a57b4655f98c6bda8b055156b091001a4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SwapIndexPairOperator.html</anchorfile>
      <anchor>a4b6e91cf387750a4d199f0ec3a225008</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a821c7457813d5411b11e6bbfce63f47a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SymmetryBreaker</name>
    <filename>classoperations__research_1_1SymmetryBreaker.html</filename>
    <base>operations_research::DecisionVisitor</base>
    <member kind="function">
      <type></type>
      <name>SymmetryBreaker</name>
      <anchorfile>classoperations__research_1_1SymmetryBreaker.html</anchorfile>
      <anchor>a9a170caed81ab593c4078b94c0eb6f48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SymmetryBreaker</name>
      <anchorfile>classoperations__research_1_1SymmetryBreaker.html</anchorfile>
      <anchor>a6586642345a43086f971910d72f08602</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIntegerVariableEqualValueClause</name>
      <anchorfile>classoperations__research_1_1SymmetryBreaker.html</anchorfile>
      <anchor>ad77fe19a9060d61fa5c218fc2b48cfe0</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIntegerVariableGreaterOrEqualValueClause</name>
      <anchorfile>classoperations__research_1_1SymmetryBreaker.html</anchorfile>
      <anchor>a1adf7a226f0e955569f07afbdc96b415</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIntegerVariableLessOrEqualValueClause</name>
      <anchorfile>classoperations__research_1_1SymmetryBreaker.html</anchorfile>
      <anchor>ac6f27d524c9f0efd7b467d0e6db48478</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSetVariableValue</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>ac6e7b0464cdfb0caaac7661366295e65</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSplitVariableDomain</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a8faebc249d15a171102fd56fbe725216</anchor>
      <arglist>(IntVar *const var, int64 value, bool start_with_lower_half)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitScheduleOrPostpone</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>af48323740d18f4059ff01271b50eb9f2</anchor>
      <arglist>(IntervalVar *const var, int64 est)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitScheduleOrExpedite</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a7003dd5f4ff2cf139801866b35d02960</anchor>
      <arglist>(IntervalVar *const var, int64 est)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitRankFirstInterval</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a00084fcd22fc7f269b23dbfd5aa1032f</anchor>
      <arglist>(SequenceVar *const sequence, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitRankLastInterval</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a771d64a88d1eecc6fcce4a5b39349be8</anchor>
      <arglist>(SequenceVar *const sequence, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitUnknownDecision</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>af93d0ecd1a2cf63364ce9f8e554979cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SymmetryManager</name>
      <anchorfile>classoperations__research_1_1SymmetryBreaker.html</anchorfile>
      <anchor>aa126bb367514a24cbd6e0b2c48fda9ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::TableConstraint</name>
    <filename>classoperations__research_1_1sat_1_1TableConstraint.html</filename>
    <base>operations_research::sat::Constraint</base>
    <member kind="function">
      <type>void</type>
      <name>AddTuple</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraint.html</anchorfile>
      <anchor>a90017a38e8ac8eaf4644bdce5e5e1420</anchor>
      <arglist>(absl::Span&lt; const int64 &gt; tuple)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9052e9e1dd8248433909b5542f314add</anchor>
      <arglist>(absl::Span&lt; const BoolVar &gt; literals)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>OnlyEnforceIf</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>ab6457905c9a8cd1c5f92738d57e6f298</anchor>
      <arglist>(BoolVar literal)</arglist>
    </member>
    <member kind="function">
      <type>Constraint</type>
      <name>WithName</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9401ab195650160402df5b61f8ac9bda</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>Name</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aeaf30f4ee7d141e68905f1ac2432b937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintProto &amp;</type>
      <name>Proto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>aa0b277df64333f670b66c8d5295b8250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstraintProto *</type>
      <name>MutableProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>acaa17b2fbfd62f6845329ae944835654</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstraintProto *</type>
      <name>proto_</name>
      <anchorfile>classoperations__research_1_1sat_1_1Constraint.html</anchorfile>
      <anchor>a9d74c3d77f601020ab87700745f830ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CpModelBuilder</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraint.html</anchorfile>
      <anchor>ae04c85577cf33a05fb50bb361877fb42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::sat::TableConstraintProto</name>
    <filename>classoperations__research_1_1sat_1_1TableConstraintProto.html</filename>
    <member kind="function">
      <type></type>
      <name>TableConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a16e43cab707033fdf695a0495dd6d8bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TableConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>af94d1e4fd8f9d37f713239b7c7057831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TableConstraintProto</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>ab8922334fd4044502e91f4e4389eabae</anchor>
      <arglist>(const TableConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>TableConstraintProto &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a1c026db493b5064e9ce685013912e67f</anchor>
      <arglist>(const TableConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a1b5c2aeb972d2fb796abd5332db49cad</anchor>
      <arglist>(TableConstraintProto *other)</arglist>
    </member>
    <member kind="function">
      <type>TableConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a1b28444b983563a9b2242d6601cf81d8</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>TableConstraintProto *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>ac32c367b2e64008e84ed459e6b36b337</anchor>
      <arglist>(::google::protobuf::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a29595acc87491e4baa443dff8a553085</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a1c8f7f2a4102935aab12103884c93f6a</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a3c984e0c045468bb116785cb126dfed1</anchor>
      <arglist>(const TableConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a20e715aca6f96aaccddbe64a5d710e49</anchor>
      <arglist>(const TableConstraintProto &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>af4b28509dc8689461709c0127f4853f1</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a0c3fb26434ef06d7a71e6c47d21e839d</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a08692ee327925e51c39c148f1d5a6daa</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a4acfab8c4cb91a62bdb315ee01cbc399</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>aa3d5038f619f4d26df68912643c9c19b</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>aad65e0b4426550b418a8581478c6a956</anchor>
      <arglist>(::google::protobuf::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>aa4c3d4029ea446b64a0f569058bf7ce6</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>af70593a7881923531e6ec0b6bd633b0e</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vars_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a8916d9c73976298b3417d1c95db1b7e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a3d09f346c980a6d11cc9897b084334dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int32</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>af08a9d644b6c6b919a525d93eaecdc7f</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a99f424f79fa01716a8973836a6403c9a</anchor>
      <arglist>(int index, ::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a7816ae8513ee482a4388cb15208a2482</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a7ff12db3864cbbbd9ea188f0ea1b131a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_vars</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a1f5e2d436e0bc4c401097d5afc844efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>values_size</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>aa5f68514950fc8b3893411a889477e31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_values</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a2749177005e30925464a17eb760d8e2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::int64</type>
      <name>values</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>ad44be45403c52030c76eb10d03dc287c</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_values</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>aae2e73a33d7caf8229a98777b764038b</anchor>
      <arglist>(int index, ::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_values</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a5b3b062000ff1eccafe2da65be87ec2c</anchor>
      <arglist>(::google::protobuf::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; &amp;</type>
      <name>values</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a704cd614efff326dd36876f219f8aeed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::RepeatedField&lt; ::google::protobuf::int64 &gt; *</type>
      <name>mutable_values</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a5a023305323cffb9478f0bd32376e2b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_negated</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>ac4e476033d9763fbb9262227431988fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negated</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a399b9373cde8f9b9b12477f04674445f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_negated</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>ae2b3c294de412dda1f23c4b6285291f5</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a348929fafab761e7a99660c2b81cc05f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TableConstraintProto &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>af2a784dd805035380e82f86c3333994a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>ae50dd96ebfe7243c9ccbabef50e02a5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TableConstraintProto *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>ac94e8ee9c10f721d70842012ea869aba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>a5fd83c0d5d8e0a4a2f04f0a19b15f416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kVarsFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>ae14094907d6df98818e142ca972242b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kValuesFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>aec84e813091702a88437f3f7a2d32a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNegatedFieldNumber</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>aa34757807168e251188f600630f9f8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>afb8396aa773b2cf0b644f1ddf0f6f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1sat_1_1TableConstraintProto.html</anchorfile>
      <anchor>adb928cd62412b93fef5e35aaa9723660</anchor>
      <arglist>(TableConstraintProto &amp;a, TableConstraintProto &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto</name>
    <filename>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</filename>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::ParseTableField entries []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</anchorfile>
      <anchor>af41db19ef04ddcf5cd1965d166b8354f</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::AuxillaryParseTableField aux []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</anchorfile>
      <anchor>a415481cc8d72be6f9764359182c461c7</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::ParseTable schema [2]</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</anchorfile>
      <anchor>aa11e67be2ffd5e82c8dff2fbd01496c2</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::internal::FieldMetadata</type>
      <name>field_metadata</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</anchorfile>
      <anchor>a1f68eaace521b5ee7c9af9918945d49c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::internal::SerializationTable</type>
      <name>serialization_table</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</anchorfile>
      <anchor>ac3b5be8b698271306df8a1e651c69e91</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::uint32</type>
      <name>offsets</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</anchorfile>
      <anchor>aebce3e159a3380eeb0469a42e01185bc</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</name>
    <filename>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</filename>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::ParseTableField entries []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</anchorfile>
      <anchor>a600be17546d71407f9daeb84ed5cf49e</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::AuxillaryParseTableField aux []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</anchorfile>
      <anchor>aad89ee01d278c4fc793c58c9c95c7214</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::ParseTable schema [3]</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</anchorfile>
      <anchor>a791b36c895a013a41cae7a356a2e802a</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::internal::FieldMetadata</type>
      <name>field_metadata</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</anchorfile>
      <anchor>a61d84b4cdeb3a87694936601fd7b3ce2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::internal::SerializationTable</type>
      <name>serialization_table</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</anchorfile>
      <anchor>ab2eb8f60a38ea3bb6dce7e3b7b97b180</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::uint32</type>
      <name>offsets</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</anchorfile>
      <anchor>ab07a3979731c1cb2db252492b85b2a9e</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto</name>
    <filename>structTableStruct__ortools__2flinear__5fsolver__2flinear__5fsolver__2eproto.html</filename>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::ParseTableField entries []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2flinear__5fsolver__2flinear__5fsolver__2eproto.html</anchorfile>
      <anchor>aad7f9cccf25ab5347ccfdd3181c5313c</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::AuxillaryParseTableField aux []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2flinear__5fsolver__2flinear__5fsolver__2eproto.html</anchorfile>
      <anchor>a7f73ad5a3cb84317de11e0fce25b5748</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::ParseTable schema [10]</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2flinear__5fsolver__2flinear__5fsolver__2eproto.html</anchorfile>
      <anchor>a36f53a995cc0a98292f46326c1a88ab4</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::internal::FieldMetadata</type>
      <name>field_metadata</name>
      <anchorfile>structTableStruct__ortools__2flinear__5fsolver__2flinear__5fsolver__2eproto.html</anchorfile>
      <anchor>aa4070ea2442883c40844f0afe9086391</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::internal::SerializationTable</type>
      <name>serialization_table</name>
      <anchorfile>structTableStruct__ortools__2flinear__5fsolver__2flinear__5fsolver__2eproto.html</anchorfile>
      <anchor>aad230e47ede8e2ef2572608919accff5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::uint32</type>
      <name>offsets</name>
      <anchorfile>structTableStruct__ortools__2flinear__5fsolver__2flinear__5fsolver__2eproto.html</anchorfile>
      <anchor>a9c8f2578ea4d1b52ca41a188fb1db106</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto</name>
    <filename>structTableStruct__ortools__2fsat__2fcp__5fmodel__2eproto.html</filename>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::ParseTableField entries []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fsat__2fcp__5fmodel__2eproto.html</anchorfile>
      <anchor>ae2bf684da069ec17ebefa296adb22993</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::AuxillaryParseTableField aux []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fsat__2fcp__5fmodel__2eproto.html</anchorfile>
      <anchor>a4a8ba0ded625913812da9d0b273f5c7f</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::ParseTable schema [24]</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fsat__2fcp__5fmodel__2eproto.html</anchorfile>
      <anchor>aadbc72e8b80df0e57b1d038e2ebb5a5a</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::internal::FieldMetadata</type>
      <name>field_metadata</name>
      <anchorfile>structTableStruct__ortools__2fsat__2fcp__5fmodel__2eproto.html</anchorfile>
      <anchor>a2a956171ed889dbcef47d7258c058b89</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::internal::SerializationTable</type>
      <name>serialization_table</name>
      <anchorfile>structTableStruct__ortools__2fsat__2fcp__5fmodel__2eproto.html</anchorfile>
      <anchor>ac9df3dc13cf6f89405c66a081ffe833d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::uint32</type>
      <name>offsets</name>
      <anchorfile>structTableStruct__ortools__2fsat__2fcp__5fmodel__2eproto.html</anchorfile>
      <anchor>ace6ed23e4e261a5f5b41ec94ebe7ff29</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TableStruct_ortools_2fsat_2fsat_5fparameters_2eproto</name>
    <filename>structTableStruct__ortools__2fsat__2fsat__5fparameters__2eproto.html</filename>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::ParseTableField entries []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fsat__2fsat__5fparameters__2eproto.html</anchorfile>
      <anchor>a45e4823caaa375e4256d4bef9f4ecc88</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::AuxillaryParseTableField aux []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fsat__2fsat__5fparameters__2eproto.html</anchorfile>
      <anchor>a8e3aaa6a265314766ef0b541cfaf56e9</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::internal::ParseTable schema [1]</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fsat__2fsat__5fparameters__2eproto.html</anchorfile>
      <anchor>a591b5d07c121c984719dbf4fcdd8cd50</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::internal::FieldMetadata</type>
      <name>field_metadata</name>
      <anchorfile>structTableStruct__ortools__2fsat__2fsat__5fparameters__2eproto.html</anchorfile>
      <anchor>a9d4b81cf8b41b0cfc7e999500b7d70f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::internal::SerializationTable</type>
      <name>serialization_table</name>
      <anchorfile>structTableStruct__ortools__2fsat__2fsat__5fparameters__2eproto.html</anchorfile>
      <anchor>a1b323b885ae3884bcc86749b33bbbd04</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::google::protobuf::uint32</type>
      <name>offsets</name>
      <anchorfile>structTableStruct__ortools__2fsat__2fsat__5fparameters__2eproto.html</anchorfile>
      <anchor>a0f4088c97bd013efcbc107dcb32d3fbd</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::or_internal::TailArrayBuilder</name>
    <filename>structoperations__research_1_1or__internal_1_1TailArrayBuilder.html</filename>
    <templarg></templarg>
    <templarg>has_reverse_arcs</templarg>
    <member kind="function">
      <type></type>
      <name>TailArrayBuilder</name>
      <anchorfile>structoperations__research_1_1or__internal_1_1TailArrayBuilder.html</anchorfile>
      <anchor>a28b7688fafdc836ef6a73745a0fce436</anchor>
      <arglist>(GraphType *unused_graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildTailArray</name>
      <anchorfile>structoperations__research_1_1or__internal_1_1TailArrayBuilder.html</anchorfile>
      <anchor>a589594565d8036122b077b6cd073a78b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::or_internal::TailArrayBuilder&lt; GraphType, false &gt;</name>
    <filename>structoperations__research_1_1or__internal_1_1TailArrayBuilder_3_01GraphType_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>TailArrayBuilder</name>
      <anchorfile>structoperations__research_1_1or__internal_1_1TailArrayBuilder_3_01GraphType_00_01false_01_4.html</anchorfile>
      <anchor>a24a7428dbeb51c80bd4286717a76a6bd</anchor>
      <arglist>(GraphType *graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildTailArray</name>
      <anchorfile>structoperations__research_1_1or__internal_1_1TailArrayBuilder_3_01GraphType_00_01false_01_4.html</anchorfile>
      <anchor>aa11235f108a5e901782389445d5142e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>GraphType *const</type>
      <name>graph_</name>
      <anchorfile>structoperations__research_1_1or__internal_1_1TailArrayBuilder_3_01GraphType_00_01false_01_4.html</anchorfile>
      <anchor>ab7e50258cbade6b04cce77b445085dca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::TailArrayManager</name>
    <filename>classoperations__research_1_1TailArrayManager.html</filename>
    <templarg>GraphType</templarg>
    <member kind="function">
      <type></type>
      <name>TailArrayManager</name>
      <anchorfile>classoperations__research_1_1TailArrayManager.html</anchorfile>
      <anchor>af2a2857c30d4d6ce5d0fb9cb68ba440c</anchor>
      <arglist>(GraphType *g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildTailArrayFromAdjacencyListsIfForwardGraph</name>
      <anchorfile>classoperations__research_1_1TailArrayManager.html</anchorfile>
      <anchor>a8d3f759c1000ddd460ca266933374f0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReleaseTailArrayIfForwardGraph</name>
      <anchorfile>classoperations__research_1_1TailArrayManager.html</anchorfile>
      <anchor>ac1ef6f2392846180bc3c98f97a583906</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::or_internal::TailArrayReleaser</name>
    <filename>structoperations__research_1_1or__internal_1_1TailArrayReleaser.html</filename>
    <templarg></templarg>
    <templarg>has_reverse_arcs</templarg>
    <member kind="function">
      <type></type>
      <name>TailArrayReleaser</name>
      <anchorfile>structoperations__research_1_1or__internal_1_1TailArrayReleaser.html</anchorfile>
      <anchor>aeff559d3c44a19d42a1f33813c6c362d</anchor>
      <arglist>(GraphType *unused_graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReleaseTailArray</name>
      <anchorfile>structoperations__research_1_1or__internal_1_1TailArrayReleaser.html</anchorfile>
      <anchor>a5a7ac35808765a8abc9fd2e84ea6ea72</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::or_internal::TailArrayReleaser&lt; GraphType, false &gt;</name>
    <filename>structoperations__research_1_1or__internal_1_1TailArrayReleaser_3_01GraphType_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>TailArrayReleaser</name>
      <anchorfile>structoperations__research_1_1or__internal_1_1TailArrayReleaser_3_01GraphType_00_01false_01_4.html</anchorfile>
      <anchor>a15337365a0acc879ac0b8644367d49cd</anchor>
      <arglist>(GraphType *graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReleaseTailArray</name>
      <anchorfile>structoperations__research_1_1or__internal_1_1TailArrayReleaser_3_01GraphType_00_01false_01_4.html</anchorfile>
      <anchor>a32810896d711a4ee8b476a744e0df3b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>GraphType *const</type>
      <name>graph_</name>
      <anchorfile>structoperations__research_1_1or__internal_1_1TailArrayReleaser_3_01GraphType_00_01false_01_4.html</anchorfile>
      <anchor>a2846e22b5bbaabf4c4c6079fb3f91541</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DisjunctivePropagator::Tasks</name>
    <filename>structDisjunctivePropagator_1_1Tasks.html</filename>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>structDisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a020532a499977a36e38da249afc71230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_chain_tasks</name>
      <anchorfile>structDisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a7338766cc78015279cf631748bd27897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_min</name>
      <anchorfile>structDisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>ae81bd9ed38788f7ab29ffa6b06c8780a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_max</name>
      <anchorfile>structDisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>ad83f5b65e161e0c33b47c44ebe7a5486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>duration_min</name>
      <anchorfile>structDisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a2dcba5165de6aec6cf5ab9dd3e703712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>duration_max</name>
      <anchorfile>structDisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a646bf1d98f0bcb2b157072f8dca5661d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>end_min</name>
      <anchorfile>structDisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a29e9e4b732a34a405f0f43b746ebc741</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>end_max</name>
      <anchorfile>structDisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>aa686b73e8435b6c0052b4e545db897ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; bool &gt;</type>
      <name>is_preemptible</name>
      <anchorfile>structDisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>aaa20225fc54638db1493c9ae0b2947f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const SortedDisjointIntervalList * &gt;</type>
      <name>forbidden_intervals</name>
      <anchorfile>structDisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a480a1199c2254e1b14f5124b77a65fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::pair&lt; int64, int64 &gt; &gt;</type>
      <name>distance_duration</name>
      <anchorfile>structDisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a78f61265441dff8a40873494e79e90bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>util::UndirectedAdjacencyListsOfDirectedGraph</name>
    <filename>classutil_1_1UndirectedAdjacencyListsOfDirectedGraph.html</filename>
    <templarg></templarg>
    <class kind="class">util::UndirectedAdjacencyListsOfDirectedGraph::AdjacencyListIterator</class>
    <member kind="typedef">
      <type>Graph::OutgoingOrOppositeIncomingArcIterator</type>
      <name>ArcIterator</name>
      <anchorfile>classutil_1_1UndirectedAdjacencyListsOfDirectedGraph.html</anchorfile>
      <anchor>a6402dd9e7851af22b907c0af3e240dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UndirectedAdjacencyListsOfDirectedGraph</name>
      <anchorfile>classutil_1_1UndirectedAdjacencyListsOfDirectedGraph.html</anchorfile>
      <anchor>aa3254dffa224cf75efab4e3b034b39d8</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>BeginEndWrapper&lt; AdjacencyListIterator &gt;</type>
      <name>operator[]</name>
      <anchorfile>classutil_1_1UndirectedAdjacencyListsOfDirectedGraph.html</anchorfile>
      <anchor>a8d68da65b93ce8e85c66d431858897bb</anchor>
      <arglist>(int node) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::UnsortedNullableRevBitset</name>
    <filename>classoperations__research_1_1UnsortedNullableRevBitset.html</filename>
    <member kind="function">
      <type></type>
      <name>UnsortedNullableRevBitset</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>ac50e298d0404cb5d5bd4418d5416e0b7</anchor>
      <arglist>(int bit_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnsortedNullableRevBitset</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a584260636e22ebad9b0d8f2d8e896d49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a6a3cc8dfc50782fdafe3f7ae27ded2ae</anchor>
      <arglist>(Solver *const solver, const std::vector&lt; uint64 &gt; &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RevSubtract</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a597373530d096ff338bf697633ff8997</anchor>
      <arglist>(Solver *const solver, const std::vector&lt; uint64 &gt; &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RevAnd</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a87955b04701c3ad95557126accd8238c</anchor>
      <arglist>(Solver *const solver, const std::vector&lt; uint64 &gt; &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ActiveWordSize</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a808b280d420c8fe393e5dc58ae6007ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a914f7cd7d3e1796dd3aa05f4d1ad4a85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Intersects</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>ab15619861b99a57a19f69aa4876001be</anchor>
      <arglist>(const std::vector&lt; uint64 &gt; &amp;mask, int *support_index)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>bit_size</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a3a52bebf3dd298ee6552e3628997248f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>word_size</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a3b5fcc5763d6f4b59a3df487fc0e8d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RevIntSet&lt; int &gt; &amp;</type>
      <name>active_words</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>abe8303e30c616b1306b05132dd97c4d7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::VarLocalSearchOperator</name>
    <filename>classoperations__research_1_1VarLocalSearchOperator.html</filename>
    <templarg>V</templarg>
    <templarg>Val</templarg>
    <templarg>Handler</templarg>
    <base>operations_research::LocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>VarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a1e25813206d18e9df5ef7c940ff748dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>adef2d40376a89ff39c852ffd681779fd</anchor>
      <arglist>(std::vector&lt; V * &gt; vars, Handler var_handler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a2d36e4b9c517a0c0874916db4099bc29</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Val &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>V *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const Val &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const Val &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; V * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnStart</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acea2a4d4db296445315d66aaec85ee81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a2951ae57e5fd3fce7d4f9b831594b460</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; V * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Val &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Val &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Val &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Handler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VarLocalSearchOperator&lt; IntVar, int64, IntVarLocalSearchHandler &gt;</name>
    <filename>classoperations__research_1_1VarLocalSearchOperator.html</filename>
    <base>operations_research::LocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>VarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a1e25813206d18e9df5ef7c940ff748dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>adef2d40376a89ff39c852ffd681779fd</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; vars, IntVarLocalSearchHandler var_handler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a2d36e4b9c517a0c0874916db4099bc29</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnStart</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acea2a4d4db296445315d66aaec85ee81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a2951ae57e5fd3fce7d4f9b831594b460</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SavingsFilteredDecisionBuilder::VehicleClassEntry</name>
    <filename>structSavingsFilteredDecisionBuilder_1_1VehicleClassEntry.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structSavingsFilteredDecisionBuilder_1_1VehicleClassEntry.html</anchorfile>
      <anchor>a9c61973758bb413be11e59ffaad7216f</anchor>
      <arglist>(const VehicleClassEntry &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vehicle_class</name>
      <anchorfile>structSavingsFilteredDecisionBuilder_1_1VehicleClassEntry.html</anchorfile>
      <anchor>aa504ae94659c25c6146786485941e8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>fixed_cost</name>
      <anchorfile>structSavingsFilteredDecisionBuilder_1_1VehicleClassEntry.html</anchorfile>
      <anchor>a27394b3588b9d4b2dfd663669772d698</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>google</name>
    <filename>namespacegoogle.html</filename>
    <namespace>google::protobuf</namespace>
  </compound>
  <compound kind="namespace">
    <name>google::protobuf</name>
    <filename>namespacegoogle_1_1protobuf.html</filename>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::FirstSolutionStrategy_Value &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::LocalSearchMetaheuristic_Value &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::MPModelRequest_SolverType &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::MPSolverCommonParameters_LPAlgorithmValues &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::MPSolverResponseStatus &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::CpSolverStatus &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_BinaryMinizationAlgorithm &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_ClauseOrdering &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_ClauseProtection &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_MaxSatAssumptionOrder &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_Polarity &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_RestartAlgorithm &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_SearchBranching &gt;</class>
    <class kind="struct">google::protobuf::is_proto_enum&lt; ::operations_research::sat::SatParameters_VariableOrder &gt;</class>
    <member kind="function">
      <type>::operations_research::FirstSolutionStrategy *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::FirstSolutionStrategy &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a46a0573ef15e8d450a94645726e4a115</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::LocalSearchMetaheuristic *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::LocalSearchMetaheuristic &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a46ac56c90da4ab9e7c9d2cbe996a6889</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::FirstSolutionStrategy_Value &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a34bc82f8ac3dc7b49fdfc02cd399fcfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::LocalSearchMetaheuristic_Value &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>afdc886b972e845de58089a1f0fd7b61a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::RoutingModelParameters *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::RoutingModelParameters &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a9b7b91a9046ed6001177f9828bb02baf</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::RoutingSearchParameters *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::RoutingSearchParameters &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a48576a6238bbee63a4e7b85f192b84c7</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a881c03b2a6c813d26593e6de11e4ff3c</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a46426d4330f8798191f318e844342edd</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPGeneralConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPGeneralConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab2f9904d7bb5495c08a6624901891d05</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPIndicatorConstraint *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPIndicatorConstraint &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a09aec13b641f3ff6f0aaa054d9ffb01a</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPModelProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPModelProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a782374154dcade461d694c642d1a118a</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPModelRequest *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPModelRequest &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a218a8e8e9347626cd702a3a9c5e4276f</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPSolutionResponse *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPSolutionResponse &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a97bcf46029da44aea2acff25eeb8f5e5</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPSolverCommonParameters *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPSolverCommonParameters &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a3123875581158bdc0cef8cc7334204c3</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::MPVariableProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::MPVariableProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a5241f254a7dd0adf3d39675538cf578f</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalDouble *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::OptionalDouble &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a57c05b56ab566a13251384836a0ac42e</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::PartialVariableAssignment *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::PartialVariableAssignment &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a62287180108f55a9b20f78b37944b485</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::MPSolverCommonParameters_LPAlgorithmValues &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>acc185aeb57cb91a0ccac4b25007bdcf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::MPModelRequest_SolverType &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab68113b1eb7e078bbcbcec215cb1abff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::MPSolverResponseStatus &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a9f64efd8b0aaa41a3134261c9575ac01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::AllDifferentConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::AllDifferentConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab6c5ebe14cfc68d93a5f60686f2ae22d</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::AutomatonConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::AutomatonConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a47da04ba2be147be8b0a249d1127175f</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::BoolArgumentProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::BoolArgumentProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ad530047c3866901687cad573a8902a36</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CircuitConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::CircuitConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab8dbc8cdb17b07a5682228a84ca326a7</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CircuitCoveringConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::CircuitCoveringConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a65ba1bb90bf8b69684824af54ed34061</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::ConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::ConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a194b7268d38aea43cf720189f2c7d933</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CpModelProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::CpModelProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>aad6b5a46ab5d2233f555b7eaa7f9dc8b</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CpObjectiveProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::CpObjectiveProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>afbd10e0381bdcea8db6a4b8b1ddda5b4</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CpSolverResponse *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::CpSolverResponse &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>abdc2b7a036c638cad9b003b8e2ae38fb</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::CumulativeConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::CumulativeConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a8c7246d8fad339bf133ecf5ce8b70e6f</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::DecisionStrategyProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::DecisionStrategyProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab396a7c48de804df389f1fde37cd4aed</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::DecisionStrategyProto_AffineTransformation *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::DecisionStrategyProto_AffineTransformation &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a8dafed95c6efbf6296753a9a90923388</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::ElementConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::ElementConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a4e0bfccb327b7e1ef475d48d813554ac</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerArgumentProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::IntegerArgumentProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ad1456edebbb93b07e4cb7b231c6d5d1c</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntegerVariableProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::IntegerVariableProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a8e446e46683177ee44ab293e2c35231b</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::IntervalConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::IntervalConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a23fd3de0c47884bbebb25116ece5c2d7</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::InverseConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::InverseConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a6fd2c00fa691e2d0a3ec45cf883dfdf5</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::LinearConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::LinearConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>abe77e6dc60fd9e0d5c696b1b55c2fccd</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::NoOverlap2DConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::NoOverlap2DConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab081583e505c7c4003cc7981f7bd354f</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::NoOverlapConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::NoOverlapConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>aa61f6fa8185bc8617023420148f33045</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::PartialVariableAssignment *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::PartialVariableAssignment &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a9605edce6c8d1b9f2b465ea3cf193e72</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::ReservoirConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::ReservoirConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>adb8db465df82459433570257339128c1</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::RoutesConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::RoutesConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ae061245ac4989a9fa86f211ccf1a94bb</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::TableConstraintProto *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::TableConstraintProto &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab58f5023a24725742e59513c8a5785e2</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a932a088438a4a18cac0d84a50f9cef93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ab7bf2119b197f54b7cfb237d392a3b31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::CpSolverStatus &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a61f6bf84c590e6ff99427d674d30cc9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::sat::SatParameters *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::sat::SatParameters &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a5e3ba24b3733dab6d3aac5a8deec1fc6</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_VariableOrder &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>affaa52e637aa5700a18de9de15d50802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_Polarity &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a7ce45884a30882618460722b3f5b6a63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a865dfb0c8234642d80df4b0f91914a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_BinaryMinizationAlgorithm &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a53653792bc958c9d29044e3ab139254b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_ClauseProtection &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>ad34fd79c2176b0344e2a5a649cfcca5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_ClauseOrdering &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a5f0b29c0076ec4e010aeeb8bdb500a02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_RestartAlgorithm &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>aa75c01445cca67a20648e0162d4d01b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_MaxSatAssumptionOrder &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>afa03ee919b72e3665921728ee15be26d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a86ff4f7acb5908cc179e592e6dae80e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::sat::SatParameters_SearchBranching &gt;</name>
      <anchorfile>namespacegoogle_1_1protobuf.html</anchorfile>
      <anchor>a20bb637648e3cdc283c4e71ce06a3956</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>internal</name>
    <filename>namespaceinternal.html</filename>
    <class kind="struct">internal::ConnectedComponentsTypeHelper</class>
  </compound>
  <compound kind="namespace">
    <name>operations_research</name>
    <filename>namespaceoperations__research.html</filename>
    <namespace>operations_research::or_internal</namespace>
    <namespace>operations_research::sat</namespace>
    <class kind="class">operations_research::AnnotatedGraphBuildManager</class>
    <class kind="class">operations_research::ArcFunctorOrderingByTailAndHead</class>
    <class kind="class">operations_research::ArcIndexOrderingByTailNode</class>
    <class kind="class">operations_research::ArgumentHolder</class>
    <class kind="class">operations_research::ArrayWithOffset</class>
    <class kind="class">operations_research::Assignment</class>
    <class kind="class">operations_research::AssignmentContainer</class>
    <class kind="class">operations_research::AssignmentElement</class>
    <class kind="class">operations_research::BaseIntExpr</class>
    <class kind="class">operations_research::BaseLns</class>
    <class kind="class">operations_research::BaseObject</class>
    <class kind="class">operations_research::BooleanVar</class>
    <class kind="class">operations_research::BronKerboschAlgorithm</class>
    <class kind="class">operations_research::CallMethod0</class>
    <class kind="class">operations_research::CallMethod1</class>
    <class kind="class">operations_research::CallMethod2</class>
    <class kind="class">operations_research::CallMethod3</class>
    <class kind="class">operations_research::CastConstraint</class>
    <class kind="class">operations_research::ChangeValue</class>
    <class kind="class">operations_research::ChristofidesPathSolver</class>
    <class kind="struct">operations_research::ClosedInterval</class>
    <class kind="class">operations_research::ConnectedComponents</class>
    <class kind="class">operations_research::Constraint</class>
    <class kind="class">operations_research::CostValueCycleHandler</class>
    <class kind="class">operations_research::Decision</class>
    <class kind="class">operations_research::DecisionBuilder</class>
    <class kind="class">operations_research::DecisionVisitor</class>
    <class kind="struct">operations_research::DefaultPhaseParameters</class>
    <class kind="class">operations_research::DelayedCallMethod0</class>
    <class kind="class">operations_research::DelayedCallMethod1</class>
    <class kind="class">operations_research::DelayedCallMethod2</class>
    <class kind="class">operations_research::Demon</class>
    <class kind="class">operations_research::DimensionCumulOptimizerCore</class>
    <class kind="class">operations_research::DisjunctiveConstraint</class>
    <class kind="class">operations_research::Domain</class>
    <class kind="class">operations_research::EbertGraph</class>
    <class kind="class">operations_research::EbertGraphBase</class>
    <class kind="class">operations_research::ElementIterator</class>
    <class kind="class">operations_research::ExchangeSubtrip</class>
    <class kind="class">operations_research::FirstSolutionStrategy</class>
    <class kind="class">operations_research::ForwardEbertGraph</class>
    <class kind="class">operations_research::ForwardStaticGraph</class>
    <class kind="class">operations_research::GenericMaxFlow</class>
    <class kind="class">operations_research::GenericMinCostFlow</class>
    <class kind="class">operations_research::GlobalDimensionCumulOptimizer</class>
    <class kind="struct">operations_research::graph_traits</class>
    <class kind="struct">operations_research::graph_traits&lt; ForwardEbertGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</class>
    <class kind="struct">operations_research::graph_traits&lt; ForwardStaticGraph&lt; NodeIndexType, ArcIndexType &gt; &gt;</class>
    <class kind="struct">operations_research::Graphs</class>
    <class kind="struct">operations_research::Graphs&lt; operations_research::StarGraph &gt;</class>
    <class kind="class">operations_research::HamiltonianPathSolver</class>
    <class kind="class">operations_research::IndexPairSwapActiveOperator</class>
    <class kind="class">operations_research::InitAndGetValues</class>
    <class kind="class">operations_research::IntervalVar</class>
    <class kind="class">operations_research::IntervalVarElement</class>
    <class kind="class">operations_research::IntExpr</class>
    <class kind="class">operations_research::IntVar</class>
    <class kind="class">operations_research::IntVarElement</class>
    <class kind="class">operations_research::IntVarIterator</class>
    <class kind="class">operations_research::IntVarLocalSearchFilter</class>
    <class kind="class">operations_research::IntVarLocalSearchHandler</class>
    <class kind="class">operations_research::IntVarLocalSearchOperator</class>
    <class kind="class">operations_research::LatticeMemoryManager</class>
    <class kind="class">operations_research::LightPairRelocateOperator</class>
    <class kind="class">operations_research::LinearExpr</class>
    <class kind="class">operations_research::LinearRange</class>
    <class kind="class">operations_research::LinearSumAssignment</class>
    <class kind="class">operations_research::LocalDimensionCumulOptimizer</class>
    <class kind="class">operations_research::LocalSearchFilter</class>
    <class kind="class">operations_research::LocalSearchFilterManager</class>
    <class kind="class">operations_research::LocalSearchMetaheuristic</class>
    <class kind="class">operations_research::LocalSearchMonitor</class>
    <class kind="class">operations_research::LocalSearchOperator</class>
    <class kind="class">operations_research::MakePairActiveOperator</class>
    <class kind="class">operations_research::MakePairInactiveOperator</class>
    <class kind="class">operations_research::MakeRelocateNeighborsOperator</class>
    <class kind="class">operations_research::MaxFlow</class>
    <class kind="class">operations_research::MaxFlowStatusClass</class>
    <class kind="class">operations_research::MinCostFlow</class>
    <class kind="class">operations_research::MinCostFlowBase</class>
    <class kind="class">operations_research::ModelCache</class>
    <class kind="class">operations_research::ModelParser</class>
    <class kind="class">operations_research::ModelVisitor</class>
    <class kind="class">operations_research::MPConstraintProto</class>
    <class kind="class">operations_research::MPGeneralConstraintProto</class>
    <class kind="class">operations_research::MPIndicatorConstraint</class>
    <class kind="struct">operations_research::MPModelExportOptions</class>
    <class kind="class">operations_research::MPModelProto</class>
    <class kind="class">operations_research::MPModelRequest</class>
    <class kind="class">operations_research::MPSolutionResponse</class>
    <class kind="class">operations_research::MPSolverCommonParameters</class>
    <class kind="class">operations_research::MPVariableProto</class>
    <class kind="class">operations_research::NumericalRev</class>
    <class kind="class">operations_research::NumericalRevArray</class>
    <class kind="class">operations_research::OptimizeVar</class>
    <class kind="class">operations_research::OptionalDouble</class>
    <class kind="class">operations_research::Pack</class>
    <class kind="class">operations_research::PairExchangeOperator</class>
    <class kind="class">operations_research::PairExchangeRelocateOperator</class>
    <class kind="class">operations_research::PairNodeSwapActiveOperator</class>
    <class kind="class">operations_research::PairRelocateOperator</class>
    <class kind="class">operations_research::PartialVariableAssignment</class>
    <class kind="class">operations_research::PathOperator</class>
    <class kind="class">operations_research::PathWithPreviousNodesOperator</class>
    <class kind="class">operations_research::PermutationIndexComparisonByArcHead</class>
    <class kind="class">operations_research::PriorityQueueWithRestrictedPush</class>
    <class kind="class">operations_research::PropagationBaseObject</class>
    <class kind="class">operations_research::PropagationMonitor</class>
    <class kind="class">operations_research::PruningHamiltonianSolver</class>
    <class kind="class">operations_research::RegularLimit</class>
    <class kind="class">operations_research::RelocateExpensiveChain</class>
    <class kind="class">operations_research::RelocateSubtrip</class>
    <class kind="class">operations_research::Rev</class>
    <class kind="class">operations_research::RevArray</class>
    <class kind="class">operations_research::RevBitMatrix</class>
    <class kind="class">operations_research::RevBitSet</class>
    <class kind="class">operations_research::RevGrowingArray</class>
    <class kind="class">operations_research::RevImmutableMultiMap</class>
    <class kind="class">operations_research::RevIntSet</class>
    <class kind="class">operations_research::RevPartialSequence</class>
    <class kind="class">operations_research::RevSwitch</class>
    <class kind="class">operations_research::RoutingModelParameters</class>
    <class kind="class">operations_research::RoutingSearchParameters</class>
    <class kind="class">operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators</class>
    <class kind="class">operations_research::SearchLimit</class>
    <class kind="class">operations_research::SearchLog</class>
    <class kind="class">operations_research::SearchMonitor</class>
    <class kind="class">operations_research::SequenceVar</class>
    <class kind="class">operations_research::SequenceVarElement</class>
    <class kind="class">operations_research::SequenceVarLocalSearchHandler</class>
    <class kind="class">operations_research::SequenceVarLocalSearchOperator</class>
    <class kind="class">operations_research::Set</class>
    <class kind="class">operations_research::SetRangeIterator</class>
    <class kind="class">operations_research::SetRangeWithCardinality</class>
    <class kind="class">operations_research::SimpleMaxFlow</class>
    <class kind="class">operations_research::SimpleMinCostFlow</class>
    <class kind="class">operations_research::SimpleRevFIFO</class>
    <class kind="class">operations_research::SmallRevBitSet</class>
    <class kind="class">operations_research::SolutionCollector</class>
    <class kind="class">operations_research::SolutionPool</class>
    <class kind="class">operations_research::Solver</class>
    <class kind="class">operations_research::SortedDisjointIntervalList</class>
    <class kind="class">operations_research::StarGraphBase</class>
    <class kind="class">operations_research::SwapIndexPairOperator</class>
    <class kind="class">operations_research::SymmetryBreaker</class>
    <class kind="class">operations_research::TailArrayManager</class>
    <class kind="class">operations_research::UnsortedNullableRevBitset</class>
    <class kind="class">operations_research::VarLocalSearchOperator</class>
    <member kind="typedef">
      <type>VarLocalSearchOperator&lt; SequenceVar, std::vector&lt; int &gt;, SequenceVarLocalSearchHandler &gt;</type>
      <name>SequenceVarLocalSearchOperatorTemplate</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad91551404d4eeb115402e25f8ac599b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(int64)&gt;</type>
      <name>RoutingTransitCallback1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a40e66c7b62d7c023af6f08912fdc3f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(int64, int64)&gt;</type>
      <name>RoutingTransitCallback2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae7851f8d6518e3180b9d9f0ec69826e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::vector&lt; int64 &gt;, std::vector&lt; int64 &gt; &gt;</type>
      <name>RoutingIndexPair</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a30af988d402f0f3d36640575ca87153c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RoutingIndexPair &gt;</type>
      <name>RoutingIndexPairs</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a114ea14886b902c9cf9b988c4ef12672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32</type>
      <name>NodeIndex</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a0e629e35bfa311b31dd7f5065eb834bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32</type>
      <name>ArcIndex</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a31d858394c5eed1fa21edc3da47047c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64</type>
      <name>FlowQuantity</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5841ff601ab08548afb15c45b2245de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64</type>
      <name>CostValue</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa7950685633ee869aa9471b2ec5fbcfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EbertGraph&lt; NodeIndex, ArcIndex &gt;</type>
      <name>StarGraph</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae39f15b318a3cba17b1e60e6da51c0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ForwardEbertGraph&lt; NodeIndex, ArcIndex &gt;</type>
      <name>ForwardStarGraph</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a652af62fa5f211aa0c54d7994ca1c504</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ForwardStaticGraph&lt; NodeIndex, ArcIndex &gt;</type>
      <name>ForwardStarStaticGraph</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac7440a08c859325694df19d4d4aee95c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; NodeIndex &gt;</type>
      <name>NodeIndexArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a389e5320fb5bcd0fb99d894488f9820b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; ArcIndex &gt;</type>
      <name>ArcIndexArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa79bf252fa6483cd33cbf95170353fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; FlowQuantity &gt;</type>
      <name>QuantityArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7d4fc0319cb4e28ec175fc9163775a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZVector&lt; CostValue &gt;</type>
      <name>CostArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>afdee62ecefa0520e530c18a55b083e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>PathNodeIndex</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a09767b3634289e432c3ce1d7c649666a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarTypes</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSPECIFIED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dbab4f91414920a046da6b20cd63a2796e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOMAIN_INT_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba035478726d2dcd2fb9ac77afb5c759cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOLEAN_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba79122eee2a14a98d575b0b9ac73b0e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONST_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dbad9de5a1ac157ce63c698777275b17787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ADD_CST</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba0cc8439ff5d71bb0c4c981cd04b73d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_TIMES_CST</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dbaa77c2e49834d223253421d9e3d69c51c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CST_SUB_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba93697c551d06ce8d37be776116f23f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPP_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba9558ccbf57e24d3ddde9bfbf2835e4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRACE_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba93b00759c703fe20d9d8a5a75268a69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CliqueResponse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>af2d89e69d073dc3036a6de24710b416f</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceoperations__research.html" anchor="af2d89e69d073dc3036a6de24710b416fa2f453cfe638e57e27bb0c9512436111e">CONTINUE</enumvalue>
      <enumvalue file="namespaceoperations__research.html" anchor="af2d89e69d073dc3036a6de24710b416fa615a46af313786fc4e349f34118be111">STOP</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BronKerboschAlgorithmStatus</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a708cf34b342e7d2ed89a3b73dbec4eae</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceoperations__research.html" anchor="a708cf34b342e7d2ed89a3b73dbec4eaea8f7afecbc8fbc4cd0f50a57d1172482e">COMPLETED</enumvalue>
      <enumvalue file="namespaceoperations__research.html" anchor="a708cf34b342e7d2ed89a3b73dbec4eaea658f2cadfdf09b6046246e9314f7cd43">INTERRUPTED</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FirstSolutionStrategy_Value</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_UNSET</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362cad02e019c28342793688466400afd032d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_AUTOMATIC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca6c8e1e7a2859125316fe07082a2da868</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_PATH_CHEAPEST_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca4c1d8ec510011789f52267efc7d34bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_PATH_MOST_CONSTRAINED_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362cae133e7145564aa475a81741a6240e901</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_EVALUATOR_STRATEGY</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca6d0f4bf298a2b6e6462feb7035d2c5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_SAVINGS</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca2acc1235ef1e7bec84c9a60b010400b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_SWEEP</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca83fd39655867e51be481faa09fbea164</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_CHRISTOFIDES</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca8a09bb6c57bf531f6674ea171b011791</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_ALL_UNPERFORMED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca0c4ad672038428a0f3b3b7f6c92d8840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_BEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362cad0735ef20259782cea2046f90c39bda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_PARALLEL_CHEAPEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362cabba644bd336acdb33aef7257f5bfa536</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_SEQUENTIAL_CHEAPEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca8580f408e6e4af5373e4dd081d59d767</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_LOCAL_CHEAPEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca348e92318608b985248e17102d016cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_GLOBAL_CHEAPEST_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca9a63d38a1eed11971089af926145f83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_LOCAL_CHEAPEST_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca451e468bc86902552aa9b987f66f5875</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_FIRST_UNBOUND_MIN_VALUE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca9c097f678b4aaaa6b10df89dc4d4802e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_FirstSolutionStrategy_Value_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362ca8cdfd32facff4a66e180fab80f3fb711</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_FirstSolutionStrategy_Value_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab567c87506c164323ce22036cf4c362cae584dc12821c9b7171986c986b6c7462</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LocalSearchMetaheuristic_Value</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_UNSET</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77ab1177884bf5c3fda2cac819cca8279ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_AUTOMATIC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a883a6e25cd8984a9e4e06636823f7201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_GREEDY_DESCENT</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a844fc936bb493f6a5d592b28302ea2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_GUIDED_LOCAL_SEARCH</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a2909a10cd525473780b35aaa3c4f4eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_SIMULATED_ANNEALING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a0d373c31dbec1678db8b9e50ae63327f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_TABU_SEARCH</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a63e13a565cf5daf981c1b565912b3b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_GENERIC_TABU_SEARCH</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a300fe37f649b909a810935825778b77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_LocalSearchMetaheuristic_Value_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a0783003ef2622becdab73be7bfb66e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_LocalSearchMetaheuristic_Value_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a96ad216f076775131996dbfd897ace77a719d13ec837e44b8b25b0f3315346594</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MPSolverCommonParameters_LPAlgorithmValues</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab042145a1da0eaafbe215ded57dfe85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSolverCommonParameters_LPAlgorithmValues_LP_ALGO_UNSPECIFIED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab042145a1da0eaafbe215ded57dfe85fa2218d316cfcac5a88342c95b188f3fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSolverCommonParameters_LPAlgorithmValues_LP_ALGO_DUAL</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab042145a1da0eaafbe215ded57dfe85fa129c4c6d32bf9aed2414939cb02ff99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSolverCommonParameters_LPAlgorithmValues_LP_ALGO_PRIMAL</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab042145a1da0eaafbe215ded57dfe85fa53de34dc95fb67212e335f19dc210516</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSolverCommonParameters_LPAlgorithmValues_LP_ALGO_BARRIER</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab042145a1da0eaafbe215ded57dfe85fa89ff8ffa01928d5993a1414705eecd15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MPModelRequest_SolverType</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_GLOP_LINEAR_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a6fab373696058c6e9f279de4a8446411</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_CLP_LINEAR_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a0969851c637668f95c10ddb1ade866a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_GLPK_LINEAR_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5aa32d84461e16e800e3f996d6347a304d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_GUROBI_LINEAR_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a3af34f198d539e787263f9eded0ce0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_CPLEX_LINEAR_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a4bdeae4b1af8d2cd4aab225db4fc0407</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_SCIP_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5ac25c4844cbdf1e4d7c7efc11f1f8ebf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_GLPK_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5af60a0830addaf4cf00bc59459fa6647e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_CBC_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a0e93bcd472e7a9296ff02058ed60f8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_GUROBI_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5ac8beb7f7b026823a6bc2e4e87f546da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_CPLEX_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a26762918189367f5e171d0e226084d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_BOP_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5a67639f2cd42e1197b5ad69a004c93ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_SAT_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5ac0fedb2082db5e7c96da01b4149c318e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPModelRequest_SolverType_KNAPSACK_MIXED_INTEGER_PROGRAMMING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a66408fd9c4c05711631d208dce3118f5abe010aed8c1b29c5a0fd9ac262ce791f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MPSolverResponseStatus</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_OPTIMAL</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56ac95cb5be9e36b31647dd28910ac6cae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_FEASIBLE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56ac7d90afd0518be8cd6433ecad656a83b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_INFEASIBLE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56a0da2dbf49d011970a770d42141819d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_UNBOUNDED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56ad73de4a0f9908a4c0d11246ecccf32b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_ABNORMAL</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56ac77789af50586fb2f81915dd1cb790b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_NOT_SOLVED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56a667b6a5ed42c91ea81fa67c59cb3badb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_MODEL_IS_VALID</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56a97ee5aaa7f57f286d4a821dd6e57523f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_UNKNOWN_STATUS</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56a84ea2a63b24de389aac6aa33b1203cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_MODEL_INVALID</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56a6ae83516a798f1675e1b4daf0d8ea6b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_MODEL_INVALID_SOLUTION_HINT</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56a0f9da70b2f2b1304313c3a2a5f4876b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_MODEL_INVALID_SOLVER_PARAMETERS</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56ab90169f8480eca12c963af5ce50d36aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPSOLVER_SOLVER_TYPE_UNAVAILABLE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a51d0df17eb5fb24fcdd0a134178cde56afa008125099beaab382c42682be6bbf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a316abccdfa41512564d84365ea8f0ead</anchor>
      <arglist>(std::ostream &amp;out, const Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Zero</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a009f247167f32509baf749083e4bc984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>One</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa96bb5a28dd9c1ccc864b1587e8e1a98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a991f7a823d83b455d6b1a45141cb9ce9</anchor>
      <arglist>(std::ostream &amp;out, const BaseObject *o)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4f44b10aa7fc7b6e85b72e7f0c96cc1f</anchor>
      <arglist>(std::ostream &amp;out, const Assignment &amp;assignment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAssignmentFromAssignment</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aea2bf322fab4e2319a23ad22acf8ccf8</anchor>
      <arglist>(Assignment *target_assignment, const std::vector&lt; IntVar * &gt; &amp;target_vars, const Assignment *source_assignment, const std::vector&lt; IntVar * &gt; &amp;source_vars)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a64cf3e1336ec61275bdd2ae853d38406</anchor>
      <arglist>(uint64 value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab89995e46facfc1db291ce75658dd0a5</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>acfc54730764156f1fb717e99b71ba5d4</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a65a9c1ccf298ae110decc3b9d285dc16</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3ca754fad158b92d7f678b5d354d8927</anchor>
      <arglist>(void *const ptr)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aec42cb0a7c3079eb8f0406914077d633</anchor>
      <arglist>(const std::vector&lt; T * &gt; &amp;ptrs)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac2ba31780fce352d4bba600e6e8eacad</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;ptrs)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeLocalSearchOperator</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a85ea0ef5b46465c3793333ce9821f15f</anchor>
      <arglist>(Solver *solver, const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArrayConstant</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a12527c82ffc8b31c5d8dc836c366d624</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArrayBoolean</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3f4525e71a6b05d97c868f0832750a60</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllOnes</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae3e4f71c4c79e0b4ec00c4e715a7c298</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllNull</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab0ae787392a8dd8a499eb55ac0916aa4</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllGreaterOrEqual</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3aea406979285a28c91fd1ee8115af74</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllLessOrEqual</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a15f08cfbb35e2b8b1eb76f79caea924a</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllPositive</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab62b402f767cda48eb67ef8b50397f8f</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllNegative</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a38972723946490ea4df4e34298d8805d</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllStrictlyPositive</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3de09f9134b976e5ba64751ac0f4440b</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllStrictlyNegative</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a8351829c324863ddda52e201df4f9f84</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncreasingContiguous</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aafac7375c23337f25821aa6f86ca627c</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncreasing</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3d434774c07815a25ffaa7adb343c19e</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArrayInRange</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>adf2aea6c68fe502389c9264b971b2f85</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, T range_min, T range_max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBound</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae4c7a8bfc6877606e512d3279549f44d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBooleans</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7abde7313cef64d25202a18f07481fc3</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBoundOrNull</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a54470bffc3ea32cc37d0222e5dbb62a6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBoundTo</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7028ce8b481be8cb6fca7a6925d41aa7</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>MaxVarArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abc42d1bcfe023d3ac6f59471b75d853c</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>MinVarArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5c1932027ef8bc1689d725a1c597867b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillValues</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a6662a100d8715747870beb9721bb304b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, std::vector&lt; int64 &gt; *const values)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PosIntDivUp</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a60dabfa452b4264887ef76c75edf3765</anchor>
      <arglist>(int64 e, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PosIntDivDown</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a942ba2898a44303790c91e761b8f4630</anchor>
      <arglist>(int64 e, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int64 &gt;</type>
      <name>ToInt64Vector</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aad4e1b406f0e56c83283747b038df88a</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters</type>
      <name>BuildModelParametersFromFlags</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae39a6c4d8ba890ec5150ea91a7aad643</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters</type>
      <name>BuildSearchParametersFromFlags</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a95da1d3a46432afd40024f79279a48b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>*RoutingModel</type>
      <name>model</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a2f03e5ed2f65164d62fc5f039441596d</anchor>
      <arglist>(manager)</arglist>
    </member>
    <member kind="function">
      <type>use manager</type>
      <name>NodeToIndex</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a891fd91407acbbeb1c47d22be7991b3f</anchor>
      <arglist>(node)&apos; whenever &apos;model&apos; requires a variable *index. */class RoutingIndexManager</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters</type>
      <name>DefaultRoutingModelParameters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa388c8707db255ae7742c04046bdd613</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters</type>
      <name>DefaultRoutingSearchParameters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>adcac4a11f1e4d36ceb47f7251461487d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>FindErrorInRoutingSearchParameters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae2e060e8ee4ea901dc4df260b3385eac</anchor>
      <arglist>(const RoutingSearchParameters &amp;search_parameters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a8fee47a5359613bc7f8df356595c7ff0</anchor>
      <arglist>(RoutingNodeIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>afa9196adb7aa76d8e60cd4c0c6687c0d</anchor>
      <arglist>(RoutingCostClassIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3d98b6fb94b9cdabfaca3d9f3c9632e9</anchor>
      <arglist>(RoutingDimensionIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a1edd1d7c020633019991b13d14b4b15b</anchor>
      <arglist>(RoutingDisjunctionIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aff19b78b3d56ff95c23727ca4ff64ea7</anchor>
      <arglist>(RoutingVehicleClassIndex, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindCliques</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a509097448ff5705cf3e64d889362bdec</anchor>
      <arglist>(std::function&lt; bool(int, int)&gt; graph, int node_count, std::function&lt; bool(const std::vector&lt; int &gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CoverArcsByCliques</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>afe4b5a6c0e4019314f288e3f4307c114</anchor>
      <arglist>(std::function&lt; bool(int, int)&gt; graph, int node_count, std::function&lt; bool(const std::vector&lt; int &gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildLineGraph</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>acb53c505b8fd29ceb3abdcc7dfd809ce</anchor>
      <arglist>(const GraphType &amp;graph, GraphType *const line_graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEulerianGraph</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab1cf773de0cae72d0c44efe5b8f4bb89</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSemiEulerianGraph</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a6b312dd19c90b2af099e6f159869f7ee</anchor>
      <arglist>(const Graph &amp;graph, std::vector&lt; NodeIndex &gt; *odd_nodes)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; NodeIndex &gt;</type>
      <name>BuildEulerianPathFromNode</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a743d8c9d6f64531bdeb7bbf18023e9d4</anchor>
      <arglist>(const Graph &amp;graph, NodeIndex root)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; NodeIndex &gt;</type>
      <name>BuildEulerianTourFromNode</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa63055860fc53f8eed56d23d2571c180</anchor>
      <arglist>(const Graph &amp;graph, NodeIndex root)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; typename Graph::NodeIndex &gt;</type>
      <name>BuildEulerianTour</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a034666fe63ca105b735272974006362a</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; typename Graph::NodeIndex &gt;</type>
      <name>BuildEulerianPath</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a49b170b2d03863c465331e67b21f0c33</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>HamiltonianPathSolver&lt; CostType, CostFunction &gt;</type>
      <name>MakeHamiltonianPathSolver</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a715b0dbb9f0903ab629b8c6da1b35b45</anchor>
      <arglist>(int num_nodes, CostFunction cost)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; typename Graph::ArcIndex &gt;</type>
      <name>BuildKruskalMinimumSpanningTreeFromSortedArcs</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a00ab79ee21ffd8dece0996e37f9faa7a</anchor>
      <arglist>(const Graph &amp;graph, const std::vector&lt; typename Graph::ArcIndex &gt; &amp;sorted_arcs)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; typename Graph::ArcIndex &gt;</type>
      <name>BuildKruskalMinimumSpanningTree</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa565a47a059ef32ef1aec39768e4ec98</anchor>
      <arglist>(const Graph &amp;graph, const ArcComparator &amp;arc_comparator)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; typename Graph::ArcIndex &gt;</type>
      <name>BuildPrimMinimumSpanningTree</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a33a2f4c26fd60cd0fa98257b571c974f</anchor>
      <arglist>(const Graph &amp;graph, const ArcValue &amp;arc_value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DijkstraShortestPath</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a53e6a83fcbd689abf5b3078b0236f9f1</anchor>
      <arglist>(int node_count, int start_node, int end_node, std::function&lt; int64(int, int)&gt; graph, int64 disconnected_distance, std::vector&lt; int &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StableDijkstraShortestPath</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad56bae19a2298c3163af96ca7f8b89b1</anchor>
      <arglist>(int node_count, int start_node, int end_node, std::function&lt; int64(int, int)&gt; graph, int64 disconnected_distance, std::vector&lt; int &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BellmanFordShortestPath</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad5bfec6ea714171fbff2d8b791d0d286</anchor>
      <arglist>(int node_count, int start_node, int end_node, std::function&lt; int64(int, int)&gt; graph, int64 disconnected_distance, std::vector&lt; int &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AStarShortestPath</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>acff272be25bcf9641218c05c59ec1a4e</anchor>
      <arglist>(int node_count, int start_node, int end_node, std::function&lt; int64(int, int)&gt; graph, std::function&lt; int64(int)&gt; heuristic, int64 disconnected_distance, std::vector&lt; int &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr</type>
      <name>operator+</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a97f9b83239285f5fdfcac1b8e8b4f162</anchor>
      <arglist>(LinearExpr lhs, const LinearExpr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr</type>
      <name>operator-</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a515cdaf4f9c4000bb3482a0c450e23c3</anchor>
      <arglist>(LinearExpr lhs, const LinearExpr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr</type>
      <name>operator *</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a741104fe08089fe3520676487f7a685d</anchor>
      <arglist>(LinearExpr lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr</type>
      <name>operator/</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abebdd7f40e90df8dc7d557b6e26da942</anchor>
      <arglist>(LinearExpr lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearExpr</type>
      <name>operator *</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a99590470c6ad2d59331b6fcc56609877</anchor>
      <arglist>(double lhs, LinearExpr rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearRange</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a6d1fa20f9c9faf7027c0b16f97139e80</anchor>
      <arglist>(const LinearExpr &amp;lhs, const LinearExpr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearRange</type>
      <name>operator==</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a08146f196bd9c3f492ee108732449ced</anchor>
      <arglist>(const LinearExpr &amp;lhs, const LinearExpr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearRange</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac4052f92af6a7fbb1d45e17befcb68e0</anchor>
      <arglist>(const LinearExpr &amp;lhs, const LinearExpr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>util::StatusOr&lt; std::string &gt;</type>
      <name>ExportModelAsLpFormat</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a689d3552f87e89456c0c9a43847c964a</anchor>
      <arglist>(const MPModelProto &amp;model, const MPModelExportOptions &amp;options=MPModelExportOptions())</arglist>
    </member>
    <member kind="function">
      <type>util::StatusOr&lt; std::string &gt;</type>
      <name>ExportModelAsMpsFormat</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef684073daca7460490db8d881f886e0</anchor>
      <arglist>(const MPModelProto &amp;model, const MPModelExportOptions &amp;options=MPModelExportOptions())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ExportModelAsLpFormatReturnString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4d319c19b685fe608fe013b573081351</anchor>
      <arglist>(const MPModelProto &amp;input_model, const MPModelExportOptions &amp;options=MPModelExportOptions())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ExportModelAsMpsFormatReturnString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a37abd61c0d982af79257814b6d3a733e</anchor>
      <arglist>(const MPModelProto &amp;input_model, const MPModelExportOptions &amp;options=MPModelExportOptions())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>FindErrorInMPModelProto</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7a27bb74d09b7ba6ea0e97bb572d2755</anchor>
      <arglist>(const MPModelProto &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>FindFeasibilityErrorInSolutionHint</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae4ee4d82cf625670cdc1f52197454654</anchor>
      <arglist>(const MPModelProto &amp;model, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5c341d9214d5d46014089435ba0e26d3</anchor>
      <arglist>(std::ostream &amp;out, const ClosedInterval &amp;interval)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aaa301d39d2a9271daf8c65e779635335</anchor>
      <arglist>(std::ostream &amp;out, const std::vector&lt; ClosedInterval &gt; &amp;intervals)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IntervalsAreSortedAndNonAdjacent</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab8c23924c4b61ed5c531424a6f18bde1</anchor>
      <arglist>(absl::Span&lt; const ClosedInterval &gt; intervals)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abebf3070a940da6bf678953a66584e76</anchor>
      <arglist>(std::ostream &amp;out, const Domain &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FirstSolutionStrategy_Value_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac8fb428ce4826abddd79ff391cfc1c51</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>FirstSolutionStrategy_Value_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3c3c2af7d77d5e7f76f9a3d8fb1edf0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>FirstSolutionStrategy_Value_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aaed24a4c7f867bbe1173faf422387c57</anchor>
      <arglist>(FirstSolutionStrategy_Value value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FirstSolutionStrategy_Value_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad1acf7e4aff76fb0cc1659d91bdb5a62</anchor>
      <arglist>(const ::std::string &amp;name, FirstSolutionStrategy_Value *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LocalSearchMetaheuristic_Value_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aed46fa1bbfbc75c04bd66f5055ddb3c1</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>LocalSearchMetaheuristic_Value_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5142d10acce3d076acf89506752dba5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>LocalSearchMetaheuristic_Value_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ade04d594c17cc2436976da614fa0a2f7</anchor>
      <arglist>(LocalSearchMetaheuristic_Value value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LocalSearchMetaheuristic_Value_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a8e7c14051a98f40a1782646965401ca7</anchor>
      <arglist>(const ::std::string &amp;name, LocalSearchMetaheuristic_Value *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab3ee5c7a9f799696432b082fd4835232</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a976efc8cb83ba6997aa984b3c106da17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a317f48b6b35697bf02ead22157c91c52</anchor>
      <arglist>(MPSolverCommonParameters_LPAlgorithmValues value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac2b888d39ca1974f8485911aa6434144</anchor>
      <arglist>(const ::std::string &amp;name, MPSolverCommonParameters_LPAlgorithmValues *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MPModelRequest_SolverType_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad26c438ab5f1b232d7eced80a2780ca0</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>MPModelRequest_SolverType_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa3fea38c7df3ab9583e34b82878e255c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>MPModelRequest_SolverType_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad1d017a27f2b89bb55910d1fceb31c64</anchor>
      <arglist>(MPModelRequest_SolverType value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MPModelRequest_SolverType_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a028ee3de18b0c41c98df4de7f38c3543</anchor>
      <arglist>(const ::std::string &amp;name, MPModelRequest_SolverType *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MPSolverResponseStatus_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7a295b0760db498bc4fa9479bb8c2329</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>MPSolverResponseStatus_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a472faf18ff58cd6640b7b3bf6336d9b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>MPSolverResponseStatus_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a1225873debe2bc2cb173d365f06ca615</anchor>
      <arglist>(MPSolverResponseStatus value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MPSolverResponseStatus_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a415f14aa6c054ed47d050bd15e725f52</anchor>
      <arglist>(const ::std::string &amp;name, MPSolverResponseStatus *value)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3ea6af6581e6922832918c97753146a7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a0953b50b08320d1109c678555137f1db</anchor>
      <arglist>(P param)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3c2f93547af434566184b7dee7039c93</anchor>
      <arglist>(P *param)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4fb750da00c784e5ffd1763fd3ce88f7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4da629cafe75f958924e1684ac2b0eff</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon3</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abdca98f14c02e004ab5e19d2c3985667</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q, R), const std::string &amp;name, P param1, Q param2, R param3)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a82110ba1f45aa29ffc933102880dbd82</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a11f4a7dbafd8e00a36b892a82e44445f</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a29b8113bf656aa61493c9459508ed953</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>starts_ends</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a144750b8ec3f03decd898cc08c6b2894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>**</type>
      <name>Then</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad86181cc5dff70e9ce3bfa1f8393cb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FirstSolutionStrategyDefaultTypeInternal</type>
      <name>_FirstSolutionStrategy_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a88484804c6e66958d00fb3f1b0821b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LocalSearchMetaheuristicDefaultTypeInternal</type>
      <name>_LocalSearchMetaheuristic_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5e179c1aa71c3f208d4dfbd8a27bfdc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FirstSolutionStrategy_Value</type>
      <name>FirstSolutionStrategy_Value_Value_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a9aec91f2a6b9e10f98ded28a1df2925b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FirstSolutionStrategy_Value</type>
      <name>FirstSolutionStrategy_Value_Value_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a999203a7a00dc983c437624201cdbce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>FirstSolutionStrategy_Value_Value_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a9e8e1305d7b00c52172281a44baad6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LocalSearchMetaheuristic_Value</type>
      <name>LocalSearchMetaheuristic_Value_Value_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3713cc7fe59ec4df14e26ac0310cf0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LocalSearchMetaheuristic_Value</type>
      <name>LocalSearchMetaheuristic_Value_Value_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a86aef277165b7aacec371daebe466690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>LocalSearchMetaheuristic_Value_Value_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4fd8517c34ce555a83981c8cc3a00d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingModelParametersDefaultTypeInternal</type>
      <name>_RoutingModelParameters_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae3a853384e4e580582b670a57018029d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingSearchParametersDefaultTypeInternal</type>
      <name>_RoutingSearchParameters_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a601e1a7c230fbf44503db528b20e30ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperatorsDefaultTypeInternal</type>
      <name>_RoutingSearchParameters_LocalSearchNeighborhoodOperators_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a595bafdd2ca0348c23f2c03da8ef2468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPConstraintProtoDefaultTypeInternal</type>
      <name>_MPConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a11d06964c51cd718a2a5c620c3289f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPGeneralConstraintProtoDefaultTypeInternal</type>
      <name>_MPGeneralConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab18f88184af1e6b0197a98cf0485803f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPIndicatorConstraintDefaultTypeInternal</type>
      <name>_MPIndicatorConstraint_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a1fa4d06ad0beb392a3144747d83fcc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPModelProtoDefaultTypeInternal</type>
      <name>_MPModelProto_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa214723b84fc52d727efc5067df690e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPModelRequestDefaultTypeInternal</type>
      <name>_MPModelRequest_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5557bc052354d9b956a609d0698281d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPSolutionResponseDefaultTypeInternal</type>
      <name>_MPSolutionResponse_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a9c99a96a8b2fcf4ab6890a4717c92da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPSolverCommonParametersDefaultTypeInternal</type>
      <name>_MPSolverCommonParameters_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7ece0f2b42b6eaf443223377343e1966</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPVariableProtoDefaultTypeInternal</type>
      <name>_MPVariableProto_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>af3dce953fd737d51dcb003b93452b3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OptionalDoubleDefaultTypeInternal</type>
      <name>_OptionalDouble_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5fd6483b24c303a0fbf9ab49846d370c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PartialVariableAssignmentDefaultTypeInternal</type>
      <name>_PartialVariableAssignment_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac92dae0b80b47779fc1de1bf9e7df9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MPSolverCommonParameters_LPAlgorithmValues</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_LPAlgorithmValues_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a1e4803399c53b73b9ae985751803d01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MPSolverCommonParameters_LPAlgorithmValues</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_LPAlgorithmValues_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a35686dabc230ba01c79fb8fd0f457e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MPSolverCommonParameters_LPAlgorithmValues_LPAlgorithmValues_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5dc5431b0bd4640975c7f6502e8013d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MPModelRequest_SolverType</type>
      <name>MPModelRequest_SolverType_SolverType_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a33e0cbbffcf3c459144e44b3f00dc2bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MPModelRequest_SolverType</type>
      <name>MPModelRequest_SolverType_SolverType_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a955948242965463248545e1785583654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MPModelRequest_SolverType_SolverType_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae6eb74cbdb5037acc1fb265d11616274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MPSolverResponseStatus</type>
      <name>MPSolverResponseStatus_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aaf5325d95fb273624f43bf2741836834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MPSolverResponseStatus</type>
      <name>MPSolverResponseStatus_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a92f022bd33162332383c5f70e4821498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MPSolverResponseStatus_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a04af4e3a977e967ddd2f2db792ac2ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3ea6af6581e6922832918c97753146a7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a0953b50b08320d1109c678555137f1db</anchor>
      <arglist>(P param)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3c2f93547af434566184b7dee7039c93</anchor>
      <arglist>(P *param)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4fb750da00c784e5ffd1763fd3ce88f7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4da629cafe75f958924e1684ac2b0eff</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon3</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abdca98f14c02e004ab5e19d2c3985667</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q, R), const std::string &amp;name, P param1, Q param2, R param3)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a82110ba1f45aa29ffc933102880dbd82</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a11f4a7dbafd8e00a36b892a82e44445f</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a29b8113bf656aa61493c9459508ed953</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>operations_research::or_internal</name>
    <filename>namespaceoperations__research_1_1or__internal.html</filename>
    <class kind="class">operations_research::or_internal::GraphBuilderFromArcs</class>
    <class kind="class">operations_research::or_internal::GraphBuilderFromArcs&lt; GraphType, true &gt;</class>
    <class kind="struct">operations_research::or_internal::TailArrayBuilder</class>
    <class kind="struct">operations_research::or_internal::TailArrayBuilder&lt; GraphType, false &gt;</class>
    <class kind="struct">operations_research::or_internal::TailArrayReleaser</class>
    <class kind="struct">operations_research::or_internal::TailArrayReleaser&lt; GraphType, false &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>operations_research::sat</name>
    <filename>namespaceoperations__research_1_1sat.html</filename>
    <class kind="class">operations_research::sat::AllDifferentConstraintProto</class>
    <class kind="class">operations_research::sat::AutomatonConstraint</class>
    <class kind="class">operations_research::sat::AutomatonConstraintProto</class>
    <class kind="class">operations_research::sat::BoolArgumentProto</class>
    <class kind="class">operations_research::sat::BoolVar</class>
    <class kind="class">operations_research::sat::CircuitConstraint</class>
    <class kind="class">operations_research::sat::CircuitConstraintProto</class>
    <class kind="class">operations_research::sat::CircuitCoveringConstraintProto</class>
    <class kind="class">operations_research::sat::Constraint</class>
    <class kind="class">operations_research::sat::ConstraintProto</class>
    <class kind="class">operations_research::sat::CpModelBuilder</class>
    <class kind="class">operations_research::sat::CpModelProto</class>
    <class kind="class">operations_research::sat::CpObjectiveProto</class>
    <class kind="class">operations_research::sat::CpSolverResponse</class>
    <class kind="class">operations_research::sat::CumulativeConstraint</class>
    <class kind="class">operations_research::sat::CumulativeConstraintProto</class>
    <class kind="class">operations_research::sat::DecisionStrategyProto</class>
    <class kind="class">operations_research::sat::DecisionStrategyProto_AffineTransformation</class>
    <class kind="class">operations_research::sat::ElementConstraintProto</class>
    <class kind="class">operations_research::sat::IntegerArgumentProto</class>
    <class kind="class">operations_research::sat::IntegerVariableProto</class>
    <class kind="class">operations_research::sat::IntervalConstraintProto</class>
    <class kind="class">operations_research::sat::IntervalVar</class>
    <class kind="class">operations_research::sat::IntVar</class>
    <class kind="class">operations_research::sat::InverseConstraintProto</class>
    <class kind="class">operations_research::sat::LinearConstraintProto</class>
    <class kind="class">operations_research::sat::LinearExpr</class>
    <class kind="class">operations_research::sat::Model</class>
    <class kind="class">operations_research::sat::NoOverlap2DConstraint</class>
    <class kind="class">operations_research::sat::NoOverlap2DConstraintProto</class>
    <class kind="class">operations_research::sat::NoOverlapConstraintProto</class>
    <class kind="class">operations_research::sat::PartialVariableAssignment</class>
    <class kind="class">operations_research::sat::ReservoirConstraint</class>
    <class kind="class">operations_research::sat::ReservoirConstraintProto</class>
    <class kind="class">operations_research::sat::RoutesConstraintProto</class>
    <class kind="class">operations_research::sat::SatParameters</class>
    <class kind="class">operations_research::sat::TableConstraint</class>
    <class kind="class">operations_research::sat::TableConstraintProto</class>
    <member kind="enumeration">
      <type></type>
      <name>DecisionStrategyProto_VariableSelectionStrategy</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_FIRST</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148ea5e00b7cd6b433ec6a15ff913d3b2c3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_LOWEST_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148ea0b1d456b36749d677aa4a201b22ba114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_HIGHEST_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148ea79fc0af04ed454750ecb59dc5a748e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_MIN_DOMAIN_SIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148ea18e573e60bf8dde6880a6cfb9f697ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_MAX_DOMAIN_SIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148ea9bc8cd090f555c04c4fb8ec23838dc30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_DecisionStrategyProto_VariableSelectionStrategy_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148ea77405cd855df69ed653be2766be0a1af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_VariableSelectionStrategy_DecisionStrategyProto_VariableSelectionStrategy_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10a32f85785b62ba65343391e575148eadecec94c9d1599ecbdfdab2f7cfcb7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DecisionStrategyProto_DomainReductionStrategy</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_DomainReductionStrategy_SELECT_MIN_VALUE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4a2f416e6e94f971bfbb75ba25e7f7b760</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_DomainReductionStrategy_SELECT_MAX_VALUE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4ac22896facd05595ce84133b3b3043685</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_DomainReductionStrategy_SELECT_LOWER_HALF</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4ab63e61aebddafddd1496d6ab577dab53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_DomainReductionStrategy_SELECT_UPPER_HALF</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4ac41d0ba8114af7179c253fda16e517ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_DomainReductionStrategy_DecisionStrategyProto_DomainReductionStrategy_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4a82875a7d185a8f87d56cb0fb0f37f72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecisionStrategyProto_DomainReductionStrategy_DecisionStrategyProto_DomainReductionStrategy_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adb7c9ce3ef722957ff56d0875e802fb4ac1c76a18c1405c9569b8afca29919e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CpSolverStatus</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12a693e3d1636a488a456c173453c45cc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODEL_INVALID</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12acb3300bde58b85d202f9c211dfabcb49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12ae4d551fa942cba479e3090bb8ae40e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12a185c2992ead7a0d90d260164cf10d46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12a78e9c6b9f6ac60a9e9c2d25967ed1ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CpSolverStatus_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12a443f059ef1efc767e19c5724f6c161d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CpSolverStatus_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2392f4581af743a0af577069f99fed12ae535ad44840a077b35974e3a04530717</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_VariableOrder</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a7500a48ce324f0ef41f39e45f60f214d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_VariableOrder_IN_ORDER</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a7500a48ce324f0ef41f39e45f60f214da92760d7186df85dfd6c188eae0b9b591</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_VariableOrder_IN_REVERSE_ORDER</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a7500a48ce324f0ef41f39e45f60f214da941215af97625c63a144520ec7e02bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_VariableOrder_IN_RANDOM_ORDER</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a7500a48ce324f0ef41f39e45f60f214da8de6cbc54e325b78d800c8354591d726</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_Polarity</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>add5353b524feae6119c2a8220f1ca3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_Polarity_POLARITY_TRUE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>add5353b524feae6119c2a8220f1ca3d2a6145ecb76ca29dc07b9acde97866a8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_Polarity_POLARITY_FALSE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>add5353b524feae6119c2a8220f1ca3d2a204c91561099609cdf7b6469e84e9576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_Polarity_POLARITY_RANDOM</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>add5353b524feae6119c2a8220f1ca3d2afaf662755a533bc2353968b4c4da4d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_Polarity_POLARITY_WEIGHTED_SIGN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>add5353b524feae6119c2a8220f1ca3d2af9a6fbf18fc3445083ca746b1e920ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_Polarity_POLARITY_REVERSE_WEIGHTED_SIGN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>add5353b524feae6119c2a8220f1ca3d2a77094f18176663ceea0b80667cf917a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_ConflictMinimizationAlgorithm</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8ab616f5071426513fb5d7dd88f2b23b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ConflictMinimizationAlgorithm_NONE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8ab616f5071426513fb5d7dd88f2b23bae1bd62c48ad8f9a7d242ae916bbe5066</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ConflictMinimizationAlgorithm_SIMPLE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8ab616f5071426513fb5d7dd88f2b23bac1adcdd93b988565644ddc9c3510c96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ConflictMinimizationAlgorithm_RECURSIVE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8ab616f5071426513fb5d7dd88f2b23bacf7f9f878c3e92e4e319c3e4ea926af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ConflictMinimizationAlgorithm_EXPERIMENTAL</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8ab616f5071426513fb5d7dd88f2b23ba52b205df52309c4f050206500297e4e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_BinaryMinizationAlgorithm</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af925d9b6f4730729d935c3fad014c4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_BinaryMinizationAlgorithm_NO_BINARY_MINIMIZATION</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af925d9b6f4730729d935c3fad014c4ffa5cefb853f31166cc3684d90594d5dde9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_BinaryMinizationAlgorithm_BINARY_MINIMIZATION_FIRST</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af925d9b6f4730729d935c3fad014c4ffacefb9cb334d97dc99896de7db79a2476</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_BinaryMinizationAlgorithm_BINARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_REDUCTION</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af925d9b6f4730729d935c3fad014c4ffac586955ded9c943dee2faf8b5b738dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_BinaryMinizationAlgorithm_BINARY_MINIMIZATION_WITH_REACHABILITY</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af925d9b6f4730729d935c3fad014c4ffa30c30629b82fa4252c40e28942e35416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_BinaryMinizationAlgorithm_EXPERIMENTAL_BINARY_MINIMIZATION</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af925d9b6f4730729d935c3fad014c4ffaeb6a38e1f5f44d7f13c6f8d6325ba069</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_ClauseProtection</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad24109146a44723f1c95b7d3f226fcc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ClauseProtection_PROTECTION_NONE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad24109146a44723f1c95b7d3f226fcc1a1739f0f3322dc59ebaa2fb9fa3481d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ClauseProtection_PROTECTION_ALWAYS</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad24109146a44723f1c95b7d3f226fcc1aa7de36c91e9668bd4d3429170a3a915a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ClauseProtection_PROTECTION_LBD</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad24109146a44723f1c95b7d3f226fcc1a4ce148354b01f5b1e2da32e7576edaa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_ClauseOrdering</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a31ad84fa962b626887890dd76a53c74a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ClauseOrdering_CLAUSE_ACTIVITY</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a31ad84fa962b626887890dd76a53c74aaaab0bb6b57e109185e6a62d5d0271a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_ClauseOrdering_CLAUSE_LBD</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a31ad84fa962b626887890dd76a53c74aa2dcf758b7ee7431577e2aa80a60b163e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_RestartAlgorithm</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a192662f710ae6cff2e00eff50ce55ac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_RestartAlgorithm_NO_RESTART</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a192662f710ae6cff2e00eff50ce55ac3a698c5900a88697e89f1a9ffa790fd49f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_RestartAlgorithm_LUBY_RESTART</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a192662f710ae6cff2e00eff50ce55ac3a0fcf1821b877dd61f6cfac37a36a82d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_RestartAlgorithm_DL_MOVING_AVERAGE_RESTART</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a192662f710ae6cff2e00eff50ce55ac3a89e7ee47fc5c826c03f455f082f22c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_RestartAlgorithm_LBD_MOVING_AVERAGE_RESTART</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a192662f710ae6cff2e00eff50ce55ac3a5d2302ed4086b87cadaad18aa5981aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_RestartAlgorithm_FIXED_RESTART</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a192662f710ae6cff2e00eff50ce55ac3a353691b5a40f70fe5d05cc01bdf22536</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_MaxSatAssumptionOrder</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a683a06394b218203a4517b19468df400</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_MaxSatAssumptionOrder_DEFAULT_ASSUMPTION_ORDER</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a683a06394b218203a4517b19468df400ab0500c1196441cd7820da82c2c1baf6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_MaxSatAssumptionOrder_ORDER_ASSUMPTION_BY_DEPTH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a683a06394b218203a4517b19468df400a61bc7845a56fecefcc18795a536d5eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_MaxSatAssumptionOrder_ORDER_ASSUMPTION_BY_WEIGHT</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a683a06394b218203a4517b19468df400a44da070df5c6e2443fa1c00b6c25893f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_MaxSatStratificationAlgorithm</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab342c0ecaab53f1e8e6cf05ca513b8d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_MaxSatStratificationAlgorithm_STRATIFICATION_NONE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab342c0ecaab53f1e8e6cf05ca513b8d5a5bb7f0a112c4672ea2abec407f7d384c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_MaxSatStratificationAlgorithm_STRATIFICATION_DESCENT</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab342c0ecaab53f1e8e6cf05ca513b8d5a0c67cde78d6314de8d13734d65709b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_MaxSatStratificationAlgorithm_STRATIFICATION_ASCENT</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab342c0ecaab53f1e8e6cf05ca513b8d5adf547628eb3421e641512aeb95b31912</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SatParameters_SearchBranching</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_SearchBranching_AUTOMATIC_SEARCH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4bac23498a3951b707b682de68c3f2ef4ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_SearchBranching_FIXED_SEARCH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4ba4b402cda1dee9234ecc9bf3f969dae9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_SearchBranching_PORTFOLIO_SEARCH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4ba79d67aaf6b62f71bbddd9c5177ebedc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_SearchBranching_LP_SEARCH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4bac0ee72ff494861f949253aac50496f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_SearchBranching_PSEUDO_COST_SEARCH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4ba0959d8f131e2610b97a8830464b2c633</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SatParameters_SearchBranching_PORTFOLIO_WITH_QUICK_RESTART_SEARCH</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad9191a142de9cc0cca4248601387cb4ba28a2409f7a5ca2ecd6635da22e4e6667</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9c0ae0d048a431656985fc79428bbe67</anchor>
      <arglist>(std::ostream &amp;os, const BoolVar &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>BoolVar</type>
      <name>Not</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a5e3de118c1f8dd5a7ec21704e05684b9</anchor>
      <arglist>(BoolVar x)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a57b8aabbc5b3c1d177d35b3ebcf9b5fa</anchor>
      <arglist>(std::ostream &amp;os, const IntVar &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ae9f86b31794751c624a783d15306280c</anchor>
      <arglist>(std::ostream &amp;os, const IntervalVar &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>SolutionIntegerValue</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aeaed9bdf2a27bb778ba397666cb874d7</anchor>
      <arglist>(const CpSolverResponse &amp;r, const LinearExpr &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>SolutionIntegerMin</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a671200a31003492dbef21f2b4ee3dcbd</anchor>
      <arglist>(const CpSolverResponse &amp;r, IntVar x)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>SolutionIntegerMax</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8ec893fa736de5b95135ecb9314ee6d8</anchor>
      <arglist>(const CpSolverResponse &amp;r, IntVar x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolutionBooleanValue</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>afa415e372a9d64eede869ed98666c29c</anchor>
      <arglist>(const CpSolverResponse &amp;r, BoolVar x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>CpModelStats</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a287579e5f181fc7c89feccf1128faffb</anchor>
      <arglist>(const CpModelProto &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>CpSolverResponseStats</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ac2d87e8109f9c60f7af84a60106abd57</anchor>
      <arglist>(const CpSolverResponse &amp;response)</arglist>
    </member>
    <member kind="function">
      <type>CpSolverResponse</type>
      <name>SolveCpModel</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9d67b9c66f1cb9c1dcc3415cd5af11bf</anchor>
      <arglist>(const CpModelProto &amp;model_proto, Model *model)</arglist>
    </member>
    <member kind="function">
      <type>CpSolverResponse</type>
      <name>Solve</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a09d851f944ab4f305c3d9f8df99b7bf8</anchor>
      <arglist>(const CpModelProto &amp;model_proto)</arglist>
    </member>
    <member kind="function">
      <type>CpSolverResponse</type>
      <name>SolveWithParameters</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa3062797aa0396abf37dbcc99a746f12</anchor>
      <arglist>(const CpModelProto &amp;model_proto, const SatParameters &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>CpSolverResponse</type>
      <name>SolveWithParameters</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af52c27ecb43d6486c1a70e022b4aad39</anchor>
      <arglist>(const CpModelProto &amp;model_proto, const std::string &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSynchronizationFunction</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad04337634227eac006d3e33a7028f82f</anchor>
      <arglist>(std::function&lt; CpSolverResponse()&gt; f, Model *model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9644b126f05b927a27fc7eba8e62dd57</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af66c861360ab3857d0bb2d53fde74bca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2262e194393851724b02211c34c57457</anchor>
      <arglist>(DecisionStrategyProto_VariableSelectionStrategy value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af25eeda8a253dce34e0b0e98f69031ad</anchor>
      <arglist>(const ::std::string &amp;name, DecisionStrategyProto_VariableSelectionStrategy *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af161ecb897e60ce83c87c17d11ae7d91</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a3bef95d750e0d2c4dcbf9944a6147232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a15661f91c1c5635b462c569097268773</anchor>
      <arglist>(DecisionStrategyProto_DomainReductionStrategy value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab65df8c02daf63542fcee35b0a9f7779</anchor>
      <arglist>(const ::std::string &amp;name, DecisionStrategyProto_DomainReductionStrategy *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CpSolverStatus_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8f7f7995f8e9a03c15cdddf39b675702</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>CpSolverStatus_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aef4cfe27470b9d29843e9394cb75f33a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>CpSolverStatus_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a168a8ab6018d96c83fbd0d0ee03e087c</anchor>
      <arglist>(CpSolverStatus value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CpSolverStatus_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a49458d152506001af5ad6ad1b7c8576e</anchor>
      <arglist>(const ::std::string &amp;name, CpSolverStatus *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_VariableOrder_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a711b59624fbd706f0754647084c665d8</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_VariableOrder_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a63d00708775015b761d79d26958ae008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_VariableOrder_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aea11eda3bbcc4f79baab267009d28df6</anchor>
      <arglist>(SatParameters_VariableOrder value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_VariableOrder_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a628f11b71a7acbabf2c7eb0a55ebf04e</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_VariableOrder *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_Polarity_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a4585806adf77d6f7a56bd21230a31175</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_Polarity_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab019ee0753776b26fed17764e82d23e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_Polarity_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aeb3937db56cace9b52fbb3ada9bfea73</anchor>
      <arglist>(SatParameters_Polarity value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_Polarity_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aacbaf337b8a87121b647c838bef22e1b</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_Polarity *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a90d6f173fbfa33e26ff6508013c81ffd</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a0405a68dd3f67e20ca8c7b12d45cb870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a729819ca8e41e5a7c95a32da63d75804</anchor>
      <arglist>(SatParameters_ConflictMinimizationAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a184421f59216ca2ef58f282236cf8bc3</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_ConflictMinimizationAlgorithm *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_BinaryMinizationAlgorithm_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a3e37f554c39fbb05faf07674ac550f47</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_BinaryMinizationAlgorithm_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ac6854e48c578db9f71a0c4a95dc95279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_BinaryMinizationAlgorithm_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af7cc36dac69bb4b7d7d5dacbf37e57ba</anchor>
      <arglist>(SatParameters_BinaryMinizationAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_BinaryMinizationAlgorithm_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa0292e780dbe4984839ecad4b44fccf0</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_BinaryMinizationAlgorithm *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_ClauseProtection_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ac1aa9d5ea93fbc96a68237c2beda3836</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_ClauseProtection_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>afdfdf216dea1b6ca3cb4c816396f7493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_ClauseProtection_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa46504e5e34f1716ac37b78ddc08b060</anchor>
      <arglist>(SatParameters_ClauseProtection value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_ClauseProtection_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a1558fb6c8e007b75889204116c149f78</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_ClauseProtection *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_ClauseOrdering_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa6f7c43106217e8a55877110b7d87e7c</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_ClauseOrdering_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a38f0d79ca92d2252d62d8db8dfd1556a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_ClauseOrdering_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a56d5fe6aa184be05f6092ab990f5250e</anchor>
      <arglist>(SatParameters_ClauseOrdering value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_ClauseOrdering_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad674863df7b9117f210c945f2674db58</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_ClauseOrdering *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_RestartAlgorithm_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab199957e5457d8356687f12d67d1aaac</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_RestartAlgorithm_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa2f24a25dc16dd685917069e6bb22b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_RestartAlgorithm_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9703a0efa39a7877735205de9a006c0f</anchor>
      <arglist>(SatParameters_RestartAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_RestartAlgorithm_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a0960de8f477819a400cbd3a41062b9a2</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_RestartAlgorithm *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_MaxSatAssumptionOrder_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a4104fcd7cb88b2edc4cbc86e6b331cdf</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_MaxSatAssumptionOrder_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a828b06b1d9e9e57276c5092899592cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_MaxSatAssumptionOrder_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a3a48b4e764d3598485a64075cee904fa</anchor>
      <arglist>(SatParameters_MaxSatAssumptionOrder value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_MaxSatAssumptionOrder_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a3bc3e149fd0e1959e5805d7ad73ccff2</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_MaxSatAssumptionOrder *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a5fcee51ba7784a7c403731301af6e14c</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a52f132562a3089063ffa35dc1c54f21b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a08c2c94217816891bec7180e5f6b50d3</anchor>
      <arglist>(SatParameters_MaxSatStratificationAlgorithm value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>affb8017c363df7be4c369908a6e1f90f</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_MaxSatStratificationAlgorithm *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_SearchBranching_IsValid</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9018824bcc1b169f32af87ad4faf7561</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::EnumDescriptor *</type>
      <name>SatParameters_SearchBranching_descriptor</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a136b498c164dea9e5a9829d1590cec7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>SatParameters_SearchBranching_Name</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aaf4dfaa6a41d60012b210e5587cbbf51</anchor>
      <arglist>(SatParameters_SearchBranching value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SatParameters_SearchBranching_Parse</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a992a00120a7ac841217f4561576cc354</anchor>
      <arglist>(const ::std::string &amp;name, SatParameters_SearchBranching *value)</arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(Model *)&gt;</type>
      <name>NewFeasibleSolutionObserver</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aacf15d440f0db4cd0a63c8aebe85db6d</anchor>
      <arglist>(const std::function&lt; void(const CpSolverResponse &amp;response)&gt; &amp;observer)</arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; SatParameters(Model *)&gt;</type>
      <name>NewSatParameters</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a10700832ca6bc420f2931eb707957b0b</anchor>
      <arglist>(const std::string &amp;params)</arglist>
    </member>
    <member kind="variable">
      <type>AllDifferentConstraintProtoDefaultTypeInternal</type>
      <name>_AllDifferentConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad5cadc3f160d3e34ef323536a36578ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AutomatonConstraintProtoDefaultTypeInternal</type>
      <name>_AutomatonConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a89e105e8d30d25c4c680294fe7d572c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoolArgumentProtoDefaultTypeInternal</type>
      <name>_BoolArgumentProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad05e4bcf8c4464c50e1f1b8af2b81ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CircuitConstraintProtoDefaultTypeInternal</type>
      <name>_CircuitConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a6a9352c8a15382c9206993a807ca1f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CircuitCoveringConstraintProtoDefaultTypeInternal</type>
      <name>_CircuitCoveringConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>adc89524c8aab967f7d4a66bd3ec70bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstraintProtoDefaultTypeInternal</type>
      <name>_ConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a946e95ccf1a9faf8270238f5c5b301fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CpModelProtoDefaultTypeInternal</type>
      <name>_CpModelProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ace223c8e846b17ef993566562cec8dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CpObjectiveProtoDefaultTypeInternal</type>
      <name>_CpObjectiveProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>acfdc8eaa58fc4cf8b103821df60cd4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CpSolverResponseDefaultTypeInternal</type>
      <name>_CpSolverResponse_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a13b87f99bbea144cc07cdcd2095ab601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CumulativeConstraintProtoDefaultTypeInternal</type>
      <name>_CumulativeConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aac6a8bda3dfe9f06ab9e4b5d0273df53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DecisionStrategyProtoDefaultTypeInternal</type>
      <name>_DecisionStrategyProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a1d42bd587a5323aaf16295be1dfa1455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DecisionStrategyProto_AffineTransformationDefaultTypeInternal</type>
      <name>_DecisionStrategyProto_AffineTransformation_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad0110b5023e714ba7608ca6393a28aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ElementConstraintProtoDefaultTypeInternal</type>
      <name>_ElementConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a4ef77bd2a03378993af8582adc081ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IntegerArgumentProtoDefaultTypeInternal</type>
      <name>_IntegerArgumentProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a3dc76ede4b7ff0d2c5bd425c834e1a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IntegerVariableProtoDefaultTypeInternal</type>
      <name>_IntegerVariableProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a44161c9b8ede2f098f009c6980c489a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IntervalConstraintProtoDefaultTypeInternal</type>
      <name>_IntervalConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a4215dda19ecaf7d9b3437190df671cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InverseConstraintProtoDefaultTypeInternal</type>
      <name>_InverseConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a4903b3b9596898e507eadb8642d73b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearConstraintProtoDefaultTypeInternal</type>
      <name>_LinearConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a35f06e6b931d091b424f42c8db845273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NoOverlap2DConstraintProtoDefaultTypeInternal</type>
      <name>_NoOverlap2DConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>afc421996f32997364f39272a061499f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NoOverlapConstraintProtoDefaultTypeInternal</type>
      <name>_NoOverlapConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a75a5dfa26b4dc21981f4c6cc46ae9c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PartialVariableAssignmentDefaultTypeInternal</type>
      <name>_PartialVariableAssignment_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a5fe88249a924da9eac41aefea5ddabed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ReservoirConstraintProtoDefaultTypeInternal</type>
      <name>_ReservoirConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ac0865a57214595b3a38ceee49543b4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutesConstraintProtoDefaultTypeInternal</type>
      <name>_RoutesConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ae1bf1cf3f7f77485b9d4c7ab4d6894ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TableConstraintProtoDefaultTypeInternal</type>
      <name>_TableConstraintProto_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a1b5b8679bd9fed7c991d05c09cf01466</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DecisionStrategyProto_VariableSelectionStrategy</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_VariableSelectionStrategy_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a59941f8a574d610fbd0d2766daf437e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DecisionStrategyProto_VariableSelectionStrategy</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_VariableSelectionStrategy_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa936a57453c9681bab32e74a3747c5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DecisionStrategyProto_VariableSelectionStrategy_VariableSelectionStrategy_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a0fe139f7887fdce2f0d82ba7bfe3b761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DecisionStrategyProto_DomainReductionStrategy</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_DomainReductionStrategy_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8d89ba785675bf6374b216c6880cf89d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DecisionStrategyProto_DomainReductionStrategy</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_DomainReductionStrategy_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a2446fab2d79c5ef3d9ab370d8be7519b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DecisionStrategyProto_DomainReductionStrategy_DomainReductionStrategy_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a98b9900acdb468cd47a37be6ec6fecce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CpSolverStatus</type>
      <name>CpSolverStatus_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a39d6196edcd5c594db5524b4fd1a9cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CpSolverStatus</type>
      <name>CpSolverStatus_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad61de2d59ad12b07b65b1b2497542ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>CpSolverStatus_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9309f1a918471faabd064037b40b3a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SatParametersDefaultTypeInternal</type>
      <name>_SatParameters_default_instance_</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ae6d7897cec550c4b33117827b971e421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_VariableOrder</type>
      <name>SatParameters_VariableOrder_VariableOrder_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>afebbdcc35f1ea46b6b36b02942a45718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_VariableOrder</type>
      <name>SatParameters_VariableOrder_VariableOrder_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa37fa90963dd6767336794ec9ddd88a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_VariableOrder_VariableOrder_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a0dbcc1f155896d126ee866c6fa7cdbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_Polarity</type>
      <name>SatParameters_Polarity_Polarity_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a7dcc06ad16f29c763ef71c12e33428d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_Polarity</type>
      <name>SatParameters_Polarity_Polarity_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa9e4f6913a334312075d8b06e4a8f481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_Polarity_Polarity_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa038a595c0924ec0a6b6d1df43a47a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_ConflictMinimizationAlgorithm</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a797fae7f793822a392093b2c0e0583df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_ConflictMinimizationAlgorithm</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad89401863cafbbb42117a67da51a9c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_ConflictMinimizationAlgorithm_ConflictMinimizationAlgorithm_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8bb3e1b9fc46859bcb473d877fdf81f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_BinaryMinizationAlgorithm</type>
      <name>SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af3993105042b8a18ef4c48af71dbfae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_BinaryMinizationAlgorithm</type>
      <name>SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ac3979ff56f4e8e1a3827ffe9a1cfd953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_BinaryMinizationAlgorithm_BinaryMinizationAlgorithm_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a4603f2b46b1da66b7f160b501802a571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_ClauseProtection</type>
      <name>SatParameters_ClauseProtection_ClauseProtection_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a50a54b74c5a02bf787d5161be8496a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_ClauseProtection</type>
      <name>SatParameters_ClauseProtection_ClauseProtection_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a315f1d416996e0e1df6cf7c5f22c4c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_ClauseProtection_ClauseProtection_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a177a5f526c9aaf4dde0ae3d973a0a1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_ClauseOrdering</type>
      <name>SatParameters_ClauseOrdering_ClauseOrdering_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aa6f7a09fe0ece7997430857d3d2b06d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_ClauseOrdering</type>
      <name>SatParameters_ClauseOrdering_ClauseOrdering_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8939c25bb2dba51fc7d410b379ca4b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_ClauseOrdering_ClauseOrdering_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a7bd8956745a9e0f194935411ad26a7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_RestartAlgorithm</type>
      <name>SatParameters_RestartAlgorithm_RestartAlgorithm_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ad069012c7b5da25c0b506d93f249ae3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_RestartAlgorithm</type>
      <name>SatParameters_RestartAlgorithm_RestartAlgorithm_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ae5654991d85d76a2bb57727e534aca69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_RestartAlgorithm_RestartAlgorithm_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a9fc9eb8a69f68bb8c56f718d2905cccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_MaxSatAssumptionOrder</type>
      <name>SatParameters_MaxSatAssumptionOrder_MaxSatAssumptionOrder_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a8276145f0fea9405a17ea4e15437c370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_MaxSatAssumptionOrder</type>
      <name>SatParameters_MaxSatAssumptionOrder_MaxSatAssumptionOrder_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a253ac635cb2d948d9e6f7ddbdf50deb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_MaxSatAssumptionOrder_MaxSatAssumptionOrder_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ab876374ba4d61ed8a8f5ab1647214f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_MaxSatStratificationAlgorithm</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_MaxSatStratificationAlgorithm_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a81ef72928f25bf91f9459e95b30f60a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_MaxSatStratificationAlgorithm</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_MaxSatStratificationAlgorithm_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>af77a4c44b279a8ed20ba62fe6855f3d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_MaxSatStratificationAlgorithm_MaxSatStratificationAlgorithm_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>aeb0e2efc07e4da53cac4c129726d25c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_SearchBranching</type>
      <name>SatParameters_SearchBranching_SearchBranching_MIN</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a759737df3763d9079011350ee71b933f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SatParameters_SearchBranching</type>
      <name>SatParameters_SearchBranching_SearchBranching_MAX</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>ae811ceae8f8230a59d40b5effad594af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SatParameters_SearchBranching_SearchBranching_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research_1_1sat.html</anchorfile>
      <anchor>a82110fc37ba023a467574052d75d507b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>util</name>
    <filename>namespaceutil.html</filename>
    <class kind="class">util::BaseGraph</class>
    <class kind="class">util::CompleteBipartiteGraph</class>
    <class kind="class">util::CompleteGraph</class>
    <class kind="class">util::ListGraph</class>
    <class kind="class">util::ReverseArcListGraph</class>
    <class kind="class">util::ReverseArcMixedGraph</class>
    <class kind="class">util::ReverseArcStaticGraph</class>
    <class kind="class">util::StaticGraph</class>
    <class kind="class">util::SVector</class>
    <class kind="class">util::UndirectedAdjacencyListsOfDirectedGraph</class>
    <member kind="typedef">
      <type>ListGraph</type>
      <name>Graph</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae76339cb2dcd3bc05ad762146f91fdda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>GraphToStringFormat</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae705e1342dacc10a13fb3f11f91d0696</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_GRAPH_ARCS</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae705e1342dacc10a13fb3f11f91d0696acac9245da1bf36d1d9382dc579e1a4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_GRAPH_ADJACENCY_LISTS</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae705e1342dacc10a13fb3f11f91d0696aaed5759e3b6e3a8592c9a21e0048b565</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_GRAPH_ADJACENCY_LISTS_SORTED</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae705e1342dacc10a13fb3f11f91d0696a454bb1ede69e280a1e4959acb82748ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>GetConnectedComponents</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a13f0e8f7e15873600cf8e395958c71e1</anchor>
      <arglist>(int num_nodes, const UndirectedGraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PermuteWithExplicitElementType</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a9470623ca7db3c4a62ce3b326c6b07d8</anchor>
      <arglist>(const IntVector &amp;permutation, Array *array_to_permute, ElementType unused)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Permute</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a8c227a057c1ce9d46b1185abf77ad91e</anchor>
      <arglist>(const IntVector &amp;permutation, Array *array_to_permute)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Permute</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ac497881c4166bc694adc4bee62746118</anchor>
      <arglist>(const IntVector &amp;permutation, std::vector&lt; bool &gt; *array_to_permute)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a37be0131ae922e30a286797a0bef0c96</anchor>
      <arglist>(ListGraph, Outgoing, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>af3c40fc068f645d9dcd15c332e44fc25</anchor>
      <arglist>(StaticGraph, Outgoing, DirectArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a3098e161a6aceeca482be78d2d221b3b</anchor>
      <arglist>(ReverseArcListGraph, Outgoing, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a4d0ae05975a2063f2edbeb749f690fc7</anchor>
      <arglist>(ReverseArcListGraph, Incoming, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a22b5dcc01043ab8da01ebab71ec3ad31</anchor>
      <arglist>(ReverseArcListGraph, OutgoingOrOppositeIncoming, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a863ccdb51afb5ef92fe6c94188a5f7e0</anchor>
      <arglist>(ReverseArcListGraph, OppositeIncoming, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a2cc2a1037195d237820edc97d35404be</anchor>
      <arglist>(ReverseArcStaticGraph, Outgoing, DirectArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a2a51d676cd5d9354bfe1f80d09c44f39</anchor>
      <arglist>(ReverseArcStaticGraph, Incoming, ReverseArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a1db1a919e67261878ff8abda53e664c7</anchor>
      <arglist>(ReverseArcStaticGraph, OutgoingOrOppositeIncoming, DirectArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a1728675285eb75f9f18d6ed7c134d0b6</anchor>
      <arglist>(ReverseArcStaticGraph, OppositeIncoming, ReverseArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ab3308688d13e59e2351bef038ce1fdb0</anchor>
      <arglist>(ReverseArcMixedGraph, Outgoing, DirectArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a3c022b68f68916770fe09996df2f35a3</anchor>
      <arglist>(ReverseArcMixedGraph, Incoming, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a97910ddfce7560b406aa3f4939434eb8</anchor>
      <arglist>(ReverseArcMixedGraph, OutgoingOrOppositeIncoming, DirectArcLimit(node))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_RANGE_BASED_ARC_ITERATION</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a6ce1a67d16c75b202f56301321a457c6</anchor>
      <arglist>(ReverseArcMixedGraph, OppositeIncoming, Base::kNilArc)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GraphToString</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>affed79554a202aaa8bda5b5e98c3a6b2</anchor>
      <arglist>(const Graph &amp;graph, GraphToStringFormat format)</arglist>
    </member>
    <member kind="function">
      <type>false</type>
      <name>ValueOrDie</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a86199e4832dd5c1d61baa53bfecb7b6d</anchor>
      <arglist>())</arglist>
    </member>
    <member kind="function">
      <type>*</type>
      <name>if</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a0a640b5d8a0ba7deaba9afbd4f3ca438</anchor>
      <arglist>(!error_or_graph.ok())</arglist>
    </member>
    <member kind="function">
      <type>***util::StatusOr&lt; Graph * &gt;</type>
      <name>ReadGraphFile</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a9c5c6763e52cd1465a3e1a3ab2437e37</anchor>
      <arglist>(const std::string &amp;filename, bool directed, std::vector&lt; int &gt; *num_nodes_with_color_or_null)</arglist>
    </member>
    <member kind="function">
      <type>util::Status</type>
      <name>WriteGraphToFile</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a6600986f328a49c9485aa03fb6c82946</anchor>
      <arglist>(const Graph &amp;graph, const std::string &amp;filename, bool directed, const std::vector&lt; int &gt; &amp;num_nodes_with_color)</arglist>
    </member>
    <member kind="function">
      <type>util::StatusOr&lt; Graph * &gt;</type>
      <name>ReadGraphFile</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>aeec5b66be4fd6b3021e6eb08b3045a0e</anchor>
      <arglist>(const std::string &amp;filename, bool directed, std::vector&lt; int &gt; *num_nodes_with_color_or_null)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GraphHasSelfArcs</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ac4af76993c891ee4ad507783edec2a1c</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GraphHasDuplicateArcs</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a6b37593970a26f5c88b3d2ea9acea9d2</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GraphIsSymmetric</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a784b483eeae1b49164a8a02fe9c0d3ba</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GraphIsWeaklyConnected</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a97311561fd1f01e9f35b2f7ce18b0af3</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Graph &gt;</type>
      <name>CopyGraph</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a0ed748741b17dad9e6cc485728bb0043</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Graph &gt;</type>
      <name>RemapGraph</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>acfecdce43e9933bde2a94fd879f12f5f</anchor>
      <arglist>(const Graph &amp;graph, const std::vector&lt; int &gt; &amp;new_node_index)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Graph &gt;</type>
      <name>GetSubgraphOfNodes</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ad1df170a504d335462a1104a942e6069</anchor>
      <arglist>(const Graph &amp;graph, const std::vector&lt; int &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>GetWeaklyConnectedComponents</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ab34783e729bb5fc99042893f6bfcbb2f</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSubsetOf0N</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>aa9fb4c9a176acaf72053b11727436e9e</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;v, int n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsValidPermutation</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ad7986b01cf61a31c09a27b4a97db6a83</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Graph &gt;</type>
      <name>RemoveSelfArcsAndDuplicateArcs</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a8a06031908a024a50dbdddc394a22490</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveCyclesFromPath</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a06fa201576c927d92657e090fa86bfdb</anchor>
      <arglist>(const Graph &amp;graph, std::vector&lt; int &gt; *arc_path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PathHasCycle</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>adbb18bcb2f9d64cbbaeb57c328f57e7b</anchor>
      <arglist>(const Graph &amp;graph, const std::vector&lt; int &gt; &amp;arc_path)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>ComputeOnePossibleReverseArcMapping</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae469c559688b92f36bae2788c2e6063e</anchor>
      <arglist>(const Graph &amp;graph, bool die_if_not_symmetric)</arglist>
    </member>
    <member kind="variable">
      <type>***util::StatusOr&lt; MyGraph * &gt;</type>
      <name>error_or_graph</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a123e77d101e4aeb54a2b9e7d9612ad1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>else</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>a99d2b83baf3f908e76fb2161b1c73322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>false</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>aadd7603ae6e78cc2490ca9710fbaf180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>*OutgoingArcIterator</type>
      <name>this</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>acc90f8dbcd326a450a7c781ea7a9539d</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
